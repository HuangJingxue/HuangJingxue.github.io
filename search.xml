<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test1</title>
    <url>/2020/05/16/test1/</url>
    <content><![CDATA[<p><img src="test1%5C1.jpg" alt=""></p>
<img src="/2020/05/16/test1/1.jpg" class="" title="This is an example image">


]]></content>
  </entry>
  <entry>
    <title>云数据库Polardb如何获取事务提交时间戳</title>
    <url>/2020/04/15/aliyundb/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93Polardb%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E6%97%B6%E9%97%B4%E6%88%B3/</url>
    <content><![CDATA[<h2 id="polardb-需开启binlog"><a href="#polardb-需开启binlog" class="headerlink" title="polardb 需开启binlog"></a>polardb 需开启binlog</h2><ul>
<li>修改当前值<strong>loose_polar_log_bin</strong></li>
</ul>
<p><strong>说明</strong></p>
<ul>
<li><p>数据库引擎为MySQL 5.6的PolarDB集群，当前值修改为ON_WITH_GTID；</p>
</li>
<li><p>数据库引擎为MySQL 8.0的PolarDB集群，当前值修改为ON。</p>
</li>
</ul>
<h2 id="canal拉取binlog"><a href="#canal拉取binlog" class="headerlink" title="canal拉取binlog"></a>canal拉取binlog</h2><p>简介：（阿里巴巴 MySQL binlog 增量订阅&amp;消费组件）</p>
<p><em>参考：<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></em></p>
<a id="more"></a>


<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>下载 canal, 访问 <a href="https://github.com/alibaba/canal/releases" target="_blank" rel="noopener">release 页面</a> , 选择需要的包下载, 如以 1.1.4 版本为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.4&#x2F;canal.deployer-1.1.4.tar.gz</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="canal-python"><a href="#canal-python" class="headerlink" title="canal-python"></a>canal-python</h1><h2 id="一-canal-python-简介"><a href="#一-canal-python-简介" class="headerlink" title="一.canal-python 简介"></a>一.canal-python 简介</h2><p>canal-python 是阿里巴巴开源项目 <a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">Canal</a>是阿里巴巴mysql数据库binlog的增量订阅&amp;消费组件 的 python 客户端。为 python 开发者提供一个更友好的使用 Canal 的方式。Canal 是mysql数据库binlog的增量订阅&amp;消费组件。</p>
<p>基于日志增量订阅&amp;消费支持的业务：</p>
<ol>
<li>数据库镜像</li>
<li>数据库实时备份</li>
<li>多级索引 (卖家和买家各自分库索引)</li>
<li>search build</li>
<li>业务cache刷新</li>
<li>价格变化等重要业务消息</li>
</ol>
<p>关于 Canal 的更多信息请访问 <a href="https://github.com/alibaba/canal/wiki" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki</a></p>
<h2 id="二-应用场景"><a href="#二-应用场景" class="headerlink" title="二.应用场景"></a>二.应用场景</h2><p>canal-python 作为Canal的客户端，其应用场景就是Canal的应用场景。关于应用场景在Canal介绍一节已有概述。举一些实际的使用例子：</p>
<p>1.代替使用轮询数据库方式来监控数据库变更，有效改善轮询耗费数据库资源。</p>
<p>2.根据数据库的变更实时更新搜索引擎，比如电商场景下商品信息发生变更，实时同步到商品搜索引擎 Elasticsearch、solr等</p>
<p>3.根据数据库的变更实时更新缓存，比如电商场景下商品价格、库存发生变更实时同步到redis</p>
<p>4.数据库异地备份、数据同步</p>
<p>5.根据数据库变更触发某种业务，比如电商场景下，创建订单超过xx时间未支付被自动取消，我们获取到这条订单数据的状态变更即可向用户推送消息。</p>
<p>6.将数据库变更整理成自己的数据格式发送到kafka等消息队列，供消息队列的消费者进行消费。</p>
<h2 id="三-工作原理"><a href="#三-工作原理" class="headerlink" title="三.工作原理"></a>三.工作原理</h2><p>canal-python 是 Canal 的 python 客户端，它与 Canal 是采用的Socket来进行通信的，传输协议是TCP，交互协议采用的是 Google Protocol Buffer 3.0。</p>
<h2 id="四-工作流程"><a href="#四-工作流程" class="headerlink" title="四.工作流程"></a>四.工作流程</h2><p>1.Canal连接到mysql数据库，模拟slave</p>
<p>2.canal-python 与 Canal 建立连接</p>
<p>2.数据库发生变更写入到binlog</p>
<p>5.Canal向数据库发送dump请求，获取binlog并解析</p>
<p>4.canal-python 向 Canal 请求数据库变更</p>
<p>4.Canal 发送解析后的数据给canal-python</p>
<p>5.canal-python收到数据，消费成功，发送回执。（可选）</p>
<p>6.Canal记录消费位置。</p>
<h2 id="五-快速启动"><a href="#五-快速启动" class="headerlink" title="五.快速启动"></a>五.快速启动</h2><h3 id="安装Canal"><a href="#安装Canal" class="headerlink" title="安装Canal"></a>安装Canal</h3><p>Canal 的安装以及配置使用请查看 <a href="https://github.com/alibaba/canal/wiki/QuickStart" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki/QuickStart</a></p>
<p>安装java请查看 <a href="https://www.cnblogs.com/lumama520/p/11058927.html" target="_blank" rel="noopener">https://www.cnblogs.com/lumama520/p/11058927.html</a></p>
<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>python &gt;= 3</p>
<h3 id="构建canal-python客户端"><a href="#构建canal-python客户端" class="headerlink" title="构建canal python客户端"></a>构建canal python客户端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install canal-python</span><br><span class="line">pip install protobuf</span><br></pre></td></tr></table></figure>

<h3 id="建立与Canal的连接"><a href="#建立与Canal的连接" class="headerlink" title="建立与Canal的连接"></a>建立与Canal的连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim canalpython.py</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from canal.client import Client</span><br><span class="line">from canal.protocol import EntryProtocol_pb2</span><br><span class="line">from canal.protocol import CanalProtocol_pb2</span><br><span class="line"></span><br><span class="line">client &#x3D; Client()</span><br><span class="line">client.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;11111)</span><br><span class="line">client.check_valid(username&#x3D;b&#39;&#39;, password&#x3D;b&#39;&#39;)</span><br><span class="line">client.subscribe(client_id&#x3D;b&#39;1001&#39;, destination&#x3D;b&#39;example&#39;, filter&#x3D;b&#39;.*\\..*&#39;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    message &#x3D; client.get(100)</span><br><span class="line">    entries &#x3D; message[&#39;entries&#39;]</span><br><span class="line">    for entry in entries:</span><br><span class="line">        entry_type &#x3D; entry.entryType</span><br><span class="line">        if entry_type in [EntryProtocol_pb2.EntryType.TRANSACTIONBEGIN, EntryProtocol_pb2.EntryType.TRANSACTIONEND]:</span><br><span class="line">            continue</span><br><span class="line">        row_change &#x3D; EntryProtocol_pb2.RowChange()</span><br><span class="line">        row_change.MergeFromString(entry.storeValue)</span><br><span class="line">        event_type &#x3D; row_change.eventType</span><br><span class="line">        header &#x3D; entry.header</span><br><span class="line">        database &#x3D; header.schemaName</span><br><span class="line">        table &#x3D; header.tableName</span><br><span class="line">        event_type &#x3D; header.eventType</span><br><span class="line">        for row in row_change.rowDatas:</span><br><span class="line">            format_data &#x3D; dict()</span><br><span class="line">            if event_type &#x3D;&#x3D; EntryProtocol_pb2.EventType.DELETE:</span><br><span class="line">                for column in row.beforeColumns:</span><br><span class="line">                    format_data &#x3D; &#123;</span><br><span class="line">                        column.name: column.value</span><br><span class="line">                    &#125;</span><br><span class="line">            elif event_type &#x3D;&#x3D; EntryProtocol_pb2.EventType.INSERT:</span><br><span class="line">                for column in row.afterColumns:</span><br><span class="line">                    format_data &#x3D; &#123;</span><br><span class="line">                        column.name: column.value</span><br><span class="line">                    &#125;</span><br><span class="line">            else:</span><br><span class="line">                format_data[&#39;before&#39;] &#x3D; format_data[&#39;after&#39;] &#x3D; dict()</span><br><span class="line">                for column in row.beforeColumns:</span><br><span class="line">                    format_data[&#39;before&#39;][column.name] &#x3D; column.value</span><br><span class="line">                for column in row.afterColumns:</span><br><span class="line">                    format_data[&#39;after&#39;][column.name] &#x3D; column.value</span><br><span class="line">            data &#x3D; dict(</span><br><span class="line">                db&#x3D;database,</span><br><span class="line">                table&#x3D;table,</span><br><span class="line">                event_type&#x3D;event_type,</span><br><span class="line">                data&#x3D;format_data,</span><br><span class="line">            )</span><br><span class="line">            print(data)</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line">client.disconnect()</span><br></pre></td></tr></table></figure>

<h2 id="事务时间戳获取"><a href="#事务时间戳获取" class="headerlink" title="事务时间戳获取"></a>事务时间戳获取</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Oracle01 ~]# mysql -uxxx -pxxx -hlocalhost</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use qinxidb</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into tb (userId) values (9161);</span></span><br><span class="line">Query OK, 1 row affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">[root@Oracle01 canal]# python3 canalpython.py </span><br><span class="line">connected to 127.0.0.1:11111</span><br><span class="line">Auth succed</span><br><span class="line">Subscribe succed</span><br><span class="line">header &#123;</span><br><span class="line">  version: 1</span><br><span class="line">  logfileName: "mybinlog.000011"</span><br><span class="line">  logfileOffset: 38812146</span><br><span class="line">  serverId: 4</span><br><span class="line">  serverenCode: "UTF-8"</span><br><span class="line">  executeTime: 1586929590000</span><br><span class="line">  sourceType: MYSQL</span><br><span class="line">  eventLength: 75</span><br><span class="line">&#125;</span><br><span class="line">entryType: TRANSACTIONBEGIN</span><br><span class="line">storeValue: " \204\254\001"</span><br><span class="line"></span><br><span class="line">header &#123;</span><br><span class="line">  version: 1</span><br><span class="line">  logfileName: "mybinlog.000011"</span><br><span class="line">  logfileOffset: 38812269</span><br><span class="line">  serverId: 4</span><br><span class="line">  serverenCode: "UTF-8"</span><br><span class="line">  executeTime: 1586929590000</span><br><span class="line">  sourceType: MYSQL</span><br><span class="line">  schemaName: "qinxidb"</span><br><span class="line">  tableName: "tb"</span><br><span class="line">  eventLength: 40</span><br><span class="line">  eventType: INSERT</span><br><span class="line">  props &#123;</span><br><span class="line">    key: "rowsCount"</span><br><span class="line">    value: "1"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">entryType: ROWDATA</span><br><span class="line">storeValue: "\010\177\020\001P\000b#\022!\010\000\020\004\032\006userId \000(\0010\000B\0049161R\007int(11)"</span><br><span class="line"></span><br><span class="line">&#123;'db': 'qinxidb', 'table': 'tb', 'event_type': 1, 'data': &#123;'userId': '9161'&#125;&#125;</span><br><span class="line">header &#123;</span><br><span class="line">  version: 1</span><br><span class="line">  logfileName: "mybinlog.000011"</span><br><span class="line">  logfileOffset: 38812309</span><br><span class="line">  serverId: 4</span><br><span class="line">  serverenCode: "UTF-8"</span><br><span class="line">  executeTime: 1586929590000</span><br><span class="line">  sourceType: MYSQL</span><br><span class="line">  eventLength: 31</span><br><span class="line">&#125;</span><br><span class="line">entryType: TRANSACTIONEND</span><br><span class="line">storeValue: "\022\00551434"</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>云数据库</category>
      </categories>
      <tags>
        <tag>Polardb</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Git玩转三剑客-第1课</title>
    <url>/2020/05/16/git/Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC1%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">创建目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir git_01</span></span><br><span class="line"></span><br><span class="line">进入目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> git_01/</span></span><br><span class="line"></span><br><span class="line">初始化</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init .</span></span><br><span class="line">Initialized empty Git repository in xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .git/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 7</span><br><span class="line">-rw-r--r-- 1 Apple 197121 130 5月  15 10:33 config</span><br><span class="line">-rw-r--r-- 1 Apple 197121  73 5月  15 10:33 description</span><br><span class="line">-rw-r--r-- 1 Apple 197121  23 5月  15 10:33 HEAD</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 hooks/</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 info/</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 objects/</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 refs/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat config</span></span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line"></span><br><span class="line">配置</span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name apple</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.mail huangjx@jiagouyun.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat config</span></span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line">		</span><br><span class="line">--global配置config文件内容没有变化</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --<span class="built_in">local</span> user.name apple</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --<span class="built_in">local</span> user.mail huangjx@jiagouyun.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat config</span></span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line">[user]</span><br><span class="line">        name = apple</span><br><span class="line">        mail = huangjx@jiagouyun.com</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h1 id="上传文件到仓库"><a href="#上传文件到仓库" class="headerlink" title="上传文件到仓库"></a>上传文件到仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">新建文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim xxCPU高了.md</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">-rw-r--r-- 1 Apple 197121 10 5月  15 10:38 xxCPU高了.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        "xxCPU\351\253\230\344\272\206.md"</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line">warning: LF will be replaced by CRLF in xxCPU高了.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line"></span><br><span class="line">Apple@DESKTOP-V8IAR5D MINGW64 /d/智能团队相关资料/08_学习内容/04_gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use "git rm --cached &lt;file&gt;..." to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   "xxCPU\351\253\230\344\272\206.md"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'新增了一个文件XX'</span></span></span><br><span class="line">[master (root-commit) e9a5c8c] 新增了一个文件XX</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 "xxCPU\351\253\230\344\272\206.md"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>
<blockquote>
<p>新增文件会先放到工作区放到git add将文件放到暂存区再放到git commit版本库</p>
</blockquote>
<h1 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57 (HEAD -&gt; master)</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:42:29 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增了一个文件XX</span><br></pre></td></tr></table></figure>

<h1 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57 (HEAD -&gt; master)</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:42:29 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增了一个文件XX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch a</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">        a</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line">[master e84f58a] 新增a</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit e84f58a3eff4b3b05023e005d966cdb8f835a258 (HEAD -&gt; master)</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:46:36 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增a</span><br><span class="line"></span><br><span class="line">commit e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:42:29 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增了一个文件XX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57</span></span><br><span class="line">HEAD is now at e9a5c8c 新增了一个文件XX</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">-rw-r--r-- 1 Apple 197121 10 5月  15 10:38 xxCPU高了.md</span><br></pre></td></tr></table></figure>

<h1 id="将git仓库备份到本地"><a href="#将git仓库备份到本地" class="headerlink" title="将git仓库备份到本地"></a>将git仓库备份到本地</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir backup_dir</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> backup_dir</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/d/gitlab仓库1/backup_dir</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --bare file:///d/gitlab仓库1/git_01 backup_git_01</span></span><br><span class="line">Cloning into bare repository 'backup_git_01'...</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), done.</span><br><span class="line"></span><br><span class="line">/d/gitlab仓库1/backup_dir</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ../git_01/</span></span><br><span class="line"></span><br><span class="line">/d/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add backup_git_01 file:///gitlab仓库1/git_01/</span></span><br><span class="line"></span><br><span class="line">/d/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push --<span class="built_in">set</span>-upstream backup_git_01 master</span></span><br><span class="line">Everything up-to-date</span><br><span class="line">Branch master set up to track remote branch master from backup_git_01.</span><br></pre></td></tr></table></figure>


<h1 id="如何多地管理仓库"><a href="#如何多地管理仓库" class="headerlink" title="如何多地管理仓库"></a>如何多地管理仓库</h1><p><a href="https://help.github.com/en/github/getting-started-with-github" target="_blank" rel="noopener">github帮助</a></p>
<ul>
<li>github创建仓库</li>
</ul>
<p><img src="Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC1%E8%AF%BE/1.jpg" alt=""></p>
<ul>
<li>本地仓库上传到github仓库<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create a new repository on the command line</span><br><span class="line">echo "# git_01" &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "first commit"</span><br><span class="line">git remote add origin git@github.com:HuangJingxue/git_01.git</span><br><span class="line">git push -u origin master</span><br><span class="line">                </span><br><span class="line">…or push an existing repository from the command line</span><br><span class="line">git remote add origin git@github.com:HuangJingxue/git_01.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:HuangJingxue/git_01.git</span></span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 248 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:HuangJingxue/git_01.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br></pre></td></tr></table></figure>
<blockquote>
<p>本地仓库成功推送到github仓库</p>
</blockquote>
</li>
</ul>
<p><img src="Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC1%E8%AF%BE%5C2.jpg" alt=""></p>
<p>远程拉取github仓库更新内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim studygit.md</span></span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A .</span></span><br><span class="line">warning: LF will be replaced by CRLF in studygit.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'add studygit'</span></span></span><br><span class="line">[master b8623c7] add studygit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 studygit.md</span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 287 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:HuangJingxue/git_01.git</span><br><span class="line">   e9a5c8c..b8623c7  master -&gt; master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由BooBooWei操作</span><br><span class="line">cd gittest</span><br><span class="line">git clone https://github.com/HuangJingxue/git_01.git</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>开源工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>MonogDB初体验</title>
    <url>/2020/04/04/mongodb/mongodb%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="1-MonogDB简介"><a href="#1-MonogDB简介" class="headerlink" title="1.MonogDB简介"></a>1.MonogDB简介</h1><p>MongoDB 是一款强大，灵活，且易于扩展的通用性数据库，<strong>面向文档的数据库</strong>。</p>
<ul>
<li>二级索引</li>
<li>范围查询</li>
<li>排序</li>
<li>聚合</li>
<li>地理空间索引</li>
</ul>
<a id="more"></a>

<p>丰富的功能：</p>
<ul>
<li>索引（indexing）</li>
</ul>
<p>MongoDB支持通用二级索引，允许多种快速查询，且提供唯一索引、复合索引、地理空间索引，以及全文索引。</p>
<ul>
<li>聚合（aggregation）</li>
</ul>
<p>MongoDB支持“聚合管道”。用户能通过简单的片段创建复杂的聚合，并通过数据库自动优化。</p>
<ul>
<li>特殊的集合类型</li>
</ul>
<p>MongoDB支持存在时间有限的集合，适用于那些将在某个时刻过期的数据，如会话。固定大小的集合，用于保存近期数据，如日志。</p>
<ul>
<li>文件存储</li>
</ul>
<p>MongoDB支持一种非常医用的协议，用于存储大文件和文件元数据。</p>
<p>基本概念：</p>
<ul>
<li>文档是MongoDB中数据的基本单元，非常类似于关系型数据库管理系统中的行，但更具有表现力。</li>
<li>集合是一个拥有动态模式的表。</li>
<li>MongoDB的一个实例可以拥有多个相互独立的数据库，每一个数据库都拥有自己的集合。</li>
<li>每一个文档都有一个特殊的键“_id”,这个键在文档所属的集合中是唯一的。</li>
<li>MongoDB自带了一个简单但功能强大的JavaScript shell，可用于管理MongoDB的实例或数据操作。</li>
</ul>
<h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><p>集合命名：</p>
<ul>
<li>集合名不能使空字符串（””）</li>
<li>集合名不能包含\0字符（空字符），这个字符表示集合名的结束。</li>
<li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li>
<li>用户创建的集合不能在集合名中包含保留字符’$’。</li>
</ul>
<p>子集合：</p>
<p>组合集合的一种惯例是使用“.”分隔不同命名空间的子集合。</p>
<ul>
<li>GridFS使用自己和来存储文件的元数据，这样就可以与文件内容块很好地隔离开来。</li>
<li>大多数驱动程序都提供了一些语法糖，用于访问指定集合的子集合。</li>
</ul>
<p>数据库：</p>
<ul>
<li>多个文档组成集合，多个集合可以组成数据库。</li>
<li>一个MongoDB实例可以承载多个数据库，每个数据库拥有0个或者多个集合。</li>
<li>每个数据库斗殴独立的权限，即便是在磁盘上，不同的数据库也放置在不同的文件中。</li>
</ul>
<p>数据库命名：</p>
<ul>
<li>不能空字符串（””）</li>
<li>基本只能使用ASCII中的字母和数字。</li>
<li>数据库名区分大小写（不区分大小写的文件系统也是如此，建议全部小写）。</li>
<li>数据库名最多为64字节。</li>
</ul>
<h1 id="3-启动关闭MongoDB"><a href="#3-启动关闭MongoDB" class="headerlink" title="3.启动关闭MongoDB"></a>3.启动关闭MongoDB</h1><ul>
<li>mongod默认数据目录/data/db（Windows系统中为C:\data\db）。</li>
<li>启动前，创建数据目录（mkdir -p /data/db）,确保对改目录有写权限。</li>
<li>默认MonoDB监听27017端口。</li>
</ul>
<h1 id="4-MonogDB客户端"><a href="#4-MonogDB客户端" class="headerlink" title="4.MonogDB客户端"></a>4.MonogDB客户端</h1><ul>
<li>启动时，mongodb shell会练到MongoDB服务器的test数据库，并将数据库连接赋值给全局变量db。</li>
<li>这个变量是通过shell访问MongoDB的主要入口点。</li>
</ul>
<h1 id="5-shell中的基本操作"><a href="#5-shell中的基本操作" class="headerlink" title="5.shell中的基本操作"></a>5.shell中的基本操作</h1><p>1、创建</p>
<ul>
<li>insert函数可将一个文档添加到集合中。</li>
<li>创建一个名为post的局部变量，用来表示我们的文档。</li>
<li>它会有几个键：”title”、”content”、“date”。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; post &#x3D; &#123;&quot;title&quot;:&quot;this is test,&quot;&#125;</span><br><span class="line">&#123; &quot;title&quot; : &quot;this is test,&quot; &#125;</span><br><span class="line">&gt; post &#x3D; &#123;&quot;title&quot;:&quot;this is test&quot;,</span><br><span class="line">... &quot;content&quot; :&quot;here&#39;s my blog test&quot;,</span><br><span class="line">... &quot;data&quot;:new Date()&#125;</span><br><span class="line">&#123;</span><br><span class="line">	&quot;title&quot; : &quot;this is test&quot;,</span><br><span class="line">	&quot;content&quot; : &quot;here&#39;s my blog test&quot;,</span><br><span class="line">	&quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; show dbs</span><br><span class="line">local  0.000GB</span><br><span class="line">&gt; use hjxdb</span><br><span class="line">switched to db hjxdb</span><br><span class="line">&gt; db.blog.insert(post);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.blog.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59dedf7ecb7cf32013d3da35&quot;), &quot;title&quot; : &quot;this is test&quot;, &quot;content&quot; : &quot;here&#39;s my blog test&quot;, &quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;) &#125;</span><br></pre></td></tr></table></figure>

<p>2、读取</p>
<p>find和findOne方法可以用于查询集合里的文档。若只想查看一个文档，可用findOne：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.blog.findOne()</span><br><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;59dedf7ecb7cf32013d3da35&quot;),</span><br><span class="line">	&quot;title&quot; : &quot;this is test&quot;,</span><br><span class="line">	&quot;content&quot; : &quot;here&#39;s my blog test&quot;,</span><br><span class="line">	&quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、更新</p>
<ul>
<li>update至少两个参数</li>
<li>一个是限定条件,匹配待更新的文档</li>
<li>一个是新的文档</li>
<li>之前的文章增加平冷功能，新增一个键，用来保存评论数组</li>
</ul>
<p>增加”comments”键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; post.comments &#x3D; []</span><br><span class="line">[ ]</span><br><span class="line">&gt; db.blog.update(&#123;title:&quot;this is test&quot;&#125;,post)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">&gt; db.blog.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59dedf7ecb7cf32013d3da35&quot;), &quot;title&quot; : &quot;this is test&quot;, &quot;content&quot; : &quot;here&#39;s my blog test&quot;, &quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;), &quot;comments&quot; : [ ] &#125;</span><br></pre></td></tr></table></figure>

<p>4、删除</p>
<ul>
<li>remove方法可将文档从数据库中永久删除。</li>
<li>没有任何参数，将删除集合内的所有文档全部删除。</li>
<li>接受一个限定条件的文档作为参数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.blog.remove(&#123;title:&quot;this is test&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.blog.find()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title>Git玩转三剑客-第2课-分支管理</title>
    <url>/2020/05/15/git/Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC2%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> ssh://git@gitlab.jiagouyun.com:40022/zy-docs/pd-forethought-helps.git</span></span><br><span class="line">Cloning into 'pd-forethought-helps'...</span><br><span class="line">remote: Counting objects: 10236, done.</span><br><span class="line">remote: Compressing objects: 100% (77/77), done.</span><br><span class="line">remote: Total 10236 (delta 26), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (10236/10236), 67.68 MiB | 949.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (5016/5016), done.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --all</span></span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dashboard/MySQL锁监控</span><br><span class="line">  remotes/origin/dashboard/自建MariaDB监控</span><br><span class="line"></span><br><span class="line">创建分支</span><br><span class="line">git branch dashborad/自建MariaDB2监控</span><br><span class="line"></span><br><span class="line">切换分支</span><br><span class="line">git checkout dashborad/自建MariaDB2监控</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前分支所有提交完成，允许切换</span></span><br><span class="line"></span><br><span class="line">上传本地到分支仓库</span><br><span class="line">git push --set-upstream origin dashborad/自建MariaDB2监控</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">提交merge request</span><br><span class="line">初学者选择web页面上处理</span><br><span class="line"><span class="meta">#</span><span class="bash">命令方式待完善</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除分支</span><br><span class="line">git branch -d 自建MariaDB2监控</span><br><span class="line"><span class="meta">#</span><span class="bash"> web页面上也点击清除</span></span><br></pre></td></tr></table></figure>

<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><ul>
<li>Pycharm管理git仓库</li>
</ul>
]]></content>
      <categories>
        <category>开源工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql/MyFlash初体验</title>
    <url>/2020/05/12/mysql/MyFlash%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="MyFlash初体验"><a href="#MyFlash初体验" class="headerlink" title="MyFlash初体验"></a>MyFlash初体验</h2><h2 id="验证binlog2sql-是否支持blob转换"><a href="#验证binlog2sql-是否支持blob转换" class="headerlink" title="验证binlog2sql 是否支持blob转换"></a>验证binlog2sql 是否支持blob转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;--w_blob.py  写入blob   import sys import pymysql import os  path &#x3D; &quot;.&#x2F;&quot;  fp &#x3D; open(&quot;&#x2F;alidata&#x2F;PG01.jpg&quot;, &#39;rb&#39;) img &#x3D; fp.read() fp.close()  database &#x3D; pymysql.connect(host&#x3D;&quot;localhost&quot;, user&#x3D;&quot;root&quot;, passwd&#x3D;&quot;root&quot;, db&#x3D;&quot;qinxi&quot;) cursor &#x3D; database.cursor() sql &#x3D; &quot;INSERT INTO tb_test (nameBlob) VALUES  (%s);&quot; args &#x3D; (img) cursor.execute(sql, args) database.commit() cursor.close() database.close()  print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;) print(&quot;Done! &quot;)   --r_blob.py 读取blob  import pymysql as mdb import sys  conn &#x3D; mdb.connect(host&#x3D;&#39;localhost&#39;,user&#x3D;&#39;root&#39;,passwd&#x3D;&#39;root&#39;,db&#x3D;&#39;qinxi&#39;) cursor &#x3D; conn.cursor() cursor.execute(&quot;SELECT nameBlob FROM tb_test LIMIT 1&quot;) fout &#x3D; open(&#39;PG333.jpg&#39;,&#39;wb&#39;) fout.write(cursor.fetchone()[0]) fout.close() cursor.close() conn.close()    python binlog2sql.py -uroot -h10.200.6.53 -proot -B --start-file&#x3D;mybinlog.000033 &gt; 33.sql&#96;</span><br></pre></td></tr></table></figure>



<h1 id="MyFlash测试"><a href="#MyFlash测试" class="headerlink" title="MyFlash测试"></a>MyFlash测试</h1><p><a href="https://github.com/Meituan-Dianping/MyFlash" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/MyFlash</a></p>
<p>安装</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;yum install libgnomeui-devel  gcc -w -g &#96;pkg-config --cflags  glib-2.0&#96; source&#x2F;binlogParseGlib.c   -o binary&#x2F;flashback &#x2F;usr&#x2F;lib64&#x2F;libglib-2.0.a -lrt yum install install glib2*&#96;</span><br></pre></td></tr></table></figure>

<p>测试环境准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Meituan-Dianping&#x2F;MyFlash&#x2F;blob&#x2F;master&#x2F;doc&#x2F;TestCase.md</span><br><span class="line">CREATE TABLE &#96;tb_test&#96; (   &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,   &#96;nameBlob&#96; longblob,   PRIMARY KEY (&#96;id&#96;) ) ENGINE&#x3D;InnoDB；</span><br></pre></td></tr></table></figure>



<p>回滚命令生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;.&#x2F;MyFlash&#x2F;binary&#x2F;flashback --binlogFileNames&#x3D;&#x2F;alidata&#x2F;mysql&#x2F;mybinlog.000022 --outBinlogFileNameBase&#x3D;22delete.flashback&#96;</span><br></pre></td></tr></table></figure>



<p>扩展</p>
<p>阿里云RDS实例，用户没有Super权限，导入带有set @@信息，会提示ERROR 1227 (42000) at line 18: Access denied; you need (at least one of) the SUPERprivilege(s) for this operation报错。</p>
<p>本地5.7版本，测试去除set @@GTID_NEXT,当GTID模式开启状态，导入实例会提示报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1782 (HY000) at line 19: @@SESSION.GTID_NEXT cannot be set to ANONYMOUS when @@GLOBAL.GTID_MODE &#x3D; ON.</span><br></pre></td></tr></table></figure>

<p>只有将 GTID模式关闭，才可以正常导入。</p>
<p><a href="https://bugs.mysql.com/bug.php?id=85480" target="_blank" rel="noopener">https://bugs.mysql.com/bug.php?id=85480</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;mysqlbinlog -v -v --skip-gtids 22delete.flashback | sed &#39;s@\&#x2F;\*.*\*\&#x2F;@@&#39; |mysql -uroot -proot&#96;</span><br></pre></td></tr></table></figure>

<p>初步结论：云上RDS 目前无法使用该工具，由于没有super权限。</p>
]]></content>
  </entry>
  <entry>
    <title>mysql/mysql误删数据谁来拯救</title>
    <url>/2020/05/12/mysql/mysql%E8%AF%AF%E5%88%A0%E6%95%B0%E6%8D%AE%E8%B0%81%E6%9D%A5%E6%8B%AF%E6%95%91/</url>
    <content><![CDATA[<h2 id="MyFlash初体验"><a href="#MyFlash初体验" class="headerlink" title="MyFlash初体验"></a>MyFlash初体验</h2><h2 id="验证binlog2sql-是否支持blob转换"><a href="#验证binlog2sql-是否支持blob转换" class="headerlink" title="验证binlog2sql 是否支持blob转换"></a>验证binlog2sql 是否支持blob转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;--w_blob.py  写入blob   import sys import pymysql import os  path &#x3D; &quot;.&#x2F;&quot;  fp &#x3D; open(&quot;&#x2F;alidata&#x2F;PG01.jpg&quot;, &#39;rb&#39;) img &#x3D; fp.read() fp.close()  database &#x3D; pymysql.connect(host&#x3D;&quot;localhost&quot;, user&#x3D;&quot;root&quot;, passwd&#x3D;&quot;root&quot;, db&#x3D;&quot;qinxi&quot;) cursor &#x3D; database.cursor() sql &#x3D; &quot;INSERT INTO tb_test (nameBlob) VALUES  (%s);&quot; args &#x3D; (img) cursor.execute(sql, args) database.commit() cursor.close() database.close()  print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;) print(&quot;Done! &quot;)   --r_blob.py 读取blob  import pymysql as mdb import sys  conn &#x3D; mdb.connect(host&#x3D;&#39;localhost&#39;,user&#x3D;&#39;root&#39;,passwd&#x3D;&#39;root&#39;,db&#x3D;&#39;qinxi&#39;) cursor &#x3D; conn.cursor() cursor.execute(&quot;SELECT nameBlob FROM tb_test LIMIT 1&quot;) fout &#x3D; open(&#39;PG333.jpg&#39;,&#39;wb&#39;) fout.write(cursor.fetchone()[0]) fout.close() cursor.close() conn.close()    python binlog2sql.py -uroot -h10.200.6.53 -proot -B --start-file&#x3D;mybinlog.000033 &gt; 33.sql&#96;</span><br></pre></td></tr></table></figure>



<h1 id="MyFlash测试"><a href="#MyFlash测试" class="headerlink" title="MyFlash测试"></a>MyFlash测试</h1><p><a href="https://github.com/Meituan-Dianping/MyFlash" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/MyFlash</a></p>
<p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;yum install libgnomeui-devel  gcc -w -g &#96;pkg-config --cflags  glib-2.0&#96; source&#x2F;binlogParseGlib.c   -o binary&#x2F;flashback &#x2F;usr&#x2F;lib64&#x2F;libglib-2.0.a -lrt yum install install glib2*&#96;</span><br></pre></td></tr></table></figure>

<p>测试环境准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Meituan-Dianping&#x2F;MyFlash&#x2F;blob&#x2F;master&#x2F;doc&#x2F;TestCase.md</span><br><span class="line">CREATE TABLE &#96;tb_test&#96; (   &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,   &#96;nameBlob&#96; longblob,   PRIMARY KEY (&#96;id&#96;) ) ENGINE&#x3D;InnoDB；</span><br></pre></td></tr></table></figure>



<p>回滚命令生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;.&#x2F;MyFlash&#x2F;binary&#x2F;flashback --binlogFileNames&#x3D;&#x2F;alidata&#x2F;mysql&#x2F;mybinlog.000022 --outBinlogFileNameBase&#x3D;22delete.flashback&#96;</span><br></pre></td></tr></table></figure>



<p>扩展</p>
<p>阿里云RDS实例，用户没有Super权限，导入带有set @@信息，会提示ERROR 1227 (42000) at line 18: Access denied; you need (at least one of) the SUPERprivilege(s) for this operation报错。</p>
<p>本地5.7版本，测试去除set @@GTID_NEXT,当GTID模式开启状态，导入实例会提示报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1782 (HY000) at line 19: @@SESSION.GTID_NEXT cannot be set to ANONYMOUS when @@GLOBAL.GTID_MODE &#x3D; ON.</span><br></pre></td></tr></table></figure>

<p>只有将 GTID模式关闭，才可以正常导入。</p>
<p><a href="https://bugs.mysql.com/bug.php?id=85480" target="_blank" rel="noopener">https://bugs.mysql.com/bug.php?id=85480</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;mysqlbinlog -v -v --skip-gtids 22delete.flashback | sed &#39;s@\&#x2F;\*.*\*\&#x2F;@@&#39; |mysql -uroot -proot&#96;</span><br></pre></td></tr></table></figure>

<p>初步结论：云上RDS 目前无法使用该工具，由于没有super权限。</p>
]]></content>
  </entry>
  <entry>
    <title>mysql误删数据谁来背锅</title>
    <url>/2020/04/10/mysql/mysql%E8%AF%AF%E5%88%A0%E6%95%B0%E6%8D%AE%E8%B0%81%E6%9D%A5%E8%83%8C%E9%94%85/</url>
    <content><![CDATA[<blockquote>
<p>我们不止要说误删数据的事后处理办法，更重要是要做到事前预防。</p>
</blockquote>
<p><em>误删数据分类</em></p>
<ul>
<li>使用 delete 语句误删数据行；</li>
<li>使用 drop table 或者 truncate table 语句误删数据表；</li>
<li>使用 drop database 语句误删数据库；</li>
<li>使用 rm 命令误删整个 MySQL 实例。<a id="more"></a>

</li>
</ul>
<p><em>需要完善自动恢复脚本</em></p>
<blockquote>
<p>一种加速的方法是，在用备份恢复出临时实例之后，将这个临时实例设置成线上备库的从库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.恢复全量备份</span></span><br><span class="line">a.指定全量备份路径</span><br><span class="line">b.写入全量备份名称</span><br><span class="line">c.恢复全量备份到指定临时实例</span><br><span class="line"></span><br><span class="line">在 start slave 之前，先通过执行﻿﻿change replication filter replicate_do_table = (tbl_name) 命令，就可以让临时库只同步误操作的表；</span><br><span class="line">这样做也可以用上并行复制技术，来加速整个数据恢复过程。</span><br><span class="line"><span class="comment">#2.自动恢复binlog</span></span><br><span class="line">a.指定binlog备份路径</span><br><span class="line">b.指定需要恢复的binlog名称（1个或者多个）</span><br><span class="line">c.恢复binlog到指定临时实例</span><br></pre></td></tr></table></figure>

<p><em>预防误删库 / 表的方法</em></p>
<ul>
<li><p>第一条建议是，账号分离。这样做的目的是，避免写错命令。</p>
<blockquote>
<p>比如：我们只给业务开发同学 DML 权限，而不给 truncate/drop 权限。<br>而如果业务开发人员有 DDL 需求的话，也可以通过开发管理系统得到支持。<br>即使是 DBA 团队成员，日常也都规定只使用只读账号，必要的时候才使用有更新权限的账号。</p>
</blockquote>
</li>
<li><p>第二条建议是，制定操作规范。</p>
<blockquote>
<p>这样做的目的，是避免写错要删除的表名。<br>比如：在删除数据表之前，必须先对表做改名操作。然后，观察一段时间，确保对业务无影响以后再删除这张表。<br>改表名的时候，要求给表名加固定的后缀（比如加 _to_be_deleted)，然后删除表的动作必须通过管理系统执行。并且，管理系删除表的时候，只能删除固定后缀的表。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么你改了我看不见?</title>
    <url>/2020/04/15/mysql%20%E6%9E%81%E5%AE%A245/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E6%88%91%E7%9C%8B%E4%B8%8D%E8%A7%81/</url>
    <content><![CDATA[<p><strong>事务的基本要素(ACID)</strong></p>
<ul>
<li>原子性（Atomicity）；事务开始后所有操作，要么全部做完，要么全部不做，不能停滞在中间环节。</li>
<li>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏。</li>
<li>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</li>
<li>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li>
</ul>
<p><strong>事务的并发问题</strong></p>
<ul>
<li>脏读：事务B修改数据但未提交，事务A读数据，然后B回滚，则A读到的是脏数据。</li>
<li>不可重复读：事务A第一次读取数据，事务B修改数据提交，事务A第二次读数据，两次数据不一致。</li>
<li>幻读：事务A update表的全部行，事务B插入一行，事务A就会发现表中还有未修改的行。（一般加间隙锁）</li>
</ul>
<p><strong>MySQL事务隔离级别</strong></p>
<table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>会</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>读已提交</td>
<td>不会</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>可重复读</td>
<td>不会</td>
<td>不会</td>
<td>会</td>
</tr>
<tr>
<td>串行话</td>
<td>不会</td>
<td>不会</td>
<td>不会</td>
</tr>
</tbody></table>
<p><strong>案例</strong></p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>启动事务；查询得到值</td>
<td>启动事务</td>
</tr>
<tr>
<td></td>
<td>查询得到值1</td>
</tr>
<tr>
<td></td>
<td>将1改成2</td>
</tr>
<tr>
<td>查询得到值V1</td>
<td></td>
</tr>
<tr>
<td></td>
<td>提交事务B</td>
</tr>
<tr>
<td>查询得到值V2</td>
<td></td>
</tr>
<tr>
<td>提交事务A</td>
<td></td>
</tr>
<tr>
<td>查询得到值V3</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。</p>
</li>
<li><p>若隔离级别是“读提交”，则V1是1，V2的值是2。事务B的更新在提交后才能被A看到。所以，V3的值也是2。</p>
</li>
<li><p>若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</p>
</li>
<li><p>若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</p>
</li>
</ul>
<p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。</p>
<ul>
<li>在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li>
<li>在“读提交”隔离级别下，这个视图是在每个SQL语句开始执行的时候创建的。</li>
<li>在“读未提交”隔离级别下直接返回记录下的最新之，没有视图概念。</li>
<li>而“串性化”隔离级别下直接用加锁的方式来避免并行访问。</li>
</ul>
<p>为保证数据库隔离级别一致，你一定要记得将MYSQL的隔离级别设置为“读提交”。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>幻读是什么，幻读有什么问题？</title>
    <url>/2020/04/21/mysql%20%E6%9E%81%E5%AE%A245/%E5%B9%BB%E8%AF%BB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%B9%BB%E8%AF%BB%E6%9C%89%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    <content><![CDATA[<p><strong>初始化语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `t` (</span><br><span class="line">    -&gt;   `id` int(11) NOT NULL,</span><br><span class="line">    -&gt;   `c` int(11) DEFAULT NULL,</span><br><span class="line">    -&gt;   `d` int(11) DEFAULT NULL,</span><br><span class="line">    -&gt;   PRIMARY KEY (`id`),</span><br><span class="line">    -&gt;   KEY `c` (`c`)</span><br><span class="line">    -&gt; ) ENGINE=InnoDB;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert into t values(0,0,0),(5,5,5),</span><br><span class="line">    -&gt; (10,10,10),(15,15,15),(20,20,20),(25,25,25);</span><br><span class="line">Query OK, 6 rows affected (0.04 sec)</span><br><span class="line">Records: 6  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p><strong>隔离级别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> @@global.tx_isolation;</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| @@global.tx_isolation |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| REPEATABLE-READ       |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h1 id="幻读是什么？"><a href="#幻读是什么？" class="headerlink" title="幻读是什么？"></a>幻读是什么？</h1><table>
<thead>
<tr>
<th></th>
<th>sessionA</th>
<th>sessionB</th>
<th>seesionC</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>begin;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>select * from t where d=5 for update;/*Q1/ result:(5,5,5)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>update t set d=5 where id=0;</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td>select * from t where d=5 for update;/*Q2/ result:(0,0,5),(5,5,5)</td>
<td></td>
<td>insert into t values(1,1,5);</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td>select * from t where d=5 for update;/*Q3/ result:(0,0,5),(1,1,5),(5,5,5)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>T6</td>
<td>commit;</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.Q1 只返回 id&#x3D;5 这一行；</span><br><span class="line">2.在 T2 时刻，session B 把 id&#x3D;0 这一行的 d 值改成了 5，因此 T3 时刻 Q2 查出来的是 id&#x3D;0 和 id&#x3D;5 这两行；</span><br><span class="line">3.在 T4 时刻，session C 又插入一行（1,1,5），因此 T5 时刻 Q3 查出来的是 id&#x3D;0、id&#x3D;1 和 id&#x3D;5 的这三行。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中，Q3 读到 id=1 这一行的现象，被称为“幻读”。也就是说，幻读指的是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此，幻读在“当前读”下才会出现。</span><br><span class="line">2.上面 session B 的修改结果，被 session A 之后的 select 语句用“当前读”看到，不能称为幻读。幻读仅专指“新插入的行”。</span><br></pre></td></tr></table></figure>

<h2 id="幻读有什么问题？"><a href="#幻读有什么问题？" class="headerlink" title="幻读有什么问题？"></a>幻读有什么问题？</h2><ul>
<li>首先是语义上的。</li>
<li>其次，是数据一致性的问题。</li>
<li>也就是说，即使把所有的记录都加上锁，还是阻止不了新插入的记录</li>
</ul>
<h2 id="如何解决幻读？"><a href="#如何解决幻读？" class="headerlink" title="如何解决幻读？"></a>如何解决幻读？</h2><blockquote>
<p>产生幻读的原因是，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。间隙锁和 next-key lock 的引入，帮我们解决了幻读的问题，但同时也带来了一些“困扰”。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</p>
</blockquote>
<ul>
<li>间隙锁是在可重复读隔离级别下才会生效的</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫初体验</title>
    <url>/2020/04/04/python/python%E7%88%AC%E8%99%AB%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = requests.get(<span class="string">'https://wpblog.x0y1.com'</span>)</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line">print(res.text)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">  print(<span class="string">'请求成功'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'请求失败'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取孔乙己数据</span></span><br><span class="line">res = requests.get(<span class="string">'https://apiv3.shanbay.com/codetime/articles/mnvdu'</span>)</span><br><span class="line"><span class="comment"># 以写入的方式打开一个名为孔乙己的 txt 文档</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'孔乙己.txt'</span>, <span class="string">'w'</span> ,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">  <span class="comment"># 将数据的字符串形式写入文件中</span></span><br><span class="line">  file.write(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片数据</span></span><br><span class="line">res = requests.get(<span class="string">'https://assets.baydn.com/baydn/public/codetime/xiaobei/info.jpg'</span>)</span><br><span class="line"><span class="comment"># 以二进制写入的方式打开一个名为 info.jpg 的文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'info.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line"><span class="comment"># 将数据的二进制形式写入文件中</span></span><br><span class="line">  file.write(res.content)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>变量 <strong>res</strong>它的类型是 <strong>Response</strong> 对象</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>res.status_code</td>
<td>响应的 HTTP 状态码</td>
</tr>
<tr>
<td>res.text</td>
<td>响应内容的字符串形式</td>
</tr>
<tr>
<td>res.content</td>
<td>响应内容的二进制形式</td>
</tr>
<tr>
<td>res.encoding</td>
<td>响应内容的编码</td>
</tr>
</tbody></table>
<h2 id="爬虫初体验"><a href="#爬虫初体验" class="headerlink" title="爬虫初体验"></a>爬虫初体验</h2><blockquote>
<p>目标：自动循环小王子的所有章节，将故事存放到一个目录当中，每个章节一份文件。title做为文件名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">'http://www.eywedu.net/xiaowangzi/14.htm'</span>)</span><br><span class="line">res.encoding=<span class="string">'gb2312'</span></span><br><span class="line">text = res.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">'小王子.txt'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">  file.write(text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发语言</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据开发</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣电影排行榜</title>
    <url>/2020/04/04/python/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
    <content><![CDATA[<h1 id="1-如何处理数据"><a href="#1-如何处理数据" class="headerlink" title="1.如何处理数据"></a>1.如何处理数据</h1><p>BeautifulSoup</p>
<ul>
<li>解析数据</li>
<li>提出数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h1><h2 id="2-1获取豆瓣图书TOP250当中"><a href="#2-1获取豆瓣图书TOP250当中" class="headerlink" title="2.1获取豆瓣图书TOP250当中"></a>2.1获取豆瓣图书TOP250当中</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 引入 BeautifulSoup</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(<span class="string">'https://book.douban.com/top250'</span>, headers=headers)</span><br><span class="line"><span class="comment"># 第一个参数为网页源代码，第二个参数为解析器</span></span><br><span class="line">soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># print(soup)</span></span><br><span class="line"><span class="comment"># items = soup.find_all('div', class_='pl2')</span></span><br><span class="line">items = soup.select(<span class="string">'div.pl2 a'</span>)</span><br><span class="line"><span class="comment"># print(items)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">  <span class="comment"># tag = i.find('a')</span></span><br><span class="line">  <span class="comment"># name = ''.join(tag.text.split())</span></span><br><span class="line">  <span class="comment"># name = tag['title']</span></span><br><span class="line">  <span class="comment"># link = tag['href']</span></span><br><span class="line">  name = i[<span class="string">'title'</span>]</span><br><span class="line">  link = i[<span class="string">'href'</span>]</span><br><span class="line">  print(name, link)</span><br></pre></td></tr></table></figure>

<h2 id="2-2获取豆瓣电影的数据-电影名和链接"><a href="#2-2获取豆瓣电影的数据-电影名和链接" class="headerlink" title="2.2获取豆瓣电影的数据(电影名和链接)"></a>2.2获取豆瓣电影的数据(电影名和链接)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">'https://movie.douban.com/top250'</span>, headers=headers)</span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">items = soup.select(<span class="string">'div.hd a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">  link = i[<span class="string">'href'</span>]</span><br><span class="line">  tag = i.find(class_=<span class="string">'title'</span>)</span><br><span class="line">  name = tag.text</span><br><span class="line">  print(name,link)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发语言</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据开发</tag>
      </tags>
  </entry>
</search>
