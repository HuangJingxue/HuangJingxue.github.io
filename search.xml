<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>TiDB简介</title>
    <url>/2020/10/21/TiDB/TiDB%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><em>帮助文档：<a href="https://docs.pingcap.com/zh/tidb/v3.0/online-deployment-using-ansible" target="_blank" rel="noopener">https://docs.pingcap.com/zh/tidb/v3.0/online-deployment-using-ansible</a></em></p>
]]></content>
      <categories>
        <category>TiDB</category>
      </categories>
      <tags>
        <tag>TiDB入门</tag>
      </tags>
  </entry>
  <entry>
    <title>执行SQL获取行锁会话</title>
    <url>/2020/10/20/MySQL/%E6%89%A7%E8%A1%8CSQL%E8%8E%B7%E5%8F%96%E8%A1%8C%E9%94%81%E4%BC%9A%E8%AF%9D/</url>
    <content><![CDATA[<p><strong>查看innodb锁冲突</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.innodb_lock_waits;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.innodb_locks;</span><br></pre></td></tr></table></figure>

<p><strong>查看innodb事务锁冲突情况</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> blocking_trx_id, <span class="keyword">count</span>(blocking_trx_id) <span class="keyword">as</span> countnum <span class="keyword">from</span> (<span class="keyword">select</span> a.trx_id,a.trx_state,b.requesting_trx_id,b.blocking_trx_id <span class="keyword">from</span> information_schema.innodb_lock_waits <span class="keyword">as</span> b <span class="keyword">left</span> <span class="keyword">join</span> information_schema.innodb_trx <span class="keyword">as</span> a <span class="keyword">on</span> a.trx_id=b.requesting_trx_id) <span class="keyword">as</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> blocking_trx_id <span class="keyword">order</span> <span class="keyword">by</span> countnum <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>

<p><strong>获取到innodb事务锁冲突的原始id</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> information_schema.processlist,information_schema.innodb_trx <span class="keyword">where</span> trx_mysql_thread_id=<span class="keyword">id</span> <span class="keyword">and</span> trx_id <span class="keyword">in</span> (<span class="keyword">select</span> blocking_trx_id <span class="keyword">from</span> (<span class="keyword">select</span> blocking_trx_id, <span class="keyword">count</span>(blocking_trx_id) <span class="keyword">as</span> countnum <span class="keyword">from</span> (<span class="keyword">select</span> a.trx_id,a.trx_state,b.requesting_trx_id,b.blocking_trx_id <span class="keyword">from</span> information_schema.innodb_lock_waits <span class="keyword">as</span> b <span class="keyword">left</span> <span class="keyword">join</span> information_schema.innodb_trx <span class="keyword">as</span> a <span class="keyword">on</span> a.trx_id=b.requesting_trx_id) <span class="keyword">as</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> blocking_trx_id <span class="keyword">order</span> <span class="keyword">by</span> countnum <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>) c) ;</span><br></pre></td></tr></table></figure>

<p><strong>获取到innodb事务锁冲突的原始id</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">'kill '</span>, <span class="keyword">id</span>, <span class="string">';'</span>) <span class="keyword">from</span> information_schema.processlist, information_schema.innodb_trx </span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> trx_mysql_thread_id= <span class="keyword">id</span> <span class="keyword">and</span> trx_id <span class="keyword">in</span>( <span class="keyword">select</span> blocking_trx_id <span class="keyword">from</span>( </span><br><span class="line"></span><br><span class="line">  <span class="keyword">select</span> blocking_trx_id, <span class="keyword">count</span>(blocking_trx_id) <span class="keyword">as</span> countnum <span class="keyword">from</span>(</span><br><span class="line"></span><br><span class="line">   <span class="keyword">select</span> a.trx_id, a.trx_state, b.requesting_trx_id, b.blocking_trx_id <span class="keyword">from</span>   information_schema.innodb_lock_waits <span class="keyword">as</span> b </span><br><span class="line"></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> information_schema.innodb_trx <span class="keyword">as</span> a <span class="keyword">on</span> a.trx_id= b.requesting_trx_id</span><br><span class="line"></span><br><span class="line">) <span class="keyword">as</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> blocking_trx_id <span class="keyword">order</span> <span class="keyword">by</span> countnum <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span>) c) ;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">--执行kill命令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">kill</span> <span class="number">3220448</span>;</span><br></pre></td></tr></table></figure>

<p><strong>查看是否存在元锁冲突</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">processlist</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,State,command <span class="keyword">from</span> information_schema.processlist <span class="keyword">where</span> State= <span class="string">"Waiting for table metadata lock"</span> ;</span><br></pre></td></tr></table></figure>

<p><strong>查看导致元锁冲突的会话详细</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> information_schema.innodb_trx i,</span><br><span class="line"></span><br><span class="line">  (<span class="keyword">select</span>  <span class="keyword">id</span>, <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">from</span> information_schema.processlist</span><br><span class="line"></span><br><span class="line"> <span class="keyword">where</span> <span class="built_in">time</span> = (<span class="keyword">select</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">max</span>(<span class="built_in">time</span>) <span class="keyword">from</span></span><br><span class="line"></span><br><span class="line">information_schema.processlist</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line"></span><br><span class="line">state = <span class="string">'Waiting for table metadata lock'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> info regexp <span class="string">'alter|optim|repai|lock|drop|creat'</span>)) p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">where</span> <span class="keyword">timestampdiff</span>(<span class="keyword">second</span>, i.trx_started, <span class="keyword">now</span>()) &gt; p.time</span><br><span class="line"></span><br><span class="line">  <span class="keyword">and</span> i.trx_mysql_thread_id  <span class="keyword">not</span> <span class="keyword">in</span> (connection_id(),p.id);</span><br></pre></td></tr></table></figure>

<p><strong>查看未提交或回滚的错误事务</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> T.PROCESSLIST_ID,T.PROCESSLIST_TIME,E.SQL_TEXT </span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> PERFORMANCE_SCHEMA.THREADS T,</span><br><span class="line"></span><br><span class="line">PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_CURRENT E </span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> T.THREAD_ID=E.THREAD_ID <span class="keyword">AND</span> E.SQL_TEXT <span class="keyword">LIKE</span> ‘%T1%’;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># SQL案例中假设是在t1表上有MDL锁，则 e.sql_text 近似匹配 t1</span></span><br><span class="line"> \<span class="comment"># 本方法5.5 5.6 5.7 都通用。</span></span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>第6章锁</title>
    <url>/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/</url>
    <content><![CDATA[<p><strong>章节目标</strong></p>
<ul>
<li>了解InnoDB存储引擎对表中数据的锁定</li>
<li>了解InnoDB存储引擎会以怎样的粒度锁定数据</li>
</ul>
<p>只有当实现本身会增加开销时，行级锁才会增加开销。一个锁和多个锁的开销是相同的。</p>
<p><em><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html</a></em></p>
<h1 id="6-1-什么是锁"><a href="#6-1-什么是锁" class="headerlink" title="6.1 什么是锁"></a>6.1 什么是锁</h1><ul>
<li>锁是数据库系统区别于文件系统的一个关键特性。</li>
<li>锁机制用于管理对共享资源的并发访问。</li>
</ul>
<h1 id="6-2-lock与latch"><a href="#6-2-lock与latch" class="headerlink" title="6.2 lock与latch"></a>6.2 lock与latch</h1><p>latch：</p>
<ul>
<li>分为mutex（互斥量）和rwlock（读写锁）</li>
<li>保证并发线程操作临界资源的正确性</li>
<li>没有死锁检测的机制</li>
</ul>
<p>lock</p>
<ul>
<li>对象是事务，用来锁定的是数据库中的对象，如表、页、行。</li>
<li>仅在事务commit或rollback后进行释放</li>
<li>有死锁机制</li>
</ul>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/1.jpg" class="" title="This is an 1 image">

<h1 id="6-3-InnoDB-存储引擎中的锁"><a href="#6-3-InnoDB-存储引擎中的锁" class="headerlink" title="6.3 InnoDB 存储引擎中的锁"></a>6.3 InnoDB 存储引擎中的锁</h1><h2 id="6-3-1-锁的类型"><a href="#6-3-1-锁的类型" class="headerlink" title="6.3.1 锁的类型"></a>6.3.1 锁的类型</h2><p>InnoDB存储引擎实现了如下两种标准的<strong>行级锁</strong>：</p>
<ul>
<li>共享锁（S Lock），允许事务读一行数据</li>
<li>排他锁（X Lock），允许事务删除或更新一行数据</li>
</ul>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/2.jpg" class="" title="This is an 2 image">

<p><em>S和X锁都是行锁，兼容是指对同一记录（row）锁的兼容性情况</em></p>
<p>InnoDB存储引擎支持<strong>多粒度（granular）锁定</strong>：</p>
<ul>
<li>这种锁定允许事务在行级上的锁和表级上的锁同时存在</li>
</ul>
<p>为了支持在不同粒度上进行加锁：</p>
<ul>
<li>支持一种额外的锁方式，称之为<strong>意向锁</strong>。<ul>
<li>意向锁即为表级别的锁</li>
<li>目标是为了在一个事务中揭示下一行将被请求的所类型</li>
</ul>
</li>
</ul>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/3.jpg" class="" title="This is an 3 image">
<ul>
<li><p>支持两种意向锁：</p>
<ul>
<li><p>意向共享锁（IS Lock），事务想要获得一张表中某几行的共享锁</p>
</li>
<li><p>意向排他锁（IX Lock），事务想要获得一张表中某几行的排他锁</p>
</li>
</ul>
</li>
</ul>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/4.jpg" class="" title="This is an 4 image">

<p>监控当前事务并分析可能存在的所问题：</p>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/5.jpg" class="" title="This is an 5 image">

<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/6.jpg" class="" title="This is an 6 image">

<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/7.jpg" class="" title="This is an 7 image">

<h2 id="6-3-2-一致性非锁定读"><a href="#6-3-2-一致性非锁定读" class="headerlink" title="6.3.2 一致性非锁定读"></a>6.3.2 一致性非锁定读</h2><p><strong>InnoDB存储引擎通过行多版本控制的方式来读取当前执行时间数据库中行的数据</strong></p>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/8.jpg" class="" title="This is an 8 image">

<ul>
<li><p>快照数据是指该行的之前版本的数据，该实现是通过undo段来完成。</p>
</li>
<li><p>RC事务隔离级别下，对于快照数据，非一致性读总是读取被锁定行的最新一份快照数据。</p>
</li>
<li><p>RR事务隔离级别下，对于快照数据，非一致性读总是读取事务开始时的行数据版本。</p>
</li>
</ul>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/9.jpg" class="" title="This is an 9 image">

<h2 id="6-3-3-一致性锁定读"><a href="#6-3-3-一致性锁定读" class="headerlink" title="6.3.3 一致性锁定读"></a>6.3.3 一致性锁定读</h2><ul>
<li><input checked="" disabled="" type="checkbox"> <p>SELECT…FOR UPDATE</p>
<ul>
<li>对读取的行记录加一个X锁，其他事务不能对已锁定的行加上任何锁</li>
<li>对于非一致性非锁定读，已经被执行了SELECT…FOR UPDATE,课是可以被读取的。</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> <p>SELECT…LOCK IN SHARE MODE</p>
<ul>
<li>对记录的行加一个S锁，再加X锁，会阻塞</li>
</ul>
<p>以上两句必须在一个事务中，当事务提交了，锁也就释放了。</p>
</li>
</ul>
<h2 id="6-3-4-自增长与锁"><a href="#6-3-4-自增长与锁" class="headerlink" title="6.3.4 自增长与锁"></a>6.3.4 自增长与锁</h2><p><strong>插入操作会根据这个自增长的计数器值加1赋予自增长列。这个实现方式称做 AUTO-INC Locking</strong></p>
<h2 id="6-3-5-外键和锁"><a href="#6-3-5-外键和锁" class="headerlink" title="6.3.5 外键和锁"></a>6.3.5 外键和锁</h2><ul>
<li>外键值的插入或更新，首先需要查询父表中的记录</li>
<li>对于父表的select操作，不是使用一致性非锁定读</li>
</ul>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/18.jpg" class="" title="This is an 18 image">

<h1 id="6-4-锁的算法"><a href="#6-4-锁的算法" class="headerlink" title="6.4 锁的算法"></a>6.4 锁的算法</h1><h2 id="6-4-1-行锁的3中算法"><a href="#6-4-1-行锁的3中算法" class="headerlink" title="6.4.1 行锁的3中算法"></a>6.4.1 行锁的3中算法</h2><ul>
<li><p>Record Lock：单个行记录上的锁</p>
<ul>
<li>总会锁住索引记录</li>
<li>没有显示索引，会使用隐式的主键来进行锁定</li>
</ul>
</li>
<li><p>Gap Lock：间隙锁，锁定一个范围，但不包含记录本身</p>
</li>
<li><p>Next-Key Lock ：Gap Lock+Record Lock，锁定一个范围，并且锁定记录本身</p>
<ul>
<li>一个索引有10，11，13，20这四个值</li>
<li>（-∞，10）（10，11],(11,13],(13,20],(20,+∞)</li>
<li>当查询的索引含有唯一属性，会降级为Record Lock</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> t;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t (a <span class="built_in">int</span> primary <span class="keyword">key</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">select</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">select</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t <span class="keyword">select</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/10.jpg" class="" title="This is an 10 image">

<ul>
<li>当查询的索引是辅助索引时：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> z;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> z (a <span class="built_in">int</span> ,b <span class="built_in">int</span>,primary <span class="keyword">key</span>(a),<span class="keyword">key</span>(b));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">1</span>,<span class="number">1</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">3</span>,<span class="number">1</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">5</span>,<span class="number">3</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">7</span>,<span class="number">6</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">10</span>,<span class="number">8</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">会话A：</span><br><span class="line">  </span><br><span class="line">  &#96;&#96;&#96;sql</span><br><span class="line">  select * from z where b&#x3D;3 for update;</span><br></pre></td></tr></table></figure>
<ul>
<li>对于聚集索引，其仅对列a等于5的索引加上Record Lock。</li>
</ul>
</li>
<li><p>对于辅助索引，其加上的时Next-Key Lock，锁定的范围是（1，3），下一个键值加上gap lock，还有一个辅助索引范围为（3，6）的锁。</p>
</li>
</ul>
<p>会话B：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> z <span class="keyword">where</span> a=<span class="number">5</span> <span class="keyword">LOCK</span> <span class="keyword">IN</span> <span class="keyword">SHARE</span> <span class="keyword">MODE</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">4</span>,<span class="number">2</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">6</span>,<span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>第一个不能执行，会话A=5的值加上X锁，执行会被阻塞</li>
<li>第二个，主键插入4没问题，插入的辅助索引值2在锁定的范围（1，3），会被阻塞<ul>
<li>第三个，主键6没有锁定，5也不在范围（1，3），当时在另一个范围（3，6），会被阻塞</li>
</ul>
</li>
</ul>
<p>可以立即执行：</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">8</span>,<span class="number">6</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">2</span>,<span class="number">0</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">6</span>,<span class="number">7</span>;</span><br></pre></td></tr></table></figure>

<p><strong>会检查插入记录的下一条记录是否被锁定</strong></p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> z <span class="keyword">select</span> <span class="number">2</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure>

<ul>
<li>会阻塞，因为在辅助索引列b上插入值为2的记录是，会监测到下一个记录3已经被索引</li>
</ul>
<p>关闭Gap Lock：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 事务隔离级别设置为READ COMMITTED<ul>
<li><input disabled="" type="checkbox"> innodb_locks_unsafe_for_binlog设置为1</li>
</ul>
</li>
</ul>
<p><strong>若唯一索引由多个列组成，查询使用其中一个，属于rang类型查询，依然使用Next-Key Lock，不会降级</strong></p>
<h2 id="6-4-2-解决Phantom-Problem（幻读）"><a href="#6-4-2-解决Phantom-Problem（幻读）" class="headerlink" title="6.4.2 解决Phantom Problem（幻读）"></a>6.4.2 解决Phantom Problem（幻读）</h2><p>Phantom Problem是指在同一个事务下，连续执行两次同样的SQL语句可能导致不同的结果，第二次的SQL语句可能会返回之前不存在的行。</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root@MySQL-01 13:30:  [qinxi]&gt; select @@tx_isolation;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">root@MySQL<span class="number">-01</span> <span class="number">13</span>:<span class="number">43</span>:  [qinxi]&gt; <span class="keyword">select</span> * <span class="keyword">from</span> t <span class="keyword">where</span> a&gt;<span class="number">2</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| a |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">| 5 |</span><br><span class="line">+<span class="comment">---+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p><strong>锁住的不是5这单个值，而是对（2，-∞）这个范围加了X锁</strong></p>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/11.jpg" class="" title="This is an 11 image">

<p><em>第4步时，显示以下内容：</em></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">  root@MySQL-01 14:08:  [information_schema]&gt; select * from innodb_trx\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">                      trx_id: 42089795</span><br><span class="line">                   trx_state: <span class="keyword">LOCK</span> <span class="keyword">WAIT</span></span><br><span class="line">                 trx_started: <span class="number">2020</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">08</span>:<span class="number">53</span></span><br><span class="line">       trx_requested_lock_id: <span class="number">42089795</span>:<span class="number">578</span>:<span class="number">4</span>:<span class="number">5</span></span><br><span class="line">            trx_wait_started: <span class="number">2020</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">08</span>:<span class="number">53</span></span><br><span class="line">                  trx_weight: <span class="number">3</span></span><br><span class="line">         trx_mysql_thread_id: <span class="number">77</span></span><br><span class="line">                   trx_query: <span class="keyword">insert</span> <span class="keyword">into</span> z <span class="keyword">select</span> <span class="number">4</span>,<span class="number">4</span></span><br><span class="line">         trx_operation_state: inserting</span><br><span class="line">           trx_tables_in_use: <span class="number">1</span></span><br><span class="line">           trx_tables_locked: <span class="number">1</span></span><br><span class="line">            trx_lock_structs: <span class="number">2</span></span><br><span class="line">       trx_lock_memory_bytes: <span class="number">1136</span></span><br><span class="line">             trx_rows_locked: <span class="number">1</span></span><br><span class="line">           trx_rows_modified: <span class="number">1</span></span><br><span class="line">     trx_concurrency_tickets: <span class="number">0</span></span><br><span class="line">         trx_isolation_level: REPEATABLE <span class="keyword">READ</span></span><br><span class="line">           trx_unique_checks: <span class="number">1</span></span><br><span class="line">      trx_foreign_key_checks: <span class="number">1</span></span><br><span class="line">  trx_last_foreign_key_error: <span class="literal">NULL</span></span><br><span class="line">   trx_adaptive_hash_latched: <span class="number">0</span></span><br><span class="line">   trx_adaptive_hash_timeout: <span class="number">0</span></span><br><span class="line">            trx_is_read_only: <span class="number">0</span></span><br><span class="line">  trx_autocommit_non_locking: <span class="number">0</span></span><br><span class="line">  *************************** <span class="number">2.</span> <span class="keyword">row</span> ***************************</span><br><span class="line">                      trx_id: <span class="number">421218363488992</span></span><br><span class="line">                   trx_state: RUNNING</span><br><span class="line">                 trx_started: <span class="number">2020</span><span class="number">-10</span><span class="number">-21</span> <span class="number">14</span>:<span class="number">06</span>:<span class="number">52</span></span><br><span class="line">       trx_requested_lock_id: <span class="literal">NULL</span></span><br><span class="line">            trx_wait_started: <span class="literal">NULL</span></span><br><span class="line">                  trx_weight: <span class="number">2</span></span><br><span class="line">         trx_mysql_thread_id: <span class="number">78</span></span><br><span class="line">                   trx_query: <span class="literal">NULL</span></span><br><span class="line">         trx_operation_state: <span class="literal">NULL</span></span><br><span class="line">           trx_tables_in_use: <span class="number">0</span></span><br><span class="line">           trx_tables_locked: <span class="number">1</span></span><br><span class="line">            trx_lock_structs: <span class="number">2</span></span><br><span class="line">       trx_lock_memory_bytes: <span class="number">1136</span></span><br><span class="line">             trx_rows_locked: <span class="number">1</span></span><br><span class="line">           trx_rows_modified: <span class="number">0</span></span><br><span class="line">     trx_concurrency_tickets: <span class="number">0</span></span><br><span class="line">         trx_isolation_level: REPEATABLE <span class="keyword">READ</span></span><br><span class="line">           trx_unique_checks: <span class="number">1</span></span><br><span class="line">      trx_foreign_key_checks: <span class="number">1</span></span><br><span class="line">  trx_last_foreign_key_error: <span class="literal">NULL</span></span><br><span class="line">   trx_adaptive_hash_latched: <span class="number">0</span></span><br><span class="line">   trx_adaptive_hash_timeout: <span class="number">0</span></span><br><span class="line">            trx_is_read_only: <span class="number">0</span></span><br><span class="line">  trx_autocommit_non_locking: <span class="number">0</span></span><br><span class="line">  <span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ERROR</span>: </span><br><span class="line">  <span class="keyword">No</span> <span class="keyword">query</span> specified</span><br><span class="line">  </span><br><span class="line">  root@MySQL<span class="number">-01</span> <span class="number">14</span>:<span class="number">08</span>:  [information_schema]&gt; <span class="keyword">select</span> * <span class="keyword">from</span> innodb_locks\G;</span><br><span class="line">  *************************** 1. row ***************************</span><br><span class="line">      lock_id: 42089795:578:4:5</span><br><span class="line">  lock_trx_id: 42089795</span><br><span class="line">    lock_mode: X,GAP</span><br><span class="line">    lock_type: RECORD</span><br><span class="line">   lock_table: `qinxi`.`z`</span><br><span class="line">   lock_index: b</span><br><span class="line">   lock_space: 578</span><br><span class="line">    lock_page: 4</span><br><span class="line">     lock_rec: 5</span><br><span class="line">    lock_data: 6, 7</span><br><span class="line">  *************************** 2. row ***************************</span><br><span class="line">      lock_id: 421218363488992:578:4:5</span><br><span class="line">  lock_trx_id: 421218363488992</span><br><span class="line">    lock_mode: S,GAP</span><br><span class="line">    lock_type: RECORD</span><br><span class="line">   lock_table: `qinxi`.`z`</span><br><span class="line">   lock_index: b</span><br><span class="line">   lock_space: 578</span><br><span class="line">    lock_page: 4</span><br><span class="line">     lock_rec: 5</span><br><span class="line">    lock_data: 6, 7</span><br><span class="line">  2 rows in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ERROR</span>: </span><br><span class="line">  <span class="keyword">No</span> <span class="keyword">query</span> specified</span><br><span class="line">  </span><br><span class="line">  root@MySQL<span class="number">-01</span> <span class="number">14</span>:<span class="number">08</span>:  [information_schema]&gt; <span class="keyword">select</span> * <span class="keyword">from</span> innodb_lock_waits\G;</span><br><span class="line">  *************************** 1. row ***************************</span><br><span class="line">  requesting_trx_id: 42089795</span><br><span class="line">  requested_lock_id: 42089795:578:4:5</span><br><span class="line">    blocking_trx_id: 421218363488992</span><br><span class="line">   blocking_lock_id: 421218363488992:578:4:5</span><br><span class="line">  1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.00</span> sec)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">ERROR</span>: </span><br><span class="line">  <span class="keyword">No</span> <span class="keyword">query</span> specified</span><br></pre></td></tr></table></figure>

<h1 id="6-5-锁问题"><a href="#6-5-锁问题" class="headerlink" title="6.5 锁问题"></a>6.5 锁问题</h1><p>  <strong>锁带来的问题：</strong></p>
<ul>
<li><p>脏读</p>
</li>
<li><p>不可重复读</p>
</li>
<li><p>丢失更新</p>
<h2 id="6-5-1-脏读"><a href="#6-5-1-脏读" class="headerlink" title="6.5.1 脏读"></a>6.5.1 脏读</h2><p>脏页和脏数据是不同的概念。</p>
</li>
<li><p><strong>脏页</strong>指的是缓冲池中已经被修改的页，但是还没有刷新到新的磁盘中，数据库实例内存中的页和磁盘中的页的数据是不一致的，当然在刷新到磁盘之前，日志都已经被写入到了重做日志文件中。</p>
</li>
<li><p><strong>脏数据</strong>是指事务对缓冲池中行记录的修改，并且还没有被提交。</p>
<p>脏读指的就是在不同的事务下，当前事务可以读到另外事务未提交的数据。</p>
<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/12.jpg" class="" title="This is an 12 image">

<img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/13.jpg" class="" title="This is an 13 image">

<h2 id="6-5-2-不可重复读"><a href="#6-5-2-不可重复读" class="headerlink" title="6.5.2 不可重复读"></a>6.5.2 不可重复读</h2></li>
</ul>
<p>  <strong>一个事务内两次读到的数据不一样</strong></p>
<p>  脏读是读到未提交的数据，而不可重复读督导的却是已经提交的数据</p>
  <img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/14.jpg" class="" title="This is an 14 image">

<h2 id="6-5-3-丢失更新"><a href="#6-5-3-丢失更新" class="headerlink" title="6.5.3 丢失更新"></a>6.5.3 丢失更新</h2><p>  <strong>一个事务的更新操作会被另一个事务的更新操作所覆盖，从而导致数据的不一致</strong></p>
  <img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/15.jpg" class="" title="This is an 15 image">

<h1 id="6-6-阻塞"><a href="#6-6-阻塞" class="headerlink" title="6.6 阻塞"></a>6.6 阻塞</h1><p>  <strong>一个事务中的锁需要等待另一个事务中的锁释放它所占用的资源，这就是阻塞，主要为了确保事务可以并发且则正常的运行</strong></p>
<ul>
<li><p>innodb_lock_wait_timeout （动态）用来控制等待的时间（默认是50S）</p>
</li>
<li><p>innodb_rollback_on_timeout （惊呆）是否等待超时时对进行中的事务进行回滚操作（默认是OFF，代表不回滚）</p>
<h1 id="6-7-死锁"><a href="#6-7-死锁" class="headerlink" title="6.7 死锁"></a>6.7 死锁</h1><h2 id="6-7-1-死锁的概念"><a href="#6-7-1-死锁的概念" class="headerlink" title="6.7.1 死锁的概念"></a>6.7.1 死锁的概念</h2></li>
</ul>
<p>  <strong>死锁是指两个或两个以上的事务在执行过程中，因争夺锁资源而造成的一种互相等待的现象</strong></p>
<p>  解决死锁：</p>
<ul>
<li><p>超时，两个事务互相等待时，一个等待时间超过设置的某一阈值时，其中一个事务回滚，另一个等待的事务就能继续进行</p>
</li>
<li><p>wait-for graph ⭐进行死锁检测</p>
<ul>
<li>锁的信息链表</li>
<li>事务等待链表</li>
</ul>
<h2 id="6-7-2-死锁概率"><a href="#6-7-2-死锁概率" class="headerlink" title="6.7.2 死锁概率"></a>6.7.2 死锁概率</h2></li>
<li><p>系统中事务的数量越多发生死锁的概率越大</p>
</li>
<li><p>每个事务操作的数量越多发生死锁的概率越大</p>
</li>
<li><p>操作数据的集合，越小发生死锁的概率越大</p>
<h2 id="6-7-3-死锁的示例"><a href="#6-7-3-死锁的示例" class="headerlink" title="6.7.3 死锁的示例"></a>6.7.3 死锁的示例</h2></li>
</ul>
<p>  <strong>死锁只存在于并发的情况</strong></p>
<p>  死锁错误提示：1213</p>
  <img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/16.jpg" class="" title="This is an 16 image">

  <img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC6%E7%AB%A0%E9%94%81/17.jpg" class="" title="This is an 17 image">

<h2 id="6-7-4-锁升级"><a href="#6-7-4-锁升级" class="headerlink" title="6.7.4 锁升级"></a>6.7.4 锁升级</h2><p>  <strong>锁升级是指当前锁的粒度降低</strong></p>
<p>  InnoDB根据每个事务访问的每个页对所进行管理的，采用的是位图的方式。</p>
]]></content>
      <categories>
        <category>MySQL技术内幕</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>第1章MySQL体系结构和存储引擎</title>
    <url>/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC1%E7%AB%A0MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="1-1-定义数据库和实例"><a href="#1-1-定义数据库和实例" class="headerlink" title="1.1 定义数据库和实例"></a>1.1 定义数据库和实例</h1><ul>
<li>数据库是物理操作系统文件或其他形式文件类型的集合<ul>
<li>依照某种数据模型组织起来并存放于二级存储器中的数据集合</li>
</ul>
</li>
<li>实例是MySQL数据库由后台线程以及一个共享内存区组成<ul>
<li>是程序，位于用户与操作系统之间的一层数据库管理软件，用户对数据库数据的任何操作，包括数据库定义、数据查询、数据维护、数据库运行控制等都是在数据库实例下进行的，应用程序只有通过数据库实例才能和数据库打交道。</li>
</ul>
</li>
<li>MySQL数据库实例在系统上的表先就是一个进程</li>
<li>MySQL配置文件使用顺序<ul>
<li>配置文件中都有同一个参数，会以读取到的最后一个配置文件中的参数为准</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql --help | grep my.cnf</span><br><span class="line">/etc/my.cnf /etc/mysql/my.cnf /usr/local/mysql/etc/my.cnf ~/.my.cnf</span><br></pre></td></tr></table></figure>

<h1 id="1-2-MySQL体系结构"><a href="#1-2-MySQL体系结构" class="headerlink" title="1.2 MySQL体系结构"></a>1.2 MySQL体系结构</h1><img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC1%E7%AB%A0MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/1.jpg" class="" title="This is an 1 image">

<p>MySQL由以下几部分组成：</p>
<ul>
<li>连接池组件</li>
<li>管理服务和工具组件</li>
<li>SQL接口组件</li>
<li>查询分析器组件</li>
<li>优化器组件</li>
<li>缓冲组件</li>
<li>插件式存储引擎</li>
<li>物理文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MySQL数据库区别于其他数据库的最重要的一个特点就是其插件式的表存储引擎</span><br><span class="line">存储引擎式基于表的，而不是数据库。</span><br></pre></td></tr></table></figure>

<h1 id="1-3-MySQL存储引擎"><a href="#1-3-MySQL存储引擎" class="headerlink" title="1.3 MySQL存储引擎"></a>1.3 MySQL存储引擎</h1><ul>
<li>用户可以根据MySQL预定义的存储引擎接口编写自己的存储引擎</li>
<li>MySQL官方手册的第16章给出了编写自定义存储引擎的过程</li>
</ul>
<h2 id="1-3-1-Innodb存储引擎"><a href="#1-3-1-Innodb存储引擎" class="headerlink" title="1.3.1 Innodb存储引擎"></a>1.3.1 Innodb存储引擎</h2><ul>
<li>主要面向在线事务处理（OLTP）的应用；</li>
<li>特点是行锁设计、支持外键，支持非锁定读，默认读取操作不会产生锁；</li>
<li>数据库5.5.8版本开始，为默认的存储引擎；</li>
<li>数据放在一个逻辑的表空间中，自身进行管理；</li>
<li>使用多版本并发控制（MVCC）来获得高并发性，实现SQL标准的4种隔离级别，默认为REPEATABLE级别；</li>
<li>使用next-key locking 的策略来避免幻读（phantom）；</li>
<li>提供插入缓冲（insert buffer），二次写（double write）、自适应哈希索引（adaptive hash index）、预读（read ahead）</li>
<li>表中数据的存储，采用了聚集（clustered）的方式，每张表的存储都是按主键的顺序进行存放。表定义时没有指定注定，会为每一行生成一个6字节的ROWID，并以此做为主键。</li>
</ul>
<h2 id="1-3-2-MyISAM存储引擎"><a href="#1-3-2-MyISAM存储引擎" class="headerlink" title="1.3.2 MyISAM存储引擎"></a>1.3.2 MyISAM存储引擎</h2><ul>
<li>不支持事务、表锁设计、支持全文索引</li>
<li>缓冲池只缓冲索引文件、而不缓冲数据文件</li>
</ul>
<h2 id="1-3-3-NDB存储引擎"><a href="#1-3-3-NDB存储引擎" class="headerlink" title="1.3.3 NDB存储引擎"></a>1.3.3 NDB存储引擎</h2><ul>
<li>集群存储引擎，结构式share nothing的集群架构，因此能提供更高的可用性</li>
<li>特点是数据全部放在内存中</li>
<li>连接操作（JOIN）是在MySQL数据库层完成的。复杂的连接操作需要巨大的网络开销，因此查询速度很慢。</li>
</ul>
<h2 id="1-3-4-Memory存储引擎"><a href="#1-3-4-Memory存储引擎" class="headerlink" title="1.3.4 Memory存储引擎"></a>1.3.4 Memory存储引擎</h2><ul>
<li>表中的数据存放在内存中，如果数据库重启或发生崩溃，表中的数据都将消失</li>
<li>默认使用哈希索引</li>
<li>适用于存储临时数据的临时表和数据仓库中的纬度表</li>
<li>默认使用哈希索引</li>
</ul>
<h2 id="1-3-5-Archive存储引擎"><a href="#1-3-5-Archive存储引擎" class="headerlink" title="1.3.5 Archive存储引擎"></a>1.3.5 Archive存储引擎</h2><ul>
<li>只支持INSERT和SELECT操作</li>
<li>适合存储归档数据：如日志信息</li>
<li>使用行锁实现高并发的插入操作</li>
<li>设计目标主要是提供高速的插入和压缩功能</li>
</ul>
<h1 id="1-4-各存储引擎之间的比较"><a href="#1-4-各存储引擎之间的比较" class="headerlink" title="1.4 各存储引擎之间的比较"></a>1.4 各存储引擎之间的比较</h1><img src="/2020/10/20/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC1%E7%AB%A0MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/2.jpg" class="" title="This is an 2 image">

<h1 id="1-5-连接MySQL"><a href="#1-5-连接MySQL" class="headerlink" title="1.5 连接MySQL"></a>1.5 连接MySQL</h1><ul>
<li>TCP/IP<ul>
<li>任何平台下都提供的连接方式</li>
</ul>
</li>
<li>命名管道和共享内存</li>
<li>UNIX域套接字</li>
</ul>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>为什么MySQL数据库不支持全文索引?</p>
<ul>
<li>不！MySQL支持，MyISAM，InnoDB（1.2版本）和Sphinx存储引擎都支持全文索引</li>
</ul>
<p>MySQL数据库速度快是因为不支持事务？</p>
<ul>
<li>错！虽然MySQL的MyISAM存储引擎不支持事务，但是InnoDB支持。</li>
</ul>
<p>当表的数据量大于1000万时MySQL的性能会急剧下降吗？</p>
<ul>
<li>不！MySQL数据库，不是文件，随着数据行数的增加，性能当然会有所下降，但是这些下降不是线性的，如果用户选择了正确的存储引擎，以及正确的配置，再多的数据量MySQL也能承受。</li>
</ul>
]]></content>
      <categories>
        <category>MySQL技术内幕</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>第2章InnoDB存储引擎</title>
    <url>/2020/10/19/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC2%E7%AB%A0InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<h1 id="2-1-InnoDB存储引擎概述"><a href="#2-1-InnoDB存储引擎概述" class="headerlink" title="2.1 InnoDB存储引擎概述"></a>2.1 InnoDB存储引擎概述</h1><ul>
<li>第一个完整支持ACID事务的MySQL存储引擎</li>
<li>特点式行锁设计、支持MVCC、支持外键、提供一致性非锁定读</li>
<li>高性能、高可用、高可扩展的存储引擎</li>
</ul>
<h1 id="2-2-InnoDB存储引擎的版本"><a href="#2-2-InnoDB存储引擎的版本" class="headerlink" title="2.2 InnoDB存储引擎的版本"></a>2.2 InnoDB存储引擎的版本</h1><img src="/2020/10/19/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC2%E7%AB%A0InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/1.jpg" class="" title="This is an 1 image">

<h1 id="2-3-InnoDB体系架构"><a href="#2-3-InnoDB体系架构" class="headerlink" title="2.3 InnoDB体系架构"></a>2.3 InnoDB体系架构</h1><p><em>InnoDB的存储引擎的体系架构：</em></p>
<img src="/2020/10/19/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC2%E7%AB%A0InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/2.jpg" class="" title="This is an 2 image">

<ul>
<li>多个内存块组成了一个大的内存池负责以下工作：<ul>
<li>维护所有进程/线程需要访问的多个内存数据结构</li>
<li>缓存磁盘上的数据，方便快速地获取，同时在对磁盘文件的数据修改之前在这里缓存</li>
<li>重做日志缓冲</li>
</ul>
</li>
<li>后台线程负责以下工作：<ul>
<li>刷新内存池中的数据</li>
<li>保证缓冲池中的内存缓存的是最近的数据</li>
<li>将已修改的数据文件刷新到磁盘文件</li>
<li>保证在数据库发生异常的情况下InnoDB能恢复到正常运行状态</li>
</ul>
</li>
</ul>
<h2 id="2-3-1-后台线程"><a href="#2-3-1-后台线程" class="headerlink" title="2.3.1 后台线程"></a>2.3.1 后台线程</h2><p>InnoDB存储引擎是多线程的模型，后台有多个不同的后台线程。</p>
<p>1.Master Thread</p>
<ul>
<li>主要负责将缓冲池中的数据异步刷新到磁盘，保证数据的一致性。</li>
<li>脏页的刷新、合并插入缓冲、UNDO页的回收等。</li>
</ul>
<p>2.IO Thread</p>
<ul>
<li>主要负责IO请求的回调处理。（InnoDB存储引擎中大量使用了AIO来处理IO请求）</li>
<li>共有4种IO Thread，分别是write、read、insert buffer和log IO thread。<ul>
<li>1.0版本共有4个，1.0.x版本开始write、read分别增大到了4个</li>
<li>读线程的ID总是小于写线程</li>
</ul>
</li>
</ul>
<p>3.Purge Thread</p>
<ul>
<li>回收已经使用并分配的undo页<ul>
<li>1.1版本之前，purge操作仅在InnoDB存储引擎的Master Thread来完成。</li>
<li>1.1版本开始，purge操作可以独立到单独的线程中进行，减轻Master Thread的工作，从而提高CPU的使用率以及提升存储引擎的性能。</li>
<li>1.2版本开始，InnoDB支持多个Purge Thread，这样做的目的是为了进一步加快undo页的回收。<ul>
<li>离散地去读undo页，利用磁盘的随机读取性能。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>4.Page cleaner Thread</p>
<ul>
<li>将之前版本中的脏页刷新操作都放入到单独的线程中完成</li>
<li>减轻原Master Thread的工作及对于用户查询线程的阻塞</li>
</ul>
<h2 id="2-3-2-内存"><a href="#2-3-2-内存" class="headerlink" title="2.3.2 内存"></a>2.3.2 内存</h2><p>1.缓冲池</p>
<p>InnoDB存储引擎是基于磁盘存储的，并将其中的记录按照页的方式进行管理。</p>
<p>缓冲池就是一块内存区域，通过内存的速度来民不磁盘速度较慢对数据库性能的影响。</p>
<ul>
<li>在数据库中进行读取页的操作<ul>
<li>首先将从磁盘读到的页存放在缓冲池中</li>
<li>下一次再读相同的页时，首先判断该页是否在缓冲池中。</li>
<li>若再缓冲池中，称该页再缓冲池中被命中，直接读取该页。否则，读取磁盘上的页。</li>
</ul>
</li>
<li>在数据库中页的修改操作<ul>
<li>首先修改在缓冲池中的页</li>
<li>再以一定的频率刷新到磁盘上</li>
<li>页从缓冲池刷新回磁盘的操作并不是在每次页发生更新时触发，而是通过一种称为Checkpoint的机制刷新回磁盘。</li>
</ul>
</li>
</ul>
<p><strong>缓冲池的大小直接影响这数据库的整体性能。</strong></p>
<img src="/2020/10/19/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E7%AC%AC2%E7%AB%A0InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/3.jpg" class="" title="This is an 3 image">

<p>缓冲池中缓存的数据页类型有：</p>
<ul>
<li>索引页</li>
<li>数据页</li>
<li>undo页</li>
<li>插入缓冲</li>
<li>自适应哈希索引</li>
<li>InnoDB存储的锁信息</li>
<li>数据字典信息</li>
</ul>
<p>2.LRU List、Free List和Flush List</p>
<p>数据库中的缓冲池是通过LRU（Latest Recent Used，最近最少使用）算法来进行管理的。</p>
<p>最频繁使用的页在LRU列表的前端，而最少使用的页在LRU列表的尾端。</p>
<ul>
<li>InnoDB对传统的LRU算法做了一些优化<ul>
<li>加入了midpoint位置，该位置在LRU列表长度的5/8处</li>
<li>新读取的页插入到LRU列表尾端的37%的位置（innodb_old_blocks_pct）</li>
<li>midpoint之后的列表称为old列表，之前的列表称为new列表</li>
<li>页读取到mid位置后需要等待多久才会被加入到LRU列表的热端（innodb_old_blocks_time）</li>
</ul>
</li>
</ul>
<p>3.重做日志缓冲</p>
<p><strong>InnoDB存储引擎：</strong></p>
<ul>
<li>首先将重做日志信息先放入到缓冲区</li>
<li>按一定频率将其刷新到重做日志文件</li>
<li>一般情况下每一秒钟会将重做日志缓冲刷新到日志文件</li>
<li>只需要保证每秒产生的事务量在这个缓冲大小之内即可</li>
</ul>
<p><strong>重做日志缓冲中的内容刷新到外部磁盘的重做日志文件中：</strong></p>
<ul>
<li>Master Thread 每一秒将重做日志缓冲刷新到重做日志文件</li>
<li>每个事务提交时会将重做日志缓冲刷新到重做日志文件</li>
<li>当重做日志缓冲池剩余空间小于1/2时，重做日志缓冲刷新到重做日志文件</li>
</ul>
<p>4.额外的内存池</p>
<p>申请了很大的Innodb缓冲池时，也应考虑相应地增加这个值。</p>
<h1 id="2-4-Checkpoint技术"><a href="#2-4-Checkpoint技术" class="headerlink" title="2.4 Checkpoint技术"></a>2.4 Checkpoint技术</h1><p><strong>Checkpoint技术的目的时解决以下几个问题：</strong></p>
<ul>
<li>缩短数据库的恢复时间</li>
<li>缓冲池不够用时，将脏页刷新到磁盘</li>
<li>重做日志不可用时，刷新脏页</li>
</ul>
<p><strong>两种Checkpoint：</strong></p>
<ul>
<li><p>Sharp Checkpoint</p>
<ul>
<li>发生数据库关闭时将所有的脏页都刷新回磁盘，innodb_fast_shutdown=1</li>
<li>数据库运行时使用，数据库可用性会收到很大的影响</li>
</ul>
</li>
<li><p>Fuzzy Checkpoint</p>
<ul>
<li>刷新一部分脏页</li>
<li>Master Thread Checkpoint</li>
<li>FLUSH_LRU_LIST Checkpoint</li>
<li>Async/Sync Flush Checkpoint</li>
<li>Dirty Page too much Checkpoint</li>
</ul>
<h1 id="2-5-Master-Thread-工作方式"><a href="#2-5-Master-Thread-工作方式" class="headerlink" title="2.5 Master Thread 工作方式"></a>2.5 Master Thread 工作方式</h1><h2 id="2-5-1-InnoDB1-0-X-版本之前的Master-Thread"><a href="#2-5-1-InnoDB1-0-X-版本之前的Master-Thread" class="headerlink" title="2.5.1 InnoDB1.0.X 版本之前的Master Thread"></a>2.5.1 InnoDB1.0.X 版本之前的Master Thread</h2><p>Master Thread具有最高的线程优先级别</p>
<p>其内部由多个循环（loop）组成：主循环（loop）、后台循环（backgroup loop）、刷新循环（flush loop）、暂停循环（suspend loop）</p>
<p><strong>每秒一次的操作包括</strong></p>
<ul>
<li>日志缓冲刷新到磁盘，及时这个事务还没有提交（总是）</li>
<li>合并插入缓冲（可能）</li>
<li>至多刷新100个InnoDB的缓冲池中的脏页到磁盘（可能）</li>
<li>如果当前没有用户活动，则切换到backgroup loop（可能）</li>
</ul>
<p><strong>即使某个事务还没有提交，InnoDB存储引擎仍然每秒会将重做日志缓冲中的内容刷新到重做日志文件。</strong></p>
<p>合并插入缓冲并不是每秒都会发生的。会判断当前一秒内发生的IO次数是否小于5次，如果小于5次，InnoDB认为当前的IO压力很小，可以执行合并插入缓冲的操作。</p>
<p><strong>每10秒的操作包括</strong></p>
<ul>
<li>刷新100个脏页到磁盘（可能的情况下）</li>
<li>合并至多5个插入缓冲（总是）</li>
<li>将日志缓冲刷新到磁盘（总是）</li>
<li>删除无用的Undo页（总是）</li>
<li>刷新100个或者10个脏页到磁盘（总是）</li>
</ul>
<p><strong>会判断过去10秒之内磁盘的IO操作是否小于200次，如果是，认为有足够磁盘IO操作能力，因此将100个脏页刷新到磁盘。接着，InnoDB存储引擎会合并插入缓冲</strong></p>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL技术内幕</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么我要读这本书</title>
    <url>/2020/10/16/MySQL%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E8%A6%81%E8%AF%BB%E8%BF%99%E6%9C%AC%E4%B9%A6/</url>
    <content><![CDATA[<div class="note info">
            <p>当处理问题时，想知道背后的原因。只有真正理解了内部实现原理、体系结构，才能更好地使用。任何时候Why都比What重要。</p>
          </div>

<div class="note info">
            <p>不要相信任何的“神话”，学会自己思考；<br>不要墨守成规，大部分人都指导的事情可能是错误的；<br>不要相信网上的传言，去测试，根据自己的实践做出决定；<br>花时间充分地思考，敢于提出质疑。</p>
          </div>

<div class="note info">
            <p>看完本书，我将知道InnoDB存储引擎时如何工作的，它的关键特性的功能核作用是什么，以及如何正确配置和使用这些特性。</p>
          </div>

<p><strong>目录章节</strong></p>
<div class="note info">
            <p>第1章 MySQL体系结构和存储引擎<br>第2章 InnoDB存储引擎 ★<br>第3章 文件<br>第4章 表<br>第5章 索引与算法 ★<br>第6章 锁 ★<br>第7章 事务<br>第8藏 备份与恢复 ★<br>第9章 性能调优<br>第10章 InnoDB存储引擎源代码的编译和调试</p>
          </div>








]]></content>
      <categories>
        <category>MySQL技术内幕</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle时间函数详解</title>
    <url>/2020/09/27/Oracle/Oracle%E6%97%B6%E9%97%B4%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>函数名</th>
<th>函数详解</th>
</tr>
</thead>
<tbody><tr>
<td>current_timestamp</td>
<td>返回当前会话时区中的当前日期:以timestamp with time zone数据类型</td>
</tr>
<tr>
<td>current_date</td>
<td>返回当前会话时区中的当前日期</td>
</tr>
<tr>
<td>SYSDATE</td>
<td>函数可以得到目前系统的时间</td>
</tr>
<tr>
<td>localtimestamp</td>
<td>返回会话中的日期和时间</td>
</tr>
<tr>
<td>dbtimezone</td>
<td>返回时区</td>
</tr>
<tr>
<td>SESSIONTIMEZONE</td>
<td>返回会话时区</td>
</tr>
<tr>
<td>systimestamp</td>
<td></td>
</tr>
</tbody></table>
<p>测试：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL&gt; alter session set NLS_DATE_FORMAT='DD-MON-YYYY HH24:MI:SS';</span><br><span class="line"></span><br><span class="line">Session altered.</span><br><span class="line"></span><br><span class="line">SQL&gt; select current_timestamp,localtimestamp,sysdate,systimestamp from dual;</span><br><span class="line"></span><br><span class="line">CURRENT_TIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">LOCALTIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">SYSDATE</span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line">SYSTIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">27-SEP-20 03.42.56.895320 PM +08:00</span><br><span class="line">27-SEP-20 03.42.56.895320 PM</span><br><span class="line">27-SEP-2020 15:42:56</span><br><span class="line">27-SEP-20 03.42.56.895316 PM +08:00</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt; alter session set time_zone='-5:00';</span><br><span class="line"></span><br><span class="line">Session altered.</span><br><span class="line"></span><br><span class="line">SQL&gt; select current_timestamp,localtimestamp,sysdate,systimestamp from dual;</span><br><span class="line"></span><br><span class="line">CURRENT_TIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">LOCALTIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">SYSDATE</span><br><span class="line"><span class="comment">--------------------</span></span><br><span class="line">SYSTIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">27-SEP-20 02.43.39.911368 AM -05:00</span><br><span class="line">27-SEP-20 02.43.39.911368 AM</span><br><span class="line">27-SEP-2020 15:43:39</span><br><span class="line">27-SEP-20 03.43.39.911363 PM +08:00</span><br></pre></td></tr></table></figure>



<ul>
<li>current_timestamp</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oracle函数 current_timestamp</span><br><span class="line">【功能】：以timestamp with time zone数据类型返回当前会话时区中的当前日期</span><br><span class="line"></span><br><span class="line">【参数】：没有参数，没有括号</span><br><span class="line"></span><br><span class="line">【返回】：日期</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">SQL&gt; select current_timestamp from dual;</span><br><span class="line"></span><br><span class="line">CURRENT_TIMESTAMP</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">27-SEP-20 10.30.57.999511 AM +08:00</span><br></pre></td></tr></table></figure>


<ul>
<li>current_date</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">oracle函数 current_date</span><br><span class="line">【功能】：返回当前会话时区中的当前日期</span><br><span class="line"></span><br><span class="line">【参数】：没有参数，没有括号</span><br><span class="line"></span><br><span class="line">【返回】：日期</span><br><span class="line"></span><br><span class="line">SQL&gt; select current_date from dual;</span><br><span class="line"></span><br><span class="line">CURRENT_D</span><br><span class="line">---------</span><br><span class="line">27-SEP-20</span><br></pre></td></tr></table></figure>

<ul>
<li>sysdate</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SYSDATE函数可以得到目前系统的时间，例如：</span><br><span class="line">SQL&gt; select sysdate from dual;</span><br><span class="line"></span><br><span class="line">SYSDATE</span><br><span class="line"><span class="comment">---------</span></span><br><span class="line">27-SEP-20</span><br></pre></td></tr></table></figure>

<ul>
<li>localtimestamp</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【功能】：返回会话中的日期和时间</span><br><span class="line"></span><br><span class="line">【参数】：没有参数，没有括号</span><br><span class="line"></span><br><span class="line">【返回】：日期</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">SQL&gt; select localtimestamp from dual;</span><br><span class="line"></span><br><span class="line">LOCALTIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">27-SEP-20 10.42.36.829529 AM</span><br></pre></td></tr></table></figure>

<ul>
<li>dbtimezone</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【功能】：返回时区</span><br><span class="line"></span><br><span class="line">【参数】：没有参数，没有括号</span><br><span class="line"></span><br><span class="line">【返回】：字符型</span><br><span class="line"></span><br><span class="line">SQL&gt; select dbtimezone from dual;</span><br><span class="line"></span><br><span class="line">DBTIME</span><br><span class="line"><span class="comment">------</span></span><br><span class="line">+00:00</span><br></pre></td></tr></table></figure>

<ul>
<li>sessiontimezone</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">【功能】：返回会话时区</span><br><span class="line"></span><br><span class="line">【参数】：没有参数，没有括号</span><br><span class="line"></span><br><span class="line">【返回】：字符型</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">【示例】<span class="keyword">select</span> <span class="keyword">dbtimezone</span>,SESSIONTIMEZONE <span class="keyword">from</span> dual;</span><br><span class="line"></span><br><span class="line">返回:+00:00   +08:00</span><br></pre></td></tr></table></figure>

<ul>
<li>systimestamp</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SQL&gt; select current_timestamp,systimestamp from dual;</span><br><span class="line"></span><br><span class="line">CURRENT_TIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">SYSTIMESTAMP</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">27-SEP-20 10.49.23.885829 AM +08:00</span><br><span class="line">27-SEP-20 10.49.23.885806 AM +08:00</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle 12C</tag>
        <tag>OCP</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle单行函数详解</title>
    <url>/2020/09/24/Oracle/Oracle%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>函数名</th>
<th>函数详解</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>FLOOR</td>
<td>返回小于等于n的最大整数值</td>
<td>floor(n)</td>
</tr>
<tr>
<td>CEIL</td>
<td>返回大于等于数值n的最小整数值</td>
<td>ceil(n)，n是字符也可以</td>
</tr>
<tr>
<td>CONCAT</td>
<td>用于将两个字符串连接在一起</td>
<td>CONCAT( string1, string2 )</td>
</tr>
<tr>
<td>INSTR</td>
<td>字符查找函数位置</td>
<td></td>
</tr>
<tr>
<td>SUBSTR</td>
<td>截取字符指定段</td>
<td></td>
</tr>
<tr>
<td>INITCAP</td>
<td>首字母变为大写</td>
<td></td>
</tr>
<tr>
<td>MOD</td>
<td>返回m除以n的余数，如果n是0，返回m</td>
<td>mod(m,n)</td>
</tr>
<tr>
<td>trunc</td>
<td>TRUNC()函数在截取时不进行四舍五入，直接截取；如果Num_digits为正数，则截取小数点后Num_digits位；如果为负数，则先保留整数部分，然后从个位开始向前数，并将遇到的数字都变为0。</td>
<td>RUNC（number,num_digits）</td>
</tr>
<tr>
<td>round</td>
<td>和trunc函数不同，对截取的数字要四舍五入。如果为负数则表示从小数点开始左边的位数，相应整数数字用0填充，小数被去掉。</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>FLOOR</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【功能】返回小于等于x的最大整数值</span><br><span class="line"></span><br><span class="line">【参数】x，数字型表达式</span><br><span class="line"></span><br><span class="line">【返回】数字</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SQL&gt; select floor(3.1),floor(3.6),floor(2.8+1.3),floor(0),floor(-1.5) from dual;</span><br><span class="line"></span><br><span class="line">FLOOR(3.1) FLOOR(3.6) FLOOR(2.8+1.3)   FLOOR(0) FLOOR(-1.5)</span><br><span class="line">---------- ---------- -------------- ---------- -----------</span><br><span class="line">	 3	    3		   4	      0 	 -2</span><br><span class="line">	 </span><br><span class="line">SQL&gt; select floor(3.1),floor(&#39;3.1&#39;),ceil(3.1),ceil(&#39;3.1&#39;) from dual;</span><br><span class="line"></span><br><span class="line">FLOOR(3.1) FLOOR(&#39;3.1&#39;)  CEIL(3.1) CEIL(&#39;3.1&#39;)</span><br><span class="line">---------- ------------ ---------- -----------</span><br><span class="line">	 3	      3 	 4	     4</span><br></pre></td></tr></table></figure>

<ul>
<li>CONCAT</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CONCAT(&#39;Oraok&#39;, &#39;.com&#39;)</span><br><span class="line">-- Result: &#39;Oraok.com&#39;</span><br><span class="line"></span><br><span class="line">CONCAT(&#39;a&#39;, &#39;b&#39;)</span><br><span class="line">-- Result: &#39;ab&#39;</span><br><span class="line"></span><br><span class="line">SELECT CONCAT(CONCAT(&#39;A&#39;, &#39;B&#39;),&#39;C&#39;)</span><br><span class="line">FROM dual;</span><br><span class="line">-- Result: &#39;ABC&#39;</span><br><span class="line"></span><br><span class="line">SQL&gt; SELECT CONCAT(&#39;Let&#39;&#39;s&#39;, &#39; learn Oracle&#39;) FROM dual;</span><br><span class="line"></span><br><span class="line">CONCAT(&#39;LET&#39;&#39;S&#39;,&#39;L</span><br><span class="line">------------------</span><br><span class="line">Let&#39;s learn Oracle</span><br><span class="line">由于参数包含在单引号中，因此在引号内使用2个额外的单引号来表示生成的连接字符串中的单引号。</span><br></pre></td></tr></table></figure>

<ul>
<li>INSTR</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">格式一：instr( string1, string2 )</span><br><span class="line">/ instr(源字符串, 目标字符串)</span><br><span class="line"></span><br><span class="line">格式二：instr( string1, string2 [, start_position [, nth_appearance ] ] )</span><br><span class="line">/ instr(源字符串, 目标字符串, 起始位置, 匹配序号)</span><br><span class="line"></span><br><span class="line">解析：string2 的值要在string1中查找，是从start_position给出的数值（即：位置）开始在string1检索，检索第nth_appearance（几）次出现string2。</span><br><span class="line"></span><br><span class="line">SQL&gt; select instr('helloworld','l') from dual; </span><br><span class="line"></span><br><span class="line">INSTR('HELLOWORLD','L')</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line">		      3</span><br><span class="line"></span><br><span class="line">SQL&gt; select instr('helloworld','lo') from dual;--在“lo”中，“l”开始出现的位置</span><br><span class="line"></span><br><span class="line">INSTR('HELLOWORLD','LO')</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line">		       4</span><br><span class="line"></span><br><span class="line">SQL&gt; select instr('helloworld','l',2,2) from dual;</span><br><span class="line"></span><br><span class="line">INSTR('HELLOWORLD','L',2,2)</span><br><span class="line"><span class="comment">---------------------------</span></span><br><span class="line">			  4</span><br></pre></td></tr></table></figure>

<ul>
<li>trunc 与  round</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">SYS@testdb&gt;select round(1),round(1.5,-1),round(55.5,-1),trunc(55.5,-1),trunc(1),trunc(1.5,-1) from dual;</span><br><span class="line"></span><br><span class="line">  ROUND(1) ROUND(1.5,-1) ROUND(55.5,-1) TRUNC(55.5,-1)	 TRUNC(1) TRUNC(1.5,-1)</span><br><span class="line"><span class="comment">---------- ------------- -------------- -------------- ---------- -------------</span></span><br><span class="line">	 1	       0	     60 	    50		1	      0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle 12C</tag>
        <tag>OCP</tag>
      </tags>
  </entry>
  <entry>
    <title>金融云各版本云数据库支持TDE的状态</title>
    <url>/2020/09/11/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E9%87%91%E8%9E%8D%E4%BA%91%E5%90%84%E7%89%88%E6%9C%AC%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%AF%E6%8C%81TDE%E7%9A%84%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">存储引擎</th>
<th align="left">数据库版本</th>
<th align="left">实例类型</th>
<th align="left">支持TDE的状态</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">MySQL</td>
<td align="left">5.6</td>
<td align="left">Primary</td>
<td align="left">支持</td>
<td align="left">RDS for MySQL是和公共云没有区别的 RDS MySQL 8.0高可用版（本地盘）RDS MySQL 5.7高可用版（本地盘）RDS MySQL 5.6</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">MySQL</td>
<td align="left">5.6</td>
<td align="left">Readonly</td>
<td align="left">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">MySQL</td>
<td align="left">5.7</td>
<td align="left">Primary</td>
<td align="left">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">MySQL</td>
<td align="left">8.0</td>
<td align="left">Primary</td>
<td align="left">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">PostgreSQL</td>
<td align="left">9.4</td>
<td align="left">Primary</td>
<td align="left">不支持</td>
<td align="left">RDS PostgreSQL提供数据加密功能，<strong>SSL链路加密</strong>和<strong>云盘加密</strong> RDS PostgreSQL提供全加密数据库功能，选择SGX加密型</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">PostgreSQL</td>
<td align="left">12.0</td>
<td align="left">Primary</td>
<td align="left">不支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">SQLServer</td>
<td align="left">2016_std_ha</td>
<td align="left">Primary</td>
<td align="left">不支持</td>
<td align="left">实例类型为SQL Server企业版的主实例（只读实例不支持TDE）。只有阿里云主账号（即非子账号）登录才可以查看和修改TDE配置。开通TDE前需要先开通KMS。如果您未开通KMS，可在开通TDE过程中根据引导开通KMS。  版本支持明细见：<a href="https://help.aliyun.com/document_detail/145468.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/145468.html</a></td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">SQLServer</td>
<td align="left">2016_ent_ha</td>
<td align="left">Primary</td>
<td align="left">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">SQLServer</td>
<td align="left">2008r2</td>
<td align="left">Primary</td>
<td align="left">支持</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">PolarDB for MySQL</td>
<td align="left">5.6</td>
<td align="left"></td>
<td align="left">不支持</td>
<td align="left">前提条件：集群版本为PolarDB MySQL 8.0PolarDB for Oracle 支持TDE：<a href="https://help.aliyun.com/document_detail/164154.html" target="_blank" rel="noopener">https://help.aliyun.com/document_detail/164154.html</a></td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">PolarDB for Oracle</td>
<td align="left">11</td>
<td align="left"></td>
<td align="left">支持</td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>云数据库</category>
      </categories>
  </entry>
  <entry>
    <title>pt-archiver归档表无主键的问题探索</title>
    <url>/2020/09/02/MySQL/pt-archiver%E5%BD%92%E6%A1%A3%E8%A1%A8%E6%97%A0%E4%B8%BB%E9%94%AE%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>一张没有主键的表，归档时发现归档后的数据行数不准确，少了很多。</p>
<h1 id="场景模拟"><a href="#场景模拟" class="headerlink" title="场景模拟"></a>场景模拟</h1><h2 id="表结构和数据"><a href="#表结构和数据" class="headerlink" title="表结构和数据"></a>表结构和数据</h2><p>准备两张表 table_demo 和 table_demo1</p>
<table>
<thead>
<tr>
<th align="left">表</th>
<th align="left">主键</th>
<th align="left">归档表</th>
</tr>
</thead>
<tbody><tr>
<td align="left">table_demo</td>
<td align="left">Yes</td>
<td align="left">table_demo_history</td>
</tr>
<tr>
<td align="left">table_demo1</td>
<td align="left">NO</td>
<td align="left">table_demo1_history</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_demo(  </span><br><span class="line">id int auto_increment primary key,   </span><br><span class="line">uname  varchar(20) ,  </span><br><span class="line">ucreatetime  datetime  ,  </span><br><span class="line">age  int(11)) DEFAULT CHARACTER SET&#x3D;utf8 COLLATE&#x3D;utf8_general_ci;</span><br><span class="line"></span><br><span class="line">CREATE TABLE table_demo1(  </span><br><span class="line">id int,   </span><br><span class="line">uname  varchar(20) ,  </span><br><span class="line">ucreatetime  datetime  ,  </span><br><span class="line">age  int(11)) DEFAULT CHARACTER SET&#x3D;utf8 COLLATE&#x3D;utf8_general_ci;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alter table table_demo add index idx_ucreatetime (ucreatetime);</span><br><span class="line">alter table table_demo1 add index idx_ucreatetime (ucreatetime);</span><br><span class="line"></span><br><span class="line">delimiter $$</span><br><span class="line">create  procedure test1() </span><br><span class="line">begin</span><br><span class="line">declare v_cnt decimal (10)  default 0 ;</span><br><span class="line">start transaction;</span><br><span class="line">dd:loop           </span><br><span class="line"> </span><br><span class="line">        insert  into table_demo values      </span><br><span class="line">        (null,&#39;用户1&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户2&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户3&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户4&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户5&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户6&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户7&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户8&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户9&#39;,sysdate(),20),        </span><br><span class="line">        (null,&#39;用户0&#39;,sysdate(),20)            </span><br><span class="line">                ;                                       </span><br><span class="line">        set v_cnt &#x3D; v_cnt+10 ;                           </span><br><span class="line">            if  v_cnt &#x3D; 1000 then leave dd;                          </span><br><span class="line">            end if;         </span><br><span class="line">        end loop dd ;</span><br><span class="line">commit;</span><br><span class="line">end $$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br><span class="line">call test1();</span><br><span class="line"></span><br><span class="line">insert into table_demo1 select * from table_demo;</span><br><span class="line">select count(*) from table_demo1;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-02 11:51:27&quot; where id between 200 and 300;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-03 11:51:27&quot; where id between 300 and 400;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-04 11:51:27&quot; where id between 400 and 500;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-05 11:51:27&quot; where id between 500 and 600;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-06 11:51:27&quot; where id between 600 and 700;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-07 11:51:27&quot; where id between 700 and 800;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-08 11:51:27&quot; where id between 800 and 900;</span><br><span class="line">update table_demo1 set ucreatetime&#x3D;&quot;2020-09-09 11:51:27&quot; where id between 900 and 1000;</span><br><span class="line">    </span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-02 11:51:27&quot; where id between 200 and 300;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-03 11:51:27&quot; where id between 300 and 400;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-04 11:51:27&quot; where id between 400 and 500;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-05 11:51:27&quot; where id between 500 and 600;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-06 11:51:27&quot; where id between 600 and 700;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-07 11:51:27&quot; where id between 700 and 800;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-08 11:51:27&quot; where id between 800 and 900;</span><br><span class="line">update table_demo set ucreatetime&#x3D;&quot;2020-09-09 11:51:27&quot; where id between 900 and 1000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select count(*), ucreatetime from table_demo group by ucreatetime;</span><br><span class="line">select count(*), ucreatetime from table_demo1 group by ucreatetime;</span><br><span class="line"></span><br><span class="line">create table table_demo1_history like table_demo1;</span><br><span class="line">create table table_demo_history like table_demo;</span><br><span class="line">create table table_demo1_history1 like table_demo1;</span><br><span class="line">    </span><br><span class="line">truncate table table_demo_history;</span><br><span class="line">truncate table table_demo1_history;</span><br><span class="line">truncate table table_demo1_history1;</span><br></pre></td></tr></table></figure>

<h2 id="开启general-log"><a href="#开启general-log" class="headerlink" title="开启general_log"></a>开启general_log</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启general_log，具体操作如下：</span><br><span class="line">show variables like &#39;%general_log%&#39;;</span><br><span class="line">SET GLOBAL general_log &#x3D; &#39;OFF&#39;;</span><br><span class="line">SET GLOBAL general_log &#x3D; &#39;ON&#39;;</span><br><span class="line">show variables like &#39;%general_log%&#39;;</span><br></pre></td></tr></table></figure>

<h2 id="归档命令"><a href="#归档命令" class="headerlink" title="归档命令"></a>归档命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#  table_demo 有主键</span><br><span class="line">pt-archiver  --source h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo --dest h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo_history --no-check-charset --where &quot;ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;&quot; --progress 5000 --limit&#x3D;10 --txn-size&#x3D;10 --statistics --bulk-insert --no-delete --charset &#39;utf8&#39; --noversion-check</span><br><span class="line"># table_demo1 无主键 --limit 10</span><br><span class="line">pt-archiver  --source h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1 --dest h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1_history --no-check-charset --where &quot;ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;&quot; --progress 5000 --limit&#x3D;10 --txn-size&#x3D;10 --statistics --bulk-insert --no-delete --charset &#39;utf8&#39; --noversion-check</span><br><span class="line"># table_demo1 无主键 --limit 500</span><br><span class="line">pt-archiver  --source h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1 --dest h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1_history1 --no-check-charset --where &quot;ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;&quot; --progress 5000 --limit&#x3D;500 --txn-size&#x3D;10 --statistics --bulk-insert --no-delete --charset &#39;utf8&#39; --noversion-check</span><br></pre></td></tr></table></figure>

<h2 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*), ucreatetime from table_demo_history group by ucreatetime;</span><br><span class="line">select count(*), ucreatetime from table_demo1_history1 group by ucreatetime;</span><br><span class="line">select count(*), ucreatetime from table_demo1_history group by ucreatetime;</span><br></pre></td></tr></table></figure>

<h1 id="操作记录"><a href="#操作记录" class="headerlink" title="操作记录"></a>操作记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@NB-flexgw1:&#x2F;root]# pt-archiver --version</span><br><span class="line">pt-archiver 3.0.4</span><br><span class="line">[root@NB-flexgw1:&#x2F;root]# mysql --version</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.20-19, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">root@MySQL-01 12:09:  [qixin]&gt; select count(*), ucreatetime from table_demo1 group by ucreatetime;</span><br><span class="line">+----------+---------------------+</span><br><span class="line">| count(*) | ucreatetime         |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">|      199 | 2020-09-01 11:51:26 |</span><br><span class="line">|      100 | 2020-09-02 11:51:27 |</span><br><span class="line">|      100 | 2020-09-03 11:51:27 |</span><br><span class="line">|      100 | 2020-09-04 11:51:27 |</span><br><span class="line">|      100 | 2020-09-05 11:51:27 |</span><br><span class="line">|      100 | 2020-09-06 11:51:27 |</span><br><span class="line">|      100 | 2020-09-07 11:51:27 |</span><br><span class="line">|      100 | 2020-09-08 11:51:27 |</span><br><span class="line">|      101 | 2020-09-09 11:51:27 |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">root@MySQL-01 12:09:  [qixin]&gt; select count(*), ucreatetime from table_demo group by ucreatetime;</span><br><span class="line">+----------+---------------------+</span><br><span class="line">| count(*) | ucreatetime         |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">|      199 | 2020-09-01 11:51:26 |</span><br><span class="line">|      100 | 2020-09-02 11:51:27 |</span><br><span class="line">|      100 | 2020-09-03 11:51:27 |</span><br><span class="line">|      100 | 2020-09-04 11:51:27 |</span><br><span class="line">|      100 | 2020-09-05 11:51:27 |</span><br><span class="line">|      100 | 2020-09-06 11:51:27 |</span><br><span class="line">|      100 | 2020-09-07 11:51:27 |</span><br><span class="line">|      100 | 2020-09-08 11:51:27 |</span><br><span class="line">|      101 | 2020-09-09 11:51:27 |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@MySQL-01 12:41:  [qixin]&gt; show variables like &#39;%general_log%&#39;;</span><br><span class="line">+------------------+------------------------------------+</span><br><span class="line">| Variable_name    | Value                              |</span><br><span class="line">+------------------+------------------------------------+</span><br><span class="line">| general_log      | ON                                 |</span><br><span class="line">| general_log_file | &#x2F;alidata&#x2F;mysql&#x2F;data&#x2F;NB-flexgw1.log |</span><br><span class="line">+------------------+------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">--无索引的表</span><br><span class="line">[root@NB-flexgw1:&#x2F;root]# pt-archiver  --source h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1 --dest h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1_history --no-check-charset --where &quot;ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;&quot; --progress 5000 --limit&#x3D;10 --txn-size&#x3D;10 --statistics --bulk-insert --no-delete --charset &#39;utf8&#39; --noversion-check</span><br><span class="line">TIME                ELAPSED   COUNT</span><br><span class="line">2020-09-01T12:06:04       0       0</span><br><span class="line">2020-09-01T12:06:05       0      90</span><br><span class="line">Started at 2020-09-01T12:06:04, ended at 2020-09-01T12:06:05</span><br><span class="line">Source: A&#x3D;utf8,D&#x3D;qixin,P&#x3D;3306,h&#x3D;localhost,p&#x3D;...,t&#x3D;table_demo1,u&#x3D;root</span><br><span class="line">Dest:   A&#x3D;utf8,D&#x3D;qixin,P&#x3D;3306,h&#x3D;localhost,p&#x3D;...,t&#x3D;table_demo1_history,u&#x3D;root</span><br><span class="line">SELECT 90</span><br><span class="line">INSERT 90</span><br><span class="line">DELETE 0</span><br><span class="line">Action              Count       Time        Pct</span><br><span class="line">commit                 20     0.7429      90.38</span><br><span class="line">select                 10     0.0261       3.18</span><br><span class="line">bulk_inserting          9     0.0030       0.36</span><br><span class="line">print_bulkfile         90    -0.0003      -0.03</span><br><span class="line">other                   0     0.0502       6.11</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--有索引的表</span><br><span class="line">[root@NB-flexgw1:&#x2F;root]# pt-archiver  --source h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo --dest h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo_history --no-check-charset --where &quot;ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;&quot; --progress 5000 --limit&#x3D;10 --txn-size&#x3D;10 --statistics --bulk-insert --no-delete --charset &#39;utf8&#39; --noversion-check</span><br><span class="line">TIME                ELAPSED   COUNT</span><br><span class="line">2020-09-01T12:11:10       0       0</span><br><span class="line">2020-09-01T12:11:18       8     999</span><br><span class="line">Started at 2020-09-01T12:11:10, ended at 2020-09-01T12:11:18</span><br><span class="line">Source: A&#x3D;utf8,D&#x3D;qixin,P&#x3D;3306,h&#x3D;localhost,p&#x3D;...,t&#x3D;table_demo,u&#x3D;root</span><br><span class="line">Dest:   A&#x3D;utf8,D&#x3D;qixin,P&#x3D;3306,h&#x3D;localhost,p&#x3D;...,t&#x3D;table_demo_history,u&#x3D;root</span><br><span class="line">SELECT 999</span><br><span class="line">INSERT 999</span><br><span class="line">DELETE 0</span><br><span class="line">Action              Count       Time        Pct</span><br><span class="line">commit                200     8.1391      97.00</span><br><span class="line">bulk_inserting        100     0.1428       1.70</span><br><span class="line">select                101     0.0461       0.55</span><br><span class="line">print_bulkfile        999    -0.0018      -0.02</span><br><span class="line">other                   0     0.0642       0.76</span><br><span class="line"></span><br><span class="line">[root@NB-flexgw1:&#x2F;root]# pt-archiver  --source h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1 --dest h&#x3D;localhost,P&#x3D;3306,u&#x3D;root,p&#x3D;root,D&#x3D;qixin,t&#x3D;table_demo1_history1 --no-check-charset --where &quot;ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;&quot; --progress 5000 --limit&#x3D;500 --txn-size&#x3D;10 --statistics --bulk-insert --no-delete --charset &#39;utf8&#39; --noversion-check</span><br><span class="line">TIME                ELAPSED   COUNT</span><br><span class="line">2020-09-01T15:24:52       0       0</span><br><span class="line">2020-09-01T15:24:52       0     901</span><br><span class="line">Started at 2020-09-01T15:24:52, ended at 2020-09-01T15:24:52</span><br><span class="line">Source: A&#x3D;utf8,D&#x3D;qixin,P&#x3D;3306,h&#x3D;localhost,p&#x3D;...,t&#x3D;table_demo1,u&#x3D;root</span><br><span class="line">Dest:   A&#x3D;utf8,D&#x3D;qixin,P&#x3D;3306,h&#x3D;localhost,p&#x3D;...,t&#x3D;table_demo1_history1,u&#x3D;root</span><br><span class="line">SELECT 901</span><br><span class="line">INSERT 901</span><br><span class="line">DELETE 0</span><br><span class="line">Action              Count       Time        Pct</span><br><span class="line">bulk_inserting          2     0.2076      51.39</span><br><span class="line">commit                182     0.1521      37.64</span><br><span class="line">select                  3     0.0189       4.68</span><br><span class="line">print_bulkfile        901    -0.0021      -0.51</span><br><span class="line">other                   0     0.0275       6.80</span><br><span class="line"></span><br><span class="line">root@MySQL-01 15:24:  [qixin]&gt; select count(*), ucreatetime from table_demo_history group by ucreatetime;</span><br><span class="line">+----------+---------------------+</span><br><span class="line">| count(*) | ucreatetime         |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">|      199 | 2020-09-01 11:51:26 |</span><br><span class="line">|      100 | 2020-09-02 11:51:27 |</span><br><span class="line">|      100 | 2020-09-03 11:51:27 |</span><br><span class="line">|      100 | 2020-09-04 11:51:27 |</span><br><span class="line">|      100 | 2020-09-05 11:51:27 |</span><br><span class="line">|      100 | 2020-09-06 11:51:27 |</span><br><span class="line">|      100 | 2020-09-07 11:51:27 |</span><br><span class="line">|      100 | 2020-09-08 11:51:27 |</span><br><span class="line">|      100 | 2020-09-09 11:51:27 |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">root@MySQL-01 15:25:  [qixin]&gt; select count(*), ucreatetime from table_demo1_history group by ucreatetime;</span><br><span class="line">+----------+---------------------+</span><br><span class="line">| count(*) | ucreatetime         |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">|       10 | 2020-09-01 11:51:26 |</span><br><span class="line">|       10 | 2020-09-02 11:51:27 |</span><br><span class="line">|       10 | 2020-09-03 11:51:27 |</span><br><span class="line">|       10 | 2020-09-04 11:51:27 |</span><br><span class="line">|       10 | 2020-09-05 11:51:27 |</span><br><span class="line">|       10 | 2020-09-06 11:51:27 |</span><br><span class="line">|       10 | 2020-09-07 11:51:27 |</span><br><span class="line">|       10 | 2020-09-08 11:51:27 |</span><br><span class="line">|       10 | 2020-09-09 11:51:27 |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">root@MySQL-01 15:25:  [qixin]&gt; select count(*), ucreatetime from table_demo1_history1 group by ucreatetime;</span><br><span class="line">+----------+---------------------+</span><br><span class="line">| count(*) | ucreatetime         |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">|      199 | 2020-09-01 11:51:26 |</span><br><span class="line">|      100 | 2020-09-02 11:51:27 |</span><br><span class="line">|      100 | 2020-09-03 11:51:27 |</span><br><span class="line">|      100 | 2020-09-04 11:51:27 |</span><br><span class="line">|        1 | 2020-09-05 11:51:27 |</span><br><span class="line">|      100 | 2020-09-06 11:51:27 |</span><br><span class="line">|      100 | 2020-09-07 11:51:27 |</span><br><span class="line">|      100 | 2020-09-08 11:51:27 |</span><br><span class="line">|      101 | 2020-09-09 11:51:27 |</span><br><span class="line">+----------+---------------------+</span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h1 id="分析PT原理"><a href="#分析PT原理" class="headerlink" title="分析PT原理"></a>分析PT原理</h1><h2 id="有主键"><a href="#有主键" class="headerlink" title="有主键"></a>有主键</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-01T04:42:03.705819Z    1056244 Connect    root@localhost on qixin using Socket</span><br><span class="line">2020-09-01T04:42:03.705930Z    1056244 Query    set autocommit&#x3D;0</span><br><span class="line">2020-09-01T04:42:03.706025Z    1056244 Query    &#x2F;*!40101 SET NAMES &quot;utf8&quot;*&#x2F;</span><br><span class="line">2020-09-01T04:42:03.706128Z    1056244 Query    SHOW VARIABLES LIKE &#39;wait\_timeout&#39;</span><br><span class="line">2020-09-01T04:42:03.782137Z    1056244 Query    SET SESSION wait_timeout&#x3D;10000</span><br><span class="line">2020-09-01T04:42:03.782285Z    1056244 Query    SELECT @@SQL_MODE</span><br><span class="line">2020-09-01T04:42:03.786019Z    1056244 Query    SET @@SQL_QUOTE_SHOW_CREATE &#x3D; 1&#x2F;*!40101, @@SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO,ONLY_FULL_GROUP_BY&#39;*&#x2F;</span><br><span class="line">2020-09-01T04:42:03.786244Z    1056244 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T04:42:03.787356Z    1056244 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T04:42:03.787601Z    1056244 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T04:42:03.788640Z    1056244 Query    show variables like &#39;innodb_rollback_on_timeout&#39;</span><br><span class="line">2020-09-01T04:42:03.789538Z    1056244 Query    &#x2F;*!40101 SET @OLD_SQL_MODE :&#x3D; @@SQL_MODE, @@SQL_MODE :&#x3D; &#39;&#39;, @OLD_QUOTE :&#x3D; @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; 1 *&#x2F;</span><br><span class="line">2020-09-01T04:42:03.789604Z    1056244 Query    USE &#96;qixin&#96;</span><br><span class="line">2020-09-01T04:42:03.789675Z    1056244 Query    SHOW CREATE TABLE &#96;qixin&#96;.&#96;table_demo&#96;</span><br><span class="line">2020-09-01T04:42:03.789794Z    1056244 Query    &#x2F;*!40101 SET @@SQL_MODE :&#x3D; @OLD_SQL_MODE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; @OLD_QUOTE *&#x2F;</span><br><span class="line">2020-09-01T04:42:03.790234Z    1056245 Connect    root@localhost on qixin using Socket</span><br><span class="line">2020-09-01T04:42:03.790302Z    1056245 Query    set autocommit&#x3D;0</span><br><span class="line">2020-09-01T04:42:03.790368Z    1056245 Query    &#x2F;*!40101 SET NAMES &quot;utf8&quot;*&#x2F;</span><br><span class="line">2020-09-01T04:42:03.790443Z    1056245 Query    SHOW VARIABLES LIKE &#39;wait\_timeout&#39;</span><br><span class="line">2020-09-01T04:42:03.791279Z    1056245 Query    SET SESSION wait_timeout&#x3D;10000</span><br><span class="line">2020-09-01T04:42:03.791363Z    1056245 Query    SELECT @@SQL_MODE</span><br><span class="line">2020-09-01T04:42:03.791422Z    1056245 Query    SET @@SQL_QUOTE_SHOW_CREATE &#x3D; 1&#x2F;*!40101, @@SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO,ONLY_FULL_GROUP_BY&#39;*&#x2F;</span><br><span class="line">2020-09-01T04:42:03.791510Z    1056245 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T04:42:03.792414Z    1056245 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T04:42:03.792651Z    1056245 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T04:42:03.793621Z    1056245 Query    show variables like &#39;innodb_rollback_on_timeout&#39;</span><br><span class="line">2020-09-01T04:42:03.794502Z    1056245 Query    &#x2F;*!40101 SET @OLD_SQL_MODE :&#x3D; @@SQL_MODE, @@SQL_MODE :&#x3D; &#39;&#39;, @OLD_QUOTE :&#x3D; @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; 1 *&#x2F;</span><br><span class="line">2020-09-01T04:42:03.794564Z    1056245 Query    USE &#96;qixin&#96;</span><br><span class="line">2020-09-01T04:42:03.794632Z    1056245 Query    SHOW CREATE TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;</span><br><span class="line">2020-09-01T04:42:03.794756Z    1056245 Query    &#x2F;*!40101 SET @@SQL_MODE :&#x3D; @OLD_SQL_MODE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; @OLD_QUOTE *&#x2F;</span><br><span class="line">2020-09-01T04:42:03.794975Z    1056244 Query    SHOW VARIABLES LIKE &#39;wsrep_on&#39;</span><br><span class="line">2020-09-01T04:42:03.795812Z    1056244 Query    SHOW VARIABLES LIKE &#39;wsrep_on&#39;</span><br><span class="line">2020-09-01T04:42:03.796814Z    1056244 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T04:42:03.797717Z    1056244 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T04:42:03.797960Z    1056244 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T04:42:03.798963Z    1056244 Query    SELECT MAX(&#96;id&#96;) FROM &#96;qixin&#96;.&#96;table_demo&#96;</span><br><span class="line">2020-09-01T04:42:03.799375Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:03.825820Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:03.826092Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:03.826128Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:03.826226Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;AU0TjwWDdcpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:03.826499Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:03.826596Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;10&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:03.827133Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:03.936840Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:03.937094Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;ZhhrnEoaX7pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:03.937437Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:03.937603Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;20&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:03.938282Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.037250Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.037427Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;fAB4l8yrJjpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.037703Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.037864Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;30&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.038516Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.104206Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.104382Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;FmX2lV3SQCpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.104634Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.104799Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;40&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.105450Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.171160Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.171345Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;YDsDpHpccApt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.171608Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.171761Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;50&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.172417Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.237976Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.238155Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;ObeEMvc2y0pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.238418Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.238569Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;60&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.239225Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.305109Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.305287Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;3j9tv4KIZlpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.305551Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.305708Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;70&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.306362Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.371976Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.372154Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;BpHvFj6Arvpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.372416Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.372569Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;80&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.373221Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.439022Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.439206Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;G7_VjlVW5upt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.439469Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.439625Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;90&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.440275Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.505950Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.506130Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;5QgeHRtTO0pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.506394Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.506550Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;100&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.507207Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.582188Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.582374Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;pt5T4WvMJ0pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.582630Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.582780Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;110&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.583286Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.583500Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.681590Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.681768Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;1ExiMC9SnJpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.682055Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.682216Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;120&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.682858Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.790047Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.790229Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;xPv5JsoQgept-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.790499Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.790675Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;130&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.791335Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.874013Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.874197Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;kWzhsIt5bCpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.874468Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.874618Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;140&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.875266Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:04.941001Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:04.941180Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;zHNSfbUpXEpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:04.941438Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:04.941586Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;150&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:04.942237Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.007953Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.008131Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;emFtHNbqFUpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.008390Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.008545Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;160&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.009205Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.074917Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.075097Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;IUmdwAJs7zpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.075360Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.075518Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;170&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.076169Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.141777Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.141960Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;wm8WMjgCckpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.142217Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.142373Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;180&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.143029Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.217089Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.217268Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;BJQW1ZsVZPpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.217528Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.217681Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;190&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.218335Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.293005Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.293183Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;Ir6XzHYjKspt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.293451Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.293603Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;200&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.294249Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.367842Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.368030Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;GE8wk9Qp4Rpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.368303Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.368458Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;210&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.369105Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.459813Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.459999Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;7ojkfVuqdApt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.460273Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.460427Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;220&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.460943Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.461139Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.560014Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.560199Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;PY2MkLXbPtpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.560461Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.560613Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;230&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.561259Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.635426Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.635604Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;I2x_apU4X7pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.635871Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.636036Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;240&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.636685Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.711280Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.711462Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;k0vRdVxwrWpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.711724Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.711872Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;250&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.712527Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.786594Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.786776Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;LbcnBI4mpMpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.787049Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.787212Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;260&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.787862Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.861873Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.862060Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;dysyx3467Cpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.862334Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.862486Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;270&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.863135Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.928890Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.929078Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;qJWjuN5nU_pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.929349Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.929501Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;280&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.930151Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:05.995860Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:05.996047Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;R9lGJ3sRvdpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:05.996322Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:05.996473Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;290&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:05.997126Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.079362Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.079541Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;C5L52MNPY7pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.079811Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.079973Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;300&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.080625Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.146471Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.146650Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;yi4ujjePb0pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.146913Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.147068Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;310&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.147725Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.238421Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.238598Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;_9MB7glHHmpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.238879Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.239044Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;320&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.239688Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.305315Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.305493Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;8EcSFIew_Dpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.305754Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.305914Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;330&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.306467Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.306643Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.372350Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.372529Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;oUP7_OmRTbpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.372783Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.372939Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;340&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.373593Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.464323Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.464502Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;40FBUR4r1Mpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.464756Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.464911Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;350&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.465561Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.532161Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.532347Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;yVOJPed0Hppt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.532604Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.532758Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;360&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.533413Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.640026Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.640211Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;OZdhG9j7GYpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.640466Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.640621Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;370&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.641276Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.756956Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.757133Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;ogUto5EA60pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.757520Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.757681Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;380&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.758313Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.874000Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.874181Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;0wwk_r6lcNpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.874440Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.874591Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;390&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.875247Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:06.949301Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:06.949484Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;Oo9Qhs3cbtpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:06.949743Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:06.949902Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;400&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:06.951145Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.075070Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.075251Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;BnooIBcTOYpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.075508Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.075660Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;410&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.076319Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.142030Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.142215Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;JmSMOQkEH7pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.142475Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.142631Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;420&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.143284Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.209002Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.209181Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;sDwp6tBePopt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.209441Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.209590Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;430&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.210242Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.300959Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.301139Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;EQWdJUDUhjpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.301397Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.301552Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;440&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.302124Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.302278Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.401308Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.401485Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;CpblUjRy8Jpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.401742Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.401897Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;450&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.402550Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.476646Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.476824Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;TsXnGSfKxUpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.477091Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.477248Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;460&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.477893Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.551923Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.552105Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;DwMKwp60eWpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.552367Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.552520Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;470&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.553177Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.627223Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.627404Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;Zz7ePetzB6pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.627660Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.627817Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;480&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.628466Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.702528Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.702705Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;7o_ObySYsFpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.702961Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.703116Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;490&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.703771Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.777837Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.778019Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;aj0EDs0sRnpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.778279Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.778436Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;500&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.779085Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.911330Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.911514Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;mkylWPgQ90pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.911768Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.911924Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;510&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.912577Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:07.986798Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:07.986978Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;tXFiirNV1ypt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:07.987237Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:07.987394Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;520&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:07.988051Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.062722Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.062900Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;mvt_t5DbPJpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.063160Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.063318Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;530&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.063960Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.138006Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.138185Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;wX99KfKYRPpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.138445Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.138594Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;540&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.139245Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.238157Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.238338Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;9reiwtZkidpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.238591Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.238748Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;550&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.239340Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.239475Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.313622Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.313800Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;kNigCSweHSpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.314060Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.314221Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;560&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.314872Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.380528Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.380698Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;gwf4vqkjbnpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.430849Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.431035Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;570&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.431751Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.497706Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.497885Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;kHb62JQi_Ypt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.498144Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.498295Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;580&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.498936Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.597961Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.598139Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;2bMCu9O93ipt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.598399Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.598563Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;590&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.599216Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.664987Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.665167Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;Jsysc1Yocipt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.665422Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.665573Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;600&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.681574Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.790277Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.790460Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;lXxwC378x0pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.790716Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.790871Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;610&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.791515Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.865401Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.865582Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;KHCg2d10RIpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.865837Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.865991Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;620&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.866627Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:08.940956Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:08.941135Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;_sZHGTYKGApt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:08.941394Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:08.941548Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;630&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:08.942206Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.016166Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.016353Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;vF45ZHOHcOpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.016612Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.016764Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;640&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.017413Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.091544Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.091726Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;noIFI_fi4ipt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.091988Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.092142Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;650&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.092790Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.166857Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.167044Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;il929ioHsRpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.167306Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.167459Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;660&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.168055Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.168175Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.250405Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.250584Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;tz3sh5Szz6pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.250843Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.251025Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;670&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.251703Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.317393Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.317571Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;bdQj8e4eEcpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.317825Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.317981Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;680&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.318630Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.426044Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.426232Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;Jp4ErJJjlcpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.426489Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.426645Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;690&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.427300Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.543139Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.543318Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;9QUMFfvhO5pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.543575Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.543729Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;700&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.544387Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.610051Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.610230Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;KyrzcurRQTpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.610487Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.610643Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;710&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.611298Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.710427Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.710605Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;opPBKqu5yRpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.710862Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.711036Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;720&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.711687Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.794033Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.794216Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;_EceM5rAy6pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.794477Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.794631Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;730&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.795286Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.869459Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.869638Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;GQMI9teU30pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.869897Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.870059Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;740&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.870712Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:09.945263Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:09.945446Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;YTVkZlpSjSpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:09.945702Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:09.945856Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;750&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:09.946508Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.020048Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.020231Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;t0EjLYsgkipt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.020488Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.020642Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;760&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.021297Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.112023Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.112210Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;2dNKB08SQ4pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.112471Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.112625Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;770&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.113247Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.113347Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.187396Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.187576Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;501ZKz1LDgpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.187830Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.187985Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;780&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.188645Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.263469Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.263652Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;D7Gsl1DuXwpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.263907Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.264069Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;790&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.264719Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.337982Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.338162Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;tsvJXeWH06pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.338420Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.338571Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;800&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.339222Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.455498Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.455678Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;jJgEZ7t9Uspt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.455932Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.456092Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;810&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.456745Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.522481Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.522659Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;KPgLsuzNl4pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.522916Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.523074Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;820&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.523726Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.614443Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.614626Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;4l8eq2DHfRpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.614879Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.615042Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;830&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.615691Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.723110Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.723299Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;zlNeNUynrNpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.723551Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.723701Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;840&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.724353Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.806952Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.807199Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;wiNAQSa6Ulpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.807456Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.807602Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;850&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.808242Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.907267Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.907447Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;msdcnapyUCpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.907705Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.907858Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;860&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.908503Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:10.990993Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:10.991171Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;QmLXXAAROJpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:10.991428Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:10.991576Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;870&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:10.992225Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.066298Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.066479Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;SKEO81cWXupt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.066732Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.066886Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;880&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.067527Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.067607Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.191397Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.191576Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;jbfU5MmZJtpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.191830Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.191988Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;890&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.192635Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.266913Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.267089Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;4cSSQtrZ3ipt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.267351Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.267501Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;900&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.268149Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.375568Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.375747Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;wohqNRU8nNpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.376007Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.376162Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;910&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.377030Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.484278Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.484460Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;bfLollGPQjpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.484719Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.484873Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;920&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.485526Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.551214Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.551393Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;Pb1red8_xKpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.551651Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.551805Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;930&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.552457Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.618267Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.618445Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;lfekW_Jg1_pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.618699Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.618853Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;940&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.619507Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.685238Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.685415Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;a4XHFOEmYZpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.727222Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.727397Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;950&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.728108Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.794098Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.794276Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;muB8hQnQLlpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.794532Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.794687Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;960&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.795340Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.860870Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.861051Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;PrRdopmrOQpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.861315Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.861467Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;970&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.862110Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:11.961280Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:11.961457Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;tzCNO3aFyipt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:11.961715Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:11.961866Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;980&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:11.962516Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:12.061641Z    1056244 Query    commit</span><br><span class="line">2020-09-01T04:42:12.061819Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;G3eClHNfQ_pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:12.062084Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:12.062240Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;990&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:12.062914Z    1056245 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;6cO0RoUE_9pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:42:12.063086Z    1056244 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:42:12.063178Z    1056244 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;999&#39;)) ORDER BY &#96;id&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:42:12.063444Z    1056245 Query    commit</span><br><span class="line">2020-09-01T04:42:12.136943Z    1056244 Query    commit</span><br></pre></td></tr></table></figure>

<h2 id="无主键"><a href="#无主键" class="headerlink" title="无主键"></a>无主键</h2><h3 id="limit-10"><a href="#limit-10" class="headerlink" title="limit 10"></a>limit 10</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-01T04:45:54.612856Z    1056246 Connect    root@localhost on qixin using Socket</span><br><span class="line">2020-09-01T04:45:54.623925Z    1056246 Query    set autocommit&#x3D;0</span><br><span class="line">2020-09-01T04:45:54.624208Z    1056246 Query    &#x2F;*!40101 SET NAMES &quot;utf8&quot;*&#x2F;</span><br><span class="line">2020-09-01T04:45:54.624500Z    1056246 Query    SHOW VARIABLES LIKE &#39;wait\_timeout&#39;</span><br><span class="line">2020-09-01T04:45:54.656371Z    1056246 Query    SET SESSION wait_timeout&#x3D;10000</span><br><span class="line">2020-09-01T04:45:54.661161Z    1056246 Query    SELECT @@SQL_MODE</span><br><span class="line">2020-09-01T04:45:54.668229Z    1056246 Query    SET @@SQL_QUOTE_SHOW_CREATE &#x3D; 1&#x2F;*!40101, @@SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO,ONLY_FULL_GROUP_BY&#39;*&#x2F;</span><br><span class="line">2020-09-01T04:45:54.668560Z    1056246 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T04:45:54.670183Z    1056246 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T04:45:54.670572Z    1056246 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T04:45:54.672227Z    1056246 Query    show variables like &#39;innodb_rollback_on_timeout&#39;</span><br><span class="line">2020-09-01T04:45:54.673738Z    1056246 Query    &#x2F;*!40101 SET @OLD_SQL_MODE :&#x3D; @@SQL_MODE, @@SQL_MODE :&#x3D; &#39;&#39;, @OLD_QUOTE :&#x3D; @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; 1 *&#x2F;</span><br><span class="line">2020-09-01T04:45:54.673934Z    1056246 Query    USE &#96;qixin&#96;</span><br><span class="line">2020-09-01T04:45:54.674112Z    1056246 Query    SHOW CREATE TABLE &#96;qixin&#96;.&#96;table_demo1&#96;</span><br><span class="line">2020-09-01T04:45:54.678915Z    1056246 Query    &#x2F;*!40101 SET @@SQL_MODE :&#x3D; @OLD_SQL_MODE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; @OLD_QUOTE *&#x2F;</span><br><span class="line">2020-09-01T04:45:54.679534Z    1056247 Connect    root@localhost on qixin using Socket</span><br><span class="line">2020-09-01T04:45:54.679664Z    1056247 Query    set autocommit&#x3D;0</span><br><span class="line">2020-09-01T04:45:54.679753Z    1056247 Query    &#x2F;*!40101 SET NAMES &quot;utf8&quot;*&#x2F;</span><br><span class="line">2020-09-01T04:45:54.679839Z    1056247 Query    SHOW VARIABLES LIKE &#39;wait\_timeout&#39;</span><br><span class="line">2020-09-01T04:45:55.218189Z    1056247 Query    SET SESSION wait_timeout&#x3D;10000</span><br><span class="line">2020-09-01T04:45:55.234263Z    1056247 Query    SELECT @@SQL_MODE</span><br><span class="line">2020-09-01T04:45:55.234411Z    1056247 Query    SET @@SQL_QUOTE_SHOW_CREATE &#x3D; 1&#x2F;*!40101, @@SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO,ONLY_FULL_GROUP_BY&#39;*&#x2F;</span><br><span class="line">2020-09-01T04:45:55.234560Z    1056247 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T04:45:55.235579Z    1056247 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T04:45:55.235830Z    1056247 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T04:45:55.236820Z    1056247 Query    show variables like &#39;innodb_rollback_on_timeout&#39;</span><br><span class="line">2020-09-01T04:45:55.237728Z    1056247 Query    &#x2F;*!40101 SET @OLD_SQL_MODE :&#x3D; @@SQL_MODE, @@SQL_MODE :&#x3D; &#39;&#39;, @OLD_QUOTE :&#x3D; @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; 1 *&#x2F;</span><br><span class="line">2020-09-01T04:45:55.237792Z    1056247 Query    USE &#96;qixin&#96;</span><br><span class="line">2020-09-01T04:45:55.237863Z    1056247 Query    SHOW CREATE TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;</span><br><span class="line">2020-09-01T04:45:55.241535Z    1056247 Query    &#x2F;*!40101 SET @@SQL_MODE :&#x3D; @OLD_SQL_MODE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; @OLD_QUOTE *&#x2F;</span><br><span class="line">2020-09-01T04:45:55.241737Z    1056246 Query    SHOW VARIABLES LIKE &#39;wsrep_on&#39;</span><br><span class="line">2020-09-01T04:45:55.243097Z    1056246 Query    SHOW VARIABLES LIKE &#39;wsrep_on&#39;</span><br><span class="line">2020-09-01T04:45:55.244589Z    1056246 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T04:45:55.245981Z    1056246 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T04:45:55.246232Z    1056246 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T04:45:55.247947Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.268841Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.269115Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.269152Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.276755Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;0mSKYe9H_1pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.391896Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.392042Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-01 11:51:26&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-01 11:51:26&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.392634Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.467403Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.467582Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;3d4ZQAAhXmpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.467841Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.468008Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-02 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-02 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.468659Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.534448Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.534626Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;OM6TBYirhppt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.534880Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.535045Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-03 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-03 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.535692Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.601410Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.601589Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;ugFgLdzN5Vpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.601842Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.602005Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-04 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-04 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.602658Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.668336Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.668513Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;eS64zSsg81pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.668784Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.668945Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-05 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-05 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.669588Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.735344Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.735525Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;pm9PxNBm_Mpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.735781Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.735946Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-06 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-06 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.736597Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.802210Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.802392Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;ZgF1CTnJbEpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.802647Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.802805Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-07 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-07 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.803459Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.869209Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.869388Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;KdLG2B7LqRpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.869636Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.869790Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-08 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-08 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.870438Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:55.936160Z    1056246 Query    commit</span><br><span class="line">2020-09-01T04:45:55.936345Z    1056247 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;DIf1nNHCG2pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T04:45:55.936601Z    1056246 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T04:45:55.936763Z    1056246 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-09 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-09 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br><span class="line">2020-09-01T04:45:55.937182Z    1056247 Query    commit</span><br><span class="line">2020-09-01T04:45:56.011530Z    1056246 Query    commit</span><br></pre></td></tr></table></figure>

<h3 id="limit-500"><a href="#limit-500" class="headerlink" title="limit 500"></a>limit 500</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-09-01T07:24:52.407145Z    1056259 Query    USE &#96;qixin&#96;</span><br><span class="line">2020-09-01T07:24:52.407216Z    1056259 Query    SHOW CREATE TABLE &#96;qixin&#96;.&#96;table_demo1&#96;</span><br><span class="line">2020-09-01T07:24:52.407338Z    1056259 Query    &#x2F;*!40101 SET @@SQL_MODE :&#x3D; @OLD_SQL_MODE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; @OLD_QUOTE *&#x2F;</span><br><span class="line">2020-09-01T07:24:52.407779Z    1056260 Connect    root@localhost on qixin using Socket</span><br><span class="line">2020-09-01T07:24:52.407847Z    1056260 Query    set autocommit&#x3D;0</span><br><span class="line">2020-09-01T07:24:52.407912Z    1056260 Query    &#x2F;*!40101 SET NAMES &quot;utf8&quot;*&#x2F;</span><br><span class="line">2020-09-01T07:24:52.407989Z    1056260 Query    SHOW VARIABLES LIKE &#39;wait\_timeout&#39;</span><br><span class="line">2020-09-01T07:24:52.408816Z    1056260 Query    SET SESSION wait_timeout&#x3D;10000</span><br><span class="line">2020-09-01T07:24:52.417696Z    1056260 Query    SELECT @@SQL_MODE</span><br><span class="line">2020-09-01T07:24:52.424302Z    1056260 Query    SET @@SQL_QUOTE_SHOW_CREATE &#x3D; 1&#x2F;*!40101, @@SQL_MODE&#x3D;&#39;NO_AUTO_VALUE_ON_ZERO,ONLY_FULL_GROUP_BY&#39;*&#x2F;</span><br><span class="line">2020-09-01T07:24:52.424482Z    1056260 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T07:24:52.425539Z    1056260 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T07:24:52.425778Z    1056260 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T07:24:52.426745Z    1056260 Query    show variables like &#39;innodb_rollback_on_timeout&#39;</span><br><span class="line">2020-09-01T07:24:52.427632Z    1056260 Query    &#x2F;*!40101 SET @OLD_SQL_MODE :&#x3D; @@SQL_MODE, @@SQL_MODE :&#x3D; &#39;&#39;, @OLD_QUOTE :&#x3D; @@SQL_QUOTE_SHOW_CREATE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; 1 *&#x2F;</span><br><span class="line">2020-09-01T07:24:52.427694Z    1056260 Query    USE &#96;qixin&#96;</span><br><span class="line">2020-09-01T07:24:52.427761Z    1056260 Query    SHOW CREATE TABLE &#96;qixin&#96;.&#96;table_demo1_history1&#96;</span><br><span class="line">2020-09-01T07:24:52.427882Z    1056260 Query    &#x2F;*!40101 SET @@SQL_MODE :&#x3D; @OLD_SQL_MODE, @@SQL_QUOTE_SHOW_CREATE :&#x3D; @OLD_QUOTE *&#x2F;</span><br><span class="line">2020-09-01T07:24:52.428089Z    1056259 Query    SHOW VARIABLES LIKE &#39;wsrep_on&#39;</span><br><span class="line">2020-09-01T07:24:52.429419Z    1056259 Query    SHOW VARIABLES LIKE &#39;wsrep_on&#39;</span><br><span class="line">2020-09-01T07:24:52.430896Z    1056259 Query    SHOW VARIABLES LIKE &#39;version%&#39;</span><br><span class="line">2020-09-01T07:24:52.432260Z    1056259 Query    SHOW ENGINES</span><br><span class="line">2020-09-01T07:24:52.432508Z    1056259 Query    SHOW VARIABLES LIKE &#39;innodb_version&#39;</span><br><span class="line">2020-09-01T07:24:52.434235Z    1056259 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) ORDER BY &#96;ucreatetime&#96; LIMIT 500</span><br><span class="line">2020-09-01T07:24:52.457603Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.457874Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.457909Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458142Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458169Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458394Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458420Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458640Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458665Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458881Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.458906Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459122Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459148Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459372Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459400Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459617Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459642Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459856Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.459881Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460096Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460122Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460182Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.460392Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460420Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460637Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460664Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460890Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.460917Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461134Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461160Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461379Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461404Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461617Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461642Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461856Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.461881Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462094Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462120Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462339Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462365Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462580Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462606Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462664Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.462866Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.462893Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463108Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463134Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463351Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463377Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463600Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463624Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463834Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.463858Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464068Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464091Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464309Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464336Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464552Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464577Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464791Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.464816Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465032Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465058Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465116Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.465324Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465352Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465569Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465596Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465814Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.465841Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466059Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466086Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466308Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466333Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466559Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466585Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466800Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.466825Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467048Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467076Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467296Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467323Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467540Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467567Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467628Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.467833Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.467861Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468079Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468107Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468327Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468354Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468571Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468598Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468815Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.468842Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469061Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469089Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469311Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469338Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469563Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469590Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469808Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.469835Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.470053Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.470081Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.470169Z    1056260 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;ilApsDuNwxpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history1&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T07:24:52.637221Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.637405Z    1056259 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-05 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-05 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 500</span><br><span class="line">2020-09-01T07:24:52.638412Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.638626Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.712539Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.712892Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.712952Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.713237Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.713286Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.713543Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.713577Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.713795Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.713823Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714046Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714074Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714292Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714319Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714536Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714563Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714780Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.714807Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715027Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715055Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715142Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.715343Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715371Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715602Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715628Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715842Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.715867Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716085Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716111Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716360Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716386Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716608Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716634Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716849Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.716875Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717092Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717118Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717345Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717373Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717591Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717618Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717699Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.717887Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.717915Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718137Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718165Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718382Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718409Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718634Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718662Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718878Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.718905Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719127Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719155Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719372Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719399Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719614Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719641Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719862Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.719890Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720111Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720139Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720219Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.720406Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720433Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720652Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720679Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720896Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.720923Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721144Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721172Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721391Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721418Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721643Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721671Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721888Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.721915Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722135Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722163Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722382Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722409Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722627Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722654Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.722758Z    1056260 Query    LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;pEtJXKqDTxpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history1&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br><span class="line">2020-09-01T07:24:52.763110Z    1056259 Query    SELECT &#39;pt-archiver keepalive&#39;</span><br><span class="line">2020-09-01T07:24:52.763289Z    1056259 Query    SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND ((((&#39;2020-09-09 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR (&#96;ucreatetime&#96; &gt; &#39;2020-09-09 11:51:27&#39;)))) ORDER BY &#96;ucreatetime&#96; LIMIT 500</span><br><span class="line">2020-09-01T07:24:52.763708Z    1056260 Query    commit</span><br><span class="line">2020-09-01T07:24:52.838064Z    1056259 Query    commit</span><br><span class="line">2020-09-01T07:24:52.838341Z    1056259 Quit</span><br><span class="line">2020-09-01T07:24:52.838978Z    1056260 Quit</span><br><span class="line">2020-09-01T07:24:57.837254Z    1056256 Query    SET GLOBAL general_log &#x3D; &#39;OFF&#39;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>为什么表无主键时获取不到正确的行数呢？</p>
</blockquote>
<p><code>--limit=10</code> 代表一次取出10行数据：</p>
<h2 id="有主键的表"><a href="#有主键的表" class="headerlink" title="有主键的表"></a>有主键的表</h2><p>第一步：PT工具第一步获取 source 表的主键id的最大值，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT MAX(&#96;id&#96;) FROM &#96;qixin&#96;.&#96;table_demo&#96;</span><br><span class="line">​&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">第二步：按照PT命令中指定的&#96;where过滤条件&#96; AND &#96;对主键ID的过滤&#96;，按照ID排序，取前10行,保存到临时文件中，命令如下：</span><br><span class="line"></span><br><span class="line">​&#96;&#96;&#96;sql </span><br><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) </span><br><span class="line">ORDER BY &#96;id&#96; LIMIT 10</span><br></pre></td></tr></table></figure>

<p>第三步：通过LOAD DATA LOCAL INFILE 快速加载文件到归档表table_demo_history。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;AU0TjwWDdcpt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br></pre></td></tr></table></figure>

<p>接下来就是循环第二步和第三步，直到取完所有的数据, 并加载到归档表table_demo_history。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo&#96; FORCE INDEX(&#96;PRIMARY&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND (&#96;id&#96; &lt; &#39;1000&#39;) AND ((&#96;id&#96; &gt; &#39;10&#39;)) </span><br><span class="line">ORDER BY &#96;id&#96; LIMIT 10</span><br></pre></td></tr></table></figure>

<h2 id="无主键的表"><a href="#无主键的表" class="headerlink" title="无主键的表"></a>无主键的表</h2><p>第一步：由于没有主键，因此没有办法获取主键ID的最大值，跳过该步骤。</p>
<p>第二步：按照PT命令中指定的<code>where过滤条件</code> AND <code>对主键ID的过滤</code>，按照ID排序，取前10行,保存到临时文件中，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) </span><br><span class="line">ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br></pre></td></tr></table></figure>

<p>第三步：通过LOAD DATA LOCAL INFILE 快速加载文件到归档表table_demo_history。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD DATA LOCAL INFILE &#39;&#x2F;tmp&#x2F;0mSKYe9H_1pt-archiver&#39; INTO TABLE &#96;qixin&#96;.&#96;table_demo1_history&#96;CHARACTER SET utf8(&#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96;)</span><br></pre></td></tr></table></figure>

<p>接下来就是循环第二步和第三步，直到取完所有的数据, 并加载到归档表table_demo_history。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND</span><br><span class="line"> (</span><br><span class="line">((</span><br><span class="line">(&#39;2020-09-01 11:51:26&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR </span><br><span class="line">(&#96;ucreatetime&#96; &gt; &#39;2020-09-01 11:51:26&#39;)</span><br><span class="line">))</span><br><span class="line">) </span><br><span class="line">ORDER BY &#96;ucreatetime&#96; LIMIT 10</span><br></pre></td></tr></table></figure>

<h2 id="无主键时的过滤"><a href="#无主键时的过滤" class="headerlink" title="无主键时的过滤"></a>无主键时的过滤</h2><p>第 1 次查询条件取了 <code>ucreatetime &gt;= &#39;2020-09-01 11:51:26&#39;</code> 的 10行数据，且排序规则使用的是<code>ucreatetime</code><br>第 2 次查询条件取了 <code>ucreatetime &gt; &#39;2020-09-01 11:51:26&#39;</code> 的 10行数据，且排序规则使用的是<code>ucreatetime</code><br>第 3 次查询条件取了 <code>ucreatetime &gt; &#39;2020-09-02 11:51:26&#39;</code> 的 10行数据，且排序规则使用的是<code>ucreatetime</code><br>第 4 次查询条件取了 <code>ucreatetime &gt; &#39;2020-09-04 11:51:26&#39;</code> 的 10行数据，且排序规则使用的是<code>ucreatetime</code><br>第 n 次查询条件取了 <code>ucreatetime &gt; &#39;2020-09-xx 11:51:26&#39;</code> 的 10行数据，且排序规则使用的是<code>ucreatetime</code></p>
<p>个人理解：索引<code>idx_ucreatetime</code> 为辅助索引，内部为B+树，叶子节点存放着<code>ucreatetime</code>的所有数据</p>
<p>无主键的过滤条件中PT会使用叶子节点的值进行过滤(具体值为上一次查询的最后一个值)，并取limit 10；</p>
<p>从而导致了 <code>--limit 10</code> 只能归档90条数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@MySQL-01 14:59:  [qixin]&gt; select distinct ucreatetime from table_demo1;</span><br><span class="line">+---------------------+</span><br><span class="line">| ucreatetime         |</span><br><span class="line">+---------------------+</span><br><span class="line">| 2020-09-01 11:51:26 |</span><br><span class="line">| 2020-09-02 11:51:27 |</span><br><span class="line">| 2020-09-03 11:51:27 |</span><br><span class="line">| 2020-09-04 11:51:27 |</span><br><span class="line">| 2020-09-05 11:51:27 |</span><br><span class="line">| 2020-09-06 11:51:27 |</span><br><span class="line">| 2020-09-07 11:51:27 |</span><br><span class="line">| 2020-09-08 11:51:27 |</span><br><span class="line">| 2020-09-09 11:51:27 |</span><br><span class="line">+---------------------+</span><br><span class="line">9 rows in set (0.02 sec)</span><br></pre></td></tr></table></figure>

<p>当调整<code>limit</code>参数为 500时，PT的查询如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) ORDER BY &#96;ucreatetime&#96; LIMIT 500;</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">|  497 | 用户7   | 2020-09-04 11:51:27 |   20 |</span><br><span class="line">|  498 | 用户8   | 2020-09-04 11:51:27 |   20 |</span><br><span class="line">|  499 | 用户9   | 2020-09-04 11:51:27 |   20 |</span><br><span class="line">|  500 | 用户0   | 2020-09-05 11:51:27 |   20 |</span><br><span class="line">+------+---------+---------------------+------+</span><br><span class="line">500 rows in set (0.03 sec)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND</span><br><span class="line"> (</span><br><span class="line"> ((</span><br><span class="line">        (&#39;2020-09-05 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR </span><br><span class="line">        (&#96;ucreatetime&#96; &gt; &#39;2020-09-05 11:51:27&#39;)</span><br><span class="line"> ))</span><br><span class="line"> ) </span><br><span class="line"> ORDER BY &#96;ucreatetime&#96; LIMIT 500;</span><br><span class="line"></span><br><span class="line"># 执行结果</span><br><span class="line">|  998 | 用户8   | 2020-09-09 11:51:27 |   20 |</span><br><span class="line">|  999 | 用户9   | 2020-09-09 11:51:27 |   20 |</span><br><span class="line">| 1000 | 用户0   | 2020-09-09 11:51:27 |   20 |</span><br><span class="line">+------+---------+---------------------+------+</span><br><span class="line">401 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">SELECT &#x2F;*!40001 SQL_NO_CACHE *&#x2F; &#96;id&#96;,&#96;uname&#96;,&#96;ucreatetime&#96;,&#96;age&#96; </span><br><span class="line">FROM &#96;qixin&#96;.&#96;table_demo1&#96; FORCE INDEX(&#96;idx_ucreatetime&#96;) </span><br><span class="line">WHERE (ucreatetime &gt;&#x3D; &#39;2020-09-01 11:51:26&#39;) AND </span><br><span class="line">(</span><br><span class="line">((</span><br><span class="line">    (&#39;2020-09-09 11:51:27&#39; IS NULL AND &#96;ucreatetime&#96; IS NOT NULL) OR </span><br><span class="line">    (&#96;ucreatetime&#96; &gt; &#39;2020-09-09 11:51:27&#39;)</span><br><span class="line"> ))</span><br><span class="line"> ) </span><br><span class="line">ORDER BY &#96;ucreatetime&#96; LIMIT 500</span><br></pre></td></tr></table></figure>

<p>由此可以得出，PT在无主键的归档时，是无法保证数据正确的。建议生产中的表应规范主键。</p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>是否可以调整PT源码，使其支持无主键的表呢？</p>
<p>没有必要，让工具去支持不规范的操作是没有意义的。</p>
<blockquote>
<p><strong>pt-archiver操作的表必须有主键</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>pt-archiver</tag>
      </tags>
  </entry>
  <entry>
    <title>DataWorks增量调度任务配置</title>
    <url>/2020/08/05/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/DataWorks%E5%A2%9E%E9%87%8F%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>参考：<a href="https://help.aliyun.com/knowledge_detail/137548.html?spm=a1z3jh.13523495.0.0.689762428L6Zxe" target="_blank" rel="noopener">https://help.aliyun.com/knowledge_detail/137548.html?spm=a1z3jh.13523495.0.0.689762428L6Zxe</a></p>
</blockquote>
<h1 id="增量配置"><a href="#增量配置" class="headerlink" title="增量配置"></a>增量配置</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 源表过滤条件</span></span><br><span class="line">convert(varchar(100),[Update_Date],120)&gt;'$&#123;keys1&#125; $&#123;keys2&#125;'</span><br><span class="line">convert(varchar(100),[update_date],120)&gt;'$&#123;keys1&#125; $&#123;keys2&#125;'</span><br><span class="line"> </span><br><span class="line">每10分钟调度一次</span><br><span class="line"><span class="comment"># 自定义变量</span></span><br><span class="line">keys1=$[yyyy-mm-dd] keys2=$[hh24:mi:ss -12/24/60]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">每小时调度一次</span><br><span class="line"><span class="comment"># 自定义变量</span></span><br><span class="line">keys1=$[yyyy-mm-dd] keys2=$[hh24:mi:ss -1/24]</span><br></pre></td></tr></table></figure>

<img src="/2020/08/05/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/DataWorks%E5%A2%9E%E9%87%8F%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE/1.png" class="" title="This is an 1 image">
<img src="/2020/08/05/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/DataWorks%E5%A2%9E%E9%87%8F%E8%B0%83%E5%BA%A6%E4%BB%BB%E5%8A%A1%E9%85%8D%E7%BD%AE/2.png" class="" title="This is an 2 image">

<h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>调度资源有<code>最大线程数</code>限制，需求对象超出最大线程数，需要规划业务流。</p>
<ul>
<li>强要求按照分钟频率</li>
<li>其他按小时频率，并错开起始时间</li>
</ul>
<table>
<thead>
<tr>
<th>表名</th>
<th>opt前置库表行数</th>
<th>明珠塔表行数</th>
<th>全量迁移时长</th>
<th>全量同步是否有问题</th>
<th>数据是否异常</th>
<th>备注</th>
<th>增量同步</th>
<th>增量频率</th>
<th>增量调度起始时间</th>
<th>全量调度日期</th>
<th>全量调度时间</th>
<th>全量调度周期</th>
</tr>
</thead>
<tbody><tr>
<td>dic</td>
<td>0</td>
<td>0</td>
<td>1min</td>
<td>否</td>
<td>否</td>
<td></td>
<td>incr_2</td>
<td>1h</td>
<td>0:10</td>
<td>2020-07-28 ~ 2020-07-29</td>
<td>23:20</td>
<td>日调度</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>云数据库</category>
      </categories>
      <tags>
        <tag>DataWorks</tag>
        <tag>异构迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>01_一条SQL是如何执行的？</title>
    <url>/2020/07/01/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/01-%E4%B8%80%E6%9D%A1SQL%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="SQL语句执行的基本链路"><a href="#SQL语句执行的基本链路" class="headerlink" title="SQL语句执行的基本链路"></a>SQL语句执行的基本链路</h1><img src="/2020/07/01/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/01-%E4%B8%80%E6%9D%A1SQL%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/1.png" class="" title="This is an 1 image">

<h1 id="重要的日志模块：redo-log"><a href="#重要的日志模块：redo-log" class="headerlink" title="重要的日志模块：redo log"></a>重要的日志模块：redo log</h1><img src="/2020/07/01/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/01-%E4%B8%80%E6%9D%A1SQL%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/2.png" class="" title="This is an 2 image">
<blockquote>
<p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 <strong>crash-safe。</strong></p>
</blockquote>
<h1 id="重要的日志模块：binlog"><a href="#重要的日志模块：binlog" class="headerlink" title="重要的日志模块：binlog"></a>重要的日志模块：binlog</h1><p>这两种日志有以下三点不同:</p>
<ul>
<li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li>
<li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</li>
<li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li>
</ul>
<p><em>执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程。</em></p>
<ul>
<li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li>
<li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。- </li>
<li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</li>
<li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</li>
<li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。<img src="/2020/07/01/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/01-%E4%B8%80%E6%9D%A1SQL%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F/3.png" class="" title="This is an 3 image">


</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。这个参数我建议你设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</li>
<li>sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。这个参数我也建议你设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</li>
</ul>
]]></content>
      <categories>
        <category>MySQL实战45讲</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql5.7语句改写query_rewrite功能</title>
    <url>/2020/06/29/MySQL/mysql57%E8%AF%AD%E5%8F%A5%E6%94%B9%E5%86%99query-rewrite%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<div class="note info">
            <p>mysql&gt; insert into query_rewrite.rewrite_rules(pattern, replacement, pattern_database) values (“select * from t where id + 1 = ?”, “select * from t where id = ? - 1”, “db1”);<br>call query_rewrite.flush_rewrite_rules();</p>
          </div>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
  </entry>
  <entry>
    <title>课程开发要求</title>
    <url>/2020/06/24/%E8%AE%B2%E5%B8%88%E8%AE%A4%E8%AF%81/%E8%AF%BE%E7%A8%8B%E5%BC%80%E5%8F%91%E8%A6%81%E6%B1%82/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Aliyun讲师认证</category>
      </categories>
      <tags>
        <tag>阿里云大学</tag>
      </tags>
  </entry>
  <entry>
    <title>QuickBI数据分析云课堂基础版</title>
    <url>/2020/06/19/QuickBI%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/QuickBI%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E4%BA%91%E8%AF%BE%E5%A0%82/</url>
    <content><![CDATA[<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>欢迎加入【Quick BI数据分析云课堂】，在接下来的三周时间里，我们将共同陪伴您学习和使用Quick BI产品。<br>学贵有恒，希望您在今后运用Quick BI在数据分析工作实战生涯中游刃有余时，能够感谢曾经这么努力学习的自己！</p>
<h2 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h2><p>1.Quick BI产品概览<br>2.Quick BI快速入门<br>3.Quick BI数据源和数据建模<br>4.仪表板和常用数据图表<br>5.查询控件介绍<br>6.OLAP多维快速计算分析分享</p>
<h3 id="Quick-BI产品概览"><a href="#Quick-BI产品概览" class="headerlink" title="Quick BI产品概览"></a>Quick BI产品概览</h3><h3 id="Quick-BI快速入门"><a href="#Quick-BI快速入门" class="headerlink" title="Quick BI快速入门"></a>Quick BI快速入门</h3>

<h3 id="Quick-BI数据源和数据建模"><a href="#Quick-BI数据源和数据建模" class="headerlink" title="Quick BI数据源和数据建模"></a>Quick BI数据源和数据建模</h3><h3 id="仪表板和常用数据图表"><a href="#仪表板和常用数据图表" class="headerlink" title="仪表板和常用数据图表"></a>仪表板和常用数据图表</h3><p><a href="https://help.aliyun.com/document_detail/53408.html?spm=a2c4g.11186623.6.637.c067d0a9UoOoyL" target="_blank" rel="noopener">仪表板制作</a></p>






]]></content>
      <categories>
        <category>QuickBI数据分析</category>
      </categories>
      <tags>
        <tag>阿里云大学</tag>
      </tags>
  </entry>
  <entry>
    <title>05关-pandas基础</title>
    <url>/2020/06/18/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/05%E5%85%B3-pandas%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">pandas</a></p>
<p>模块安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pandas -i https://pypi.doubanio.com/simple/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这句话后面 -i https://pypi.doubanio.com/simple/ 表示使用豆瓣的源，这样安装会更快</span></span><br><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"><span class="meta">#</span><span class="bash">引入模块</span></span><br></pre></td></tr></table></figure>

<h2 id="主要数据结构"><a href="#主要数据结构" class="headerlink" title="主要数据结构"></a>主要数据结构</h2><ul>
<li>Series（一维数据）</li>
<li>DataFrame（二维数据）<blockquote>
<p>这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。</p>
</blockquote>
</li>
</ul>
<p><code>Series</code><br> 是一种类似于 Numpy 中一维数组的对象，它由一组任意类型的数据以及一组与之相关的数据标签（即索引）组成。举个最简单的例子：<br> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">print(pd.Series([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="number">0</span>    <span class="number">2</span></span><br><span class="line"><span class="number">1</span>    <span class="number">4</span></span><br><span class="line"><span class="number">2</span>    <span class="number">6</span></span><br><span class="line"><span class="number">3</span>    <span class="number">8</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>04关-Matplotlib实战</title>
    <url>/2020/06/18/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/04%E5%85%B3-Matplotlib%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Aliyun讲师认证</title>
    <url>/2020/06/12/%E8%AE%B2%E5%B8%88%E8%AE%A4%E8%AF%81/Aliyun%E8%AE%B2%E5%B8%88%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 熟悉打开课件过程</li>
<li><input checked="" disabled="" type="checkbox"> 熟悉课程PPT内容</li>
<li><input checked="" disabled="" type="checkbox"> 准备每页PPT讲解话术</li>
<li><input checked="" disabled="" type="checkbox"> 讲解过程随时准备回答问题</li>
</ul>
<h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><ul>
<li><p>ACA、ACE、ACP 区别 <a href="https://edu.aliyun.com/certification?spm=5176.10731491.1149155.2.6e3670d7rEzob4" target="_blank" rel="noopener">认证帮助</a><br>阿里云有一个认证体系：体系会分三个等级<br>初级是ACA，针对大学生<br>往上是ACP，专业认证针对在职人员<br>最高级是ACE， 专家级认证</p>
</li>
<li><p>地域如何选择<br>地域是机房吗？ </p>
</li>
<li><p>规格族与规格<br><a href="https://help.aliyun.com/document_detail/25378.html?spm=5176.10695662.1996646101.searchclickresult.20682bf8khalts" target="_blank" rel="noopener">规格族</a></p>
</li>
</ul>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 讲解中互动话题抛出自己完全了解的技术</li>
<li><input checked="" disabled="" type="checkbox"> 了解课程PPT的思维逻辑，根据逻辑安排语言逻辑顺序</li>
<li><input checked="" disabled="" type="checkbox"> 每页PPT内容需要承上启下讲解，左右侧结果先将细节后归类</li>
</ul>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="http://www.linux-kvm.org/page/Main_Page" target="_blank" rel="noopener">kvm</a><br><a href="https://docs.openstack.org/ussuri/" target="_blank" rel="noopener">openstack</a></p>
<div class="note info 目的">
            <p>备注：锻炼说的能力，输出的能力，争取成为团队中最会讲故事的人。</p>
          </div>]]></content>
      <categories>
        <category>Aliyun讲师认证</category>
      </categories>
      <tags>
        <tag>阿里云大学</tag>
      </tags>
  </entry>
  <entry>
    <title>03关-Matplotlib</title>
    <url>/2020/06/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/03%E5%85%B3-Matplotlib/</url>
    <content><![CDATA[<h1 id="Matplotlib-初识"><a href="#Matplotlib-初识" class="headerlink" title="Matplotlib 初识"></a>Matplotlib 初识</h1><p>帮助</p>
<p><a href="https://matplotlib.org/api/pyplot_api.html" target="_blank" rel="noopener">matplotlib.pyplot</a></p>
<img src="/2020/06/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/03%E5%85%B3-Matplotlib/1.jpg" class="" title="嵌套列表">
<img src="/2020/06/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/03%E5%85%B3-Matplotlib/2.jpg" class="" title="嵌套列表">
<img src="/2020/06/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/03%E5%85%B3-Matplotlib/3.jpg" class="" title="嵌套列表">
<img src="/2020/06/11/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/03%E5%85%B3-Matplotlib/4.jpg" class="" title="嵌套列表">

<blockquote>
<p>数据展示的目标可以把它们分为五种，分别是：趋势、比较、构成、分布和联系。</p>
</blockquote>
<ul>
<li><p>趋势：这是最常见的一种时间序列关系，关心数据如何随着时间变化，趋势类里的图表能直观反映出每年、每月、每天的变化趋势，增长、减少、上下波动还是基本不变。最常见的是折线图，它能很好地表现指标随时间呈现的趋势。</p>
</li>
<li><p>构成：主要关注每个部分占整体的比例，如果你想分析的目标诸如“份额”、“百分比”等。展示构成关系的图表类型里，最常见的就是饼图。</p>
</li>
<li><p>比较：可以展示某个维度上的排列顺序，分析某维度之间的对比是差不多，还是 “大于”、“小于”，比如分析男生和女生的身高差别。- </p>
</li>
<li><p>分布：当你关心数据集中、频率、分布时，比如根据地理位置数据，通过地图来展示不同分布特征。比较常用的图表有地图、直方图、散点图。</p>
</li>
<li><p>联系：主要查看两个变量之间是否表达出我们预期所要证明的相关关系。比如预期销售额可能随着优惠折扣的增长而增长，常用于表达“与……有关”、“随……而增长”、“随……而不同”等维度间的关系。</p>
</li>
</ul>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/HuangJingxue/apple_python/blob/master/data_analysis/matplotlib.py" target="_blank" rel="noopener">练习</a></h1>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>工作记录管理系统</title>
    <url>/2020/06/08/Python/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<div class="note info">
            <p>Flask-Admin是一个功能齐全、简单易用的Flask扩展，让你可以为Flask应用程序增加管理界面。它受django-admin包的影响，但用这样一种方式实现，开发者拥有最终应用程序的外观、感觉和功能的全部控制权。</p>
          </div>

<h1 id="重点模块"><a href="#重点模块" class="headerlink" title="重点模块"></a>重点模块</h1><table>
<thead>
<tr>
<th>模块名</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://flask-admin.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask_admin</a></td>
<td>As a micro-framework, <a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> lets you build web services with very little overhead. It offers freedom for you, the designer, to implement your project in a way that suits your particular application.</td>
</tr>
<tr>
<td><a href="https://bootswatch.com/3/" target="_blank" rel="noopener">Bootswatch</a></td>
<td>Bootswatch主题来自定义外观</td>
</tr>
<tr>
<td><a href="https://flask-sqlalchemy.palletsprojects.com/en/2.x/" target="_blank" rel="noopener">Flask-SQLAlchemy</a></td>
<td>Flask-SQLAlchemy is an extension for <a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> that adds support for <a href="https://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy</a> to your application. It aims to simplify using SQLAlchemy with Flask by providing useful defaults and extra helpers that make it easier to accomplish common tasks.</td>
</tr>
<tr>
<td><a href="https://pythonhosted.org/Flask-BabelEx/" target="_blank" rel="noopener">Flask-BabelEx</a></td>
<td>Flask-BabelEx is an extension to <a href="http://flask.pocoo.org/" target="_blank" rel="noopener">Flask</a> that adds i18n and l10n support to any Flask application with the help of <a href="http://babel.edgewall.org/" target="_blank" rel="noopener">babel</a>, <a href="http://pytz.sourceforge.net/" target="_blank" rel="noopener">pytz</a> and <a href="http://pypi.python.org/pypi/speaklater" target="_blank" rel="noopener">speaklater</a>. It has builtin support for date formatting with timezone support as well as a very simple and friendly interface to <a href="http://docs.python.org/library/gettext.html#gettext" target="_blank" rel="noopener"><code>gettext</code></a> translations.</td>
</tr>
<tr>
<td><a href="https://wtforms.readthedocs.io/en/stable/" target="_blank" rel="noopener">WTForms</a></td>
<td>With WTForms, your form field HTML can be generated for you, but we let you customize it in your templates. This allows you to maintain separation of code and presentation, and keep those messy parameters out of your python code. Because we strive for loose coupling, you should be able to do that in any templating engine you like, as well.</td>
</tr>
<tr>
<td><a href="http://www.pythondoc.com/flask-login/" target="_blank" rel="noopener">Flask-Login</a></td>
<td>Flask-Login 为 Flask 提供了用户会话管理。它处理了日常的登入，登出并且长时间记住用户的会话。</td>
</tr>
</tbody></table>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新建用户</span></span><br><span class="line">useradd myweb</span><br><span class="line">passwd myweb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新建项目目录QingYu</span></span><br><span class="line">su - myweb</span><br><span class="line">mkdir QingYu</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装软件包</span></span><br><span class="line"><span class="meta">#</span><span class="bash">从myweb用户退出，登陆为root用户后执行以下步骤：</span></span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line">pip install -upgrade pip</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装python模块flask-admin</span></span><br><span class="line">su - myweb</span><br><span class="line">cd QingYu</span><br><span class="line">vim manage.py</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">运行程序</span></span><br><span class="line">python manage.py</span><br></pre></td></tr></table></figure>

<h1 id="数据库准备"><a href="#数据库准备" class="headerlink" title="数据库准备"></a>数据库准备</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建数据库myweb</span></span><br><span class="line">mysql -e "create database myweb"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加应用程序授权</span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改root密码，应用程序将使用本地root用户的权限。如果你熟悉数据库，可以将新建一个小权限的数据库用户。</span></span><br><span class="line">mysql -uroot -pmyweb myweb -e "drop table AdminUser;"</span><br><span class="line">mysql -uroot -pmyweb myweb -e "create table user (id int primary key auto_increment,first_name varchar(100),last_name varchar(100),login varchar(80),email varchar(120),password varchar(64));"</span><br><span class="line">mysql -uroot -pmyweb myweb -e "alter table user add unique index idx_login (login);"</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过浏览器登陆访问 <a href="http://192.168.206.139:5000/admin" target="_blank" rel="noopener">http://192.168.206.139:5000/admin</a></p>
</blockquote>
<p><em>效果图如下：</em></p>
<img src="/2020/06/08/Python/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/1.jpg" class="" title="This is an 1 image">
<img src="/2020/06/08/Python/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/2.jpg" class="" title="This is an 2 image">
<img src="/2020/06/08/Python/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/3.jpg" class="" title="This is an 3 image">
<img src="/2020/06/08/Python/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/4.jpg" class="" title="This is an 4 image">
<img src="/2020/06/08/Python/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/5.jpg" class="" title="This is an 5 image">

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="https://github.com/HuangJingxue/apple_python/tree/master/QingYu" target="_blank" rel="noopener">代码</a></h2><p><strong>程序代码会持续更新</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Flaskadmin</tag>
      </tags>
  </entry>
  <entry>
    <title>02关-Numpy进阶</title>
    <url>/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<div class="note info">
            <p>嵌套列表就是列表中的元素也是列表的列表。</p>
          </div>

<h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/1.jpg" class="" title="嵌套列表">

<p><code>二维数组</code></p>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/2.jpg" class="" title="嵌套列表">

<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/3.jpg" class="" title="嵌套列表">

<p><code>三维数组</code></p>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/4.jpg" class="" title="嵌套列表">

<ul>
<li><code>ndim</code>：多维数组维度的个数。例如：二维数组的 <code>ndim</code> 为 2；</li>
<li><code>shape</code>：多维数组的形状。它是一个元组，每个元素分别表示每个维度中数组的长度。对于 m 行和 n 列的的数组，它的 <code>shape</code> 将是 <code>(m, n)</code>。因此，<code>shape</code> 元组的长度（元素个数）就是 <code>ndim</code> 的值；</li>
<li><code>size</code>：多维数组中所有元素的个数。<code>shape</code> 元组中每个元素的乘积就是 <code>size</code> 的值；</li>
<li><code>dtype</code>：多维数组中元素的类型。</li>
</ul>
<h2 id="二维数组的加减乘除"><a href="#二维数组的加减乘除" class="headerlink" title="二维数组的加减乘除"></a>二维数组的加减乘除</h2><img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/5.jpg" class="" title="二维数组的加减乘除">

<p><code>数据形状不同</code></p>
<blockquote>
<p>当运算中的 2 个数组的形状不同时，numpy 将自动触发广播机制，它具体的规则是：在较小维度数组的 <code>shape</code> 元组前补 1，直到两个数组的 <code>shape</code> 元组长度相同。接着将元素在值为 1 的维度上进行复制，直到两个数组的形状相同。如果无法使两个数组的形状相同，则会抛出 <code>ValueError: operands could not be broadcast together</code> 的异常。</p>
</blockquote>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/6.jpg" class="" title="二维数组的加减乘除">

<h2 id="二维数组的通用方法"><a href="#二维数组的通用方法" class="headerlink" title="二维数组的通用方法"></a>二维数组的通用方法</h2><img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/7.jpg" class="" title="二维数组的加减乘除">

<p>什么是 轴？ <span class="hide-inline"><a class="hide-button button--primary button--animated" style="background-color: #FF7242;color: #fff">点击一下
  </a><span class="hide-content">轴（axis）。轴和维度的概念是类似的，一维数组有 1 个轴，二维数组有 2 个轴，三维数组有 3 个轴</span></span></p>
<blockquote>
<p>在一维数组中，<code>axis=0</code> 就代表着它唯一的轴；二维数组中 <code>axis=0</code> 和 <code>axis=1</code> 代表其中的行轴和列轴；在三维数组中，<code>axis=0</code>、<code>axis=1</code> 和 <code>axis=2</code> 分别代表对应的三条轴。</p>
</blockquote>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/8.jpg" class="" title="二维数组axis">

<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/9.jpg" class="" title="二维数组axis">

<h2 id="二维数组的索引和分片"><a href="#二维数组的索引和分片" class="headerlink" title="二维数组的索引和分片"></a>二维数组的索引和分片</h2><p><code>data[m, n]</code>其中 <code>data</code> 是二维数组，<code>m</code> 是行索引或分片，<code>n</code> 是列索引或分片。</p>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/10.jpg" class="" title="二维数组的索引和分片">

<p><code>布尔索引</code></p>
<p><code>and</code> 改用 <code>&amp;</code>，<code>or</code> 改用 <code>|</code>，<code>not</code> 改用 <code>~</code>，并且每个条件要用括号括起来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="comment"># 大于 3 或者小于 2</span></span><br><span class="line">print(data[(data &gt; <span class="number">3</span>) | (data &lt; <span class="number">2</span>)])</span><br><span class="line"><span class="comment"># 输出：[1 4 5 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大于 3 或者不小于 2（即大于等于 2）</span></span><br><span class="line">print(data[(data &gt; <span class="number">3</span>) | ~(data &lt; <span class="number">2</span>)])</span><br><span class="line"><span class="comment"># 输出：[2 3 4 5 6]</span></span><br></pre></td></tr></table></figure>

<h1 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h1><p>arange()、rand()、randint()、genfromtxt()</p>
<ul>
<li><code>genfromtxt()</code> 方法常用的参数有两个，分别是数据源和分隔符。</li>
</ul>
<p><code>均方误差</code></p>
<blockquote>
<p>常被作为模型的损失函数，用来预测和回归</p>
</blockquote>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/11.jpg" class="" title="均方误差">

<blockquote>
<p><code>n</code> 是数据集的个数，<code>Y_prediction</code> 是模型预测的结果集，<code>Y</code> 是实际的数据集。将预测的结果和实际的值作差后进行平方求和，最后除以数据集的个数，得到的就是均方误差。均方误差越小，说明模型预测的越准确，反之则越不准确。</p>
</blockquote>
<img src="/2020/06/05/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/02%E5%85%B3-Numpy%E8%BF%9B%E9%98%B6/12.jpg" class="" title="均方误差">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">predictions = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">labels = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">error = (<span class="number">1</span> / labels.size) * np.sum(np.square(predictions - labels))</span><br><span class="line">print(error)</span><br><span class="line"><span class="comment"># 输出：1.6666666666666665</span></span><br></pre></td></tr></table></figure>

<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/HuangJingxue/apple_python/blob/master/data_analysis/numpy2.py" target="_blank" rel="noopener">练习</a></h1>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>01关-Numpy初识</title>
    <url>/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<div class="note info">
            <p>数据分析需要三方面的知识：分析工具、统计学知识、行业基本知识。</p>
          </div>


<h1 id="数据分析完整的过程"><a href="#数据分析完整的过程" class="headerlink" title="数据分析完整的过程"></a>数据分析完整的过程</h1><img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/1.jpg" class="" title="This is an 1 image">

<ul>
<li>第一步，分析需求，明确目标；</li>
<li>第二步，采集第一步确定的数据；</li>
<li>第三步，整理数据，也就是数据清洗；</li>
<li>第四步，分析数据，采用数学方法、统计方法等对数据进行分析操作；</li>
<li>第五步，数据可视化，将分析结果以直观的形式进行展示。</li>
</ul>
<h2 id="数据分析模块"><a href="#数据分析模块" class="headerlink" title="数据分析模块"></a>数据分析模块</h2><img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/2.jpg" class="" title="This is an 2 image">

<ul>
<li><a href="https://numpy.org/" target="_blank" rel="noopener">NumPy</a> Numerical Python是一个用于数值运算的 Python 库，专门对数值运算进行优化，最大的优势是运行高效。</li>
<li>Matplotlib 是常用的数据可视化的工具包，用来绘制各种图表，更好地展示数据。</li>
<li><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 是 Python 重要的数据分析工具包，也是目前非常流行的 Python 数据分析工具。</li>
<li><a href="https://github.com/pydata/pandas-datareader" target="_blank" rel="noopener">pandas-datareader</a></li>
</ul>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><div class="note info">
            <p>NumPy 中最重要的对象是<strong>多维数组（ndarray）</strong>，ndarray 是 N-dimensional array，即 N 维数组。</p>
          </div>

<p>创建数组 <span class="hide-inline"><a class="hide-button button--primary button--animated" style="background-color: #FF7242;color: #fff">点击一下
  </a><span class="hide-content">np.array()</span></span><br>生成元素全为0的多维数组<code>默认生成的是浮点数</code> <span class="hide-inline"><a class="hide-button button--primary button--animated" style="">点击一下
  </a><span class="hide-content">np.ones()</span></span><br>生成元素全为1的多维数组<code>默认生成的是浮点数</code> <span class="hide-inline"><a class="hide-button button--primary button--animated" style="background-color: #FF7242;color: #fff">点击一下
  </a><span class="hide-content">np.zeros()</span></span></p>
<h3 id="多维数组的加减乘除"><a href="#多维数组的加减乘除" class="headerlink" title="多维数组的加减乘除"></a>多维数组的加减乘除</h3><img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/3.jpg" class="" title="多维数组的加减乘除">
<img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/4.jpg" class="" title="多维数组的加减乘除">
<img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/5.jpg" class="" title="多维数组直接和数字进行计算">
<img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/6.jpg" class="" title="多维数组直接和数字进行计算">

<p>广播是什么？ <span class="hide-inline"><a class="hide-button button--primary button--animated" style="background-color: #FF7242;color: #fff">查看答案
  </a><span class="hide-content">多维数组和数字的四则运算会作用在数组中的每个元素上，这在 numpy 中被称为 广播（Broadcasting)</span></span><br>矢量化是什么？ <span class="hide-inline"><a class="hide-button button--primary button--animated" style="">查看答案
  </a><span class="hide-content">numpy 中这种不用编写循环就可以对数据进行批量运算的方式叫做 矢量化</span></span></p>
<img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/7.jpg" class="" title="多维数组索引和分片">


<h2 id="数据分析思维"><a href="#数据分析思维" class="headerlink" title="数据分析思维"></a>数据分析思维</h2><p><code>统计学</code></p>
<ul>
<li><p>集中趋势</p>
<blockquote>
<p>集中趋势所反映的是一组数据所具有的共同趋势，它代表了一组数据的总体水平。其常用指标有 平均数、中位数 和 众数。<br>中位数是指数据排序后处于中间的那个数。众数是指一组数据中出现次数最多的数。</p>
</blockquote>
</li>
<li><p>离中趋势</p>
<blockquote>
<p>离中趋势是指一组数据中各数据值以不同程度的距离偏离其中心（平均数）的趋势。其常用指标有 极差、方差 和标准差。<br>极差是一组数据的最大值减去最小值得到的，反应了数据变动的最大范围。<br>方差的计算方式是：将一组数据中的每个数减去这组数据的平均数，然后将得到的结果进行平方求和，最后再除以数据的个数。<br>而方差的平方根则是标准差。因为方差是对数据进行平方得到的，所以量纲（单位）和原数据不一致。对方差进行开根号后得到的标准差量纲和原数据一致，使用起来更方便。</p>
</blockquote>
<img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/8.jpg" class="" title="统计学函数">
<img src="/2020/06/04/Python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/01%E5%85%B3-Numpy%E5%88%9D%E8%AF%86/9.jpg" class="" title="方差公式函数">
<blockquote>
<p>公式描述：公式中M为数据的平均数，n为数据的个数，s2为方差。</p>
</blockquote>
</li>
</ul>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a><a href="https://github.com/HuangJingxue/apple_python/blob/master/data_analysis/ndarray.py" target="_blank" rel="noopener">练习</a></h2>]]></content>
      <categories>
        <category>Python数据分析</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>python3版本time模模块提示locale报错</title>
    <url>/2020/05/27/Python/python3%E7%89%88%E6%9C%ACtime%E6%A8%A1%E6%A8%A1%E5%9D%97%E6%8F%90%E7%A4%BAlocale%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/nisen/p/6101196.html" target="_blank" rel="noopener">locale帮助</a></p>
<div class="note warning">
            <p>print(time.strftime(u’%Y年%m月%d日’,time.localtime(time.time())))<br>Traceback (most recent call last):<br>UnicodeEncodeError: ‘locale’ codec can’t encode character ‘\u5e74’ in position 2: encoding error</p>
          </div>

<div class="note success">
            <p>import locale<br>locale.setlocale(locale.LC_ALL,’en’)<br>locale.setlocale(locale.LC_CTYPE,’chinese’)<br>time.strftime(‘%Y年%m月%d日 %H:%M:%S’, time.localtime(time.time()))<br>‘2020年05月26日 18:25:41’</p>
          </div>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>杏仁核绑架</title>
    <url>/2020/05/27/%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%BD%B1%E5%93%8D%E5%8A%9B/%E6%9D%8F%E4%BB%81%E6%A0%B8%E7%BB%91%E6%9E%B6/</url>
    <content><![CDATA[<p>被别人批评在所难免，但应对批评的方式却天差地别。</p>
<ul>
<li>非合作思维会认为，批评意味着别人在指责自己、攻击自己、否定自己；</li>
</ul>
<div class="note info">
            <p>为什么会这样？这不是因为你脾气不够好，不是因为你不够成熟，这背后其实是有生理依据的——因为批评会引发我们大脑中的一场战争，这场战争的双方就是情绪和思考。<br>情绪是由大脑里的杏仁核控制的——杏仁核深藏在大脑底部，是大脑最强有力的区域之一。这个区域会简单化信息，让你说出本能的反应；而且这个区域渴望赞美，会把批评看作一种攻击。尽管你感觉不到它，但它控制着你的行为。比如心跳加速、血压升高、呼吸加快、肌肉紧张。有些研究者把它称为“杏仁核绑架”，这时候，你很容易做出一些“冲动”的事情。</p><p>好在人体很神奇，处处都有平衡。大脑有主管情绪的区域，就有主管意识和思考的区域——前额皮层。前额皮层是我们大脑里最具人类特征的部分。我们通过这个区域进行逻辑推理，它产生的反应更加稳定和持久，它代表的是思考的力量。</p><p>所以，你看到有些人不断自我进化，他们应对批评的反应很得体，不会冲动，并且最终能够达到自己的目标；而有些人就会选择反抗或者攻击，最终无法与他人合作。他们之间最大的区别是，前面这类人会在关键时刻思考是什么原因导致自己出现杏仁核绑架。他们在分析和思考情绪之后，知道了哪些情况下自己会冲动，会控制不住自己，会被杏仁核绑架。这个“看到”的过程非常重要——“放下一个东西之前，得先拿起它”。了解杏仁核绑架的过程，就是我们拿起它的过程。现在，我们可以通过练习，把它放下，在每一次情绪和思考之战爆发时，掌握更好的应对方式。</p>
          </div>

<ul>
<li>而合作思维则认为，我们双方都有基于合作的这个前提，才会在一起共事、沟通，对方的批评只是在参与我们的合作，是在发表自己的看法，而且对方可以帮我把工作优化得更好，这是一件好事。</li>
</ul>
<div class="note info">
            <p>面对批评，你可以采取以下步骤：<br>第一步：切换频道。切换到合作频道，摆脱杏仁核绑架，看到双方的目标。</p><p>第二步：问出来。你以为的只是“你以为的”，那不是事实。在合作思维的鼓励下，大胆地问出你的问题。但要注意，要提问，不要指责。</p><p>她跟丈夫刚认识几个月的时候，她觉得一切都进展顺利——她爱这个男人，觉得他就是自己的真命天子，而且她也确定这个男人也很爱自己。然而有一天晚上，他们正在约会时，她这个理想中的丈夫忽然对她说：“我需要多一点儿空间。”那个瞬间，她觉得眼前一黑，大脑一片空白，她不敢相信自己听到的。她心想：“完了，原来是我误解了我们之间的关系，是我理解错了吗？难道这段时间我只是在自作多情吗？”平静了一会儿，她鼓足勇气，问他：“你究竟是什么意思？”她战战兢兢地等着他回答，那几秒钟像是几年一样长。结果对方说的话，让卡罗尔笑了3分钟。这位男士认真地说：“我需要你往旁边坐一点儿，这样我才能坐得下。”</p><p>第三步：反馈。就提问得到的结果进行反馈，与对方得出进一步的解决方案。</p><p>最后，我想提醒你的是，应对批评是非常难的，因为你的反应首先会受生理反应影响，批评会引发你大脑里的一场战争，而且是有逻辑、有意识的你跟情绪化、潜意识下的你之间的战争。所以，如果你现在做不到，不要沮丧，因为这真的很难。但这也正是此过程的价值所在——通过练习，一次次自我赋能，直到遇见更好的自己。</p>
          </div>

]]></content>
      <categories>
        <category>打造个人影响力</category>
      </categories>
  </entry>
  <entry>
    <title>合作式倾听:时代的红利属于倾听者</title>
    <url>/2020/05/26/%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%BD%B1%E5%93%8D%E5%8A%9B/%E5%90%88%E4%BD%9C%E5%BC%8F%E5%80%BE%E5%90%AC-%E6%97%B6%E4%BB%A3%E7%9A%84%E7%BA%A2%E5%88%A9%E5%B1%9E%E4%BA%8E%E5%80%BE%E5%90%AC%E8%80%85/</url>
    <content><![CDATA[<p>来自查一下，你有没有这些情况：</p>
<ul>
<li>对方还在说话，你已经开始打腹稿，准备自己的意见了。</li>
<li>对方话音还没落，你就迫不及待地发表自己的观点了。</li>
<li>在多数的谈话时间里，都是你说得多，对方说得少。</li>
<li>你说得已经足够多了，但结果常常不尽如人意。</li>
</ul>
<p>这些都反映了一种情况：很多时候，人们的倾听是“伪倾听”，是为了“说”而“听”。表面上看，他们的确是在听，但实际上他们是在想：“什么时候才能轮到我说？</p>
<p>”这种倾听给人的感觉并不好。我把这种人形容为机关枪式的倾听者——他们基本是在“等”着你说完，你一闭嘴，他马上像机关枪一样把话“射”过来。这会让你觉得，“我刚才都白说了，因为你根本不在意，满脑子就是自己要说什么”。</p>
<p>这是种什么感觉呢？“我满怀期待地向你开放自己，以为你有兴趣听一听，但你只是装模作样地听了一下，然后就把焦点转移到了自己身上。我觉得一下子被你‘堵’回来了。</p>
<p>”为了避免出现低质量的倾听，这里分享给大家两种方法：比较基础的“反应式倾听”和更高阶的“行动式倾听”。</p>
]]></content>
      <categories>
        <category>打造个人影响力</category>
      </categories>
  </entry>
  <entry>
    <title>拥有影响力的前提，是建立合作思维</title>
    <url>/2020/05/26/%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%BD%B1%E5%93%8D%E5%8A%9B/%E6%8B%A5%E6%9C%89%E5%BD%B1%E5%93%8D%E5%8A%9B%E7%9A%84%E5%89%8D%E6%8F%90%EF%BC%8C%E6%98%AF%E5%BB%BA%E7%AB%8B%E5%90%88%E4%BD%9C%E6%80%9D%E7%BB%B4/</url>
    <content><![CDATA[<p>拥有影响力的前提，是建立合作思维。<br>合作思维把合作当成前提：你真的知道别人的真实想法吗？</p>
<p>1.当你说了很多，但仍达不到目的时，很有可能不是因为你不会说，而是你不会听。<br>举例：是否经历过，职场中或生活中，你说过很多次的事情，对方总是不配合。</p>
<p>2.一味表达的姿态里，包含了两层意识：“你是错的；我是对的。”这是典型的非合作思维。它认为，只有赢得对话，才能达成合作。它把合作当成了目的，实际上却割裂了合作。</p>
<p>好的沟通不是“赢得辩论”，而是“赢得合作，成就彼此”。</p>
<p>3.合作思维是把合作当前提——“我们已经是合作关系，我要知道你是怎么想的，才能让合作顺利展开”。</p>
]]></content>
      <categories>
        <category>打造个人影响力</category>
      </categories>
  </entry>
  <entry>
    <title>获取在线MySQL实例的Binlog信息</title>
    <url>/2020/05/25/MySQL/%E8%8E%B7%E5%8F%96%E5%9C%A8%E7%BA%BFMySQL%E5%AE%9E%E4%BE%8B%E7%9A%84Binlog%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<div class="note info">
            <p>mysqlbinlog -vv -P 3306 -utaiping_admin -pxxxx -hxxxxx.mysql.rds.aliyuncs.com –read-from-remote-server –start-datetime=’2017-09-12 06:29:00’ –stop-datetime=’2017-09-12 06:30:01’ –base64-output=DECODE-ROWS mysql-bin.000634 &gt; taiping0912.binlog</p>
          </div>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL Binlog</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github Page搭建自己的轻量博客</title>
    <url>/2020/05/22/hexo/%E4%BD%BF%E7%94%A8githubPage%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%BB%E9%87%8F%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a></li>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>
<blockquote>
<p>Mac 用户</p>
<p>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <strong>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</strong> 安装命令行工具。</p>
</blockquote>
<h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><ul>
<li>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.</li>
<li>Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。</li>
<li>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code></li>
</ul>
<blockquote>
<p>Windows 用户</p>
<p>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p>
</blockquote>
<h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p>
<p>CURL:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.11&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure>



<p>Wget:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.11&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure>



<p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure>



<p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p>
<blockquote>
<p>Windows 用户</p>
<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选<strong>Add to PATH</strong>选项。<br>另外，您也可以使用<strong>Git Bash</strong>，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用<strong>Git Bash</strong>来进行操作。</p>
</blockquote>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Copy $ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><h3 id="建站操作明细"><a href="#建站操作明细" class="headerlink" title="建站操作明细"></a>建站操作明细</h3><p>搭建一个名字为blog的博客:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blogcd blognpm install</span><br></pre></td></tr></table></figure>



<h3 id="建站文件结构讲解"><a href="#建站文件结构讲解" class="headerlink" title="建站文件结构讲解"></a>建站文件结构讲解</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</span><br></pre></td></tr></table></figure>



<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</span><br></pre></td></tr></table></figure>



<h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。</p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>应用程序的信息。<a href="http://embeddedjs.com/" target="_blank" rel="noopener">EJS</a>, <a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> renderer 已默认安装，您可以自由移除。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package.json&#123;  &quot;name&quot;: &quot;hexo-site&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;private&quot;: true,  &quot;hexo&quot;: &#123;    &quot;version&quot;: &quot;&quot;  &#125;,  &quot;dependencies&quot;: &#123;    &quot;hexo&quot;: &quot;^3.0.0&quot;,    &quot;hexo-generator-archive&quot;: &quot;^0.1.0&quot;,    &quot;hexo-generator-category&quot;: &quot;^0.1.0&quot;,    &quot;hexo-generator-index&quot;: &quot;^0.1.0&quot;,    &quot;hexo-generator-tag&quot;: &quot;^0.1.0&quot;,    &quot;hexo-renderer-ejs&quot;: &quot;^0.1.0&quot;,    &quot;hexo-renderer-stylus&quot;: &quot;^0.2.0&quot;,    &quot;hexo-renderer-marked&quot;: &quot;^0.2.4&quot;,    &quot;hexo-server&quot;: &quot;^0.1.2&quot;  &#125;&#125;</span><br></pre></td></tr></table></figure>



<h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p><a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p>
<h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>资源文件夹是存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 <code>public</code> 文件夹，而其他文件会被拷贝过去。</p>
<h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p><a href="https://hexo.io/zh-cn/docs/themes" target="_blank" rel="noopener">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>您可以在 <code>_config.yml</code> 中修改大部份的配置。</p>
<h3 id="配置操作明细"><a href="#配置操作明细" class="headerlink" title="配置操作明细"></a>配置操作明细</h3><p>配置文件中主要修改了博客的语言、标题、作者、描述、时区和文件模式<code>post_asset_folder</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Hexo Configuration## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;configuration.html## Source: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo&#x2F;# Sitetitle: Booboo Wei&#39;s Blogsubtitle: Talk is cheap, show me the codedescription: 数据库工程师keywords: MySQL Linux DBA BigData Redis Pythonauthor: Booboo Weilanguage: zh-Hanstimezone: UTC# URL## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;url: http:&#x2F;&#x2F;yoursite.comroot: &#x2F;permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads&#x2F;codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: truehighlight:  enable: true  line_number: true  auto_detect: false  tab_replace:# Home page setting# path: Root path for your blogs index page. (default &#x3D; &#39;&#39;)# per_page: Posts displayed per page. (0 &#x3D; disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator:  path: &#39;&#39;  per_page: 10  order_by: -date# Category &amp; Tagdefault_category: MySQLcategory_map:tag_map:# Date &#x2F; Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http:&#x2F;&#x2F;momentjs.com&#x2F;docs&#x2F;#&#x2F;displaying&#x2F;format&#x2F;date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions## Plugins: https:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;## Themes: https:&#x2F;&#x2F;hexo.io&#x2F;themes&#x2F;theme: landscape# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.htmldeploy:  type:</span><br></pre></td></tr></table></figure>



<h3 id="配置参数讲解"><a href="#配置参数讲解" class="headerlink" title="配置参数讲解"></a>配置参数讲解</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>title</code></td>
<td align="left">网站标题</td>
</tr>
<tr>
<td align="left"><code>subtitle</code></td>
<td align="left">网站副标题</td>
</tr>
<tr>
<td align="left"><code>description</code></td>
<td align="left">网站描述</td>
</tr>
<tr>
<td align="left"><code>author</code></td>
<td align="left">您的名字</td>
</tr>
<tr>
<td align="left"><code>language</code></td>
<td align="left">网站使用的语言</td>
</tr>
<tr>
<td align="left"><code>timezone</code></td>
<td align="left">网站时区。Hexo 默认使用您电脑的时区。<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones" target="_blank" rel="noopener">时区列表</a>。比如说：<code>America/New_York</code>, <code>Japan</code>, 和 <code>UTC</code> 。</td>
</tr>
</tbody></table>
<p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p>
<h4 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>url</code></td>
<td align="left">网址</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>root</code></td>
<td align="left">网站根目录</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>permalink</code></td>
<td align="left">文章的 <a href="https://hexo.io/zh-cn/docs/permalinks" target="_blank" rel="noopener">永久链接</a> 格式</td>
<td align="left"><code>:year/:month/:day/:title/</code></td>
</tr>
<tr>
<td align="left"><code>permalink_defaults</code></td>
<td align="left">永久链接中各部分的默认值</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>网站存放在子目录</p>
<p>如果您的网站存放在子目录中，例如 <code>http://yoursite.com/blog</code>，则请将您的 <code>url</code> 设为 <code>http://yoursite.com/blog</code> 并把 <code>root</code> 设为 <code>/blog/</code>。</p>
</blockquote>
<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>source_dir</code></td>
<td align="left">资源文件夹，这个文件夹用来存放内容。</td>
<td align="left"><code>source</code></td>
</tr>
<tr>
<td align="left"><code>public_dir</code></td>
<td align="left">公共文件夹，这个文件夹用于存放生成的站点文件。</td>
<td align="left"><code>public</code></td>
</tr>
<tr>
<td align="left"><code>tag_dir</code></td>
<td align="left">标签文件夹</td>
<td align="left"><code>tags</code></td>
</tr>
<tr>
<td align="left"><code>archive_dir</code></td>
<td align="left">归档文件夹</td>
<td align="left"><code>archives</code></td>
</tr>
<tr>
<td align="left"><code>category_dir</code></td>
<td align="left">分类文件夹</td>
<td align="left"><code>categories</code></td>
</tr>
<tr>
<td align="left"><code>code_dir</code></td>
<td align="left">Include code 文件夹</td>
<td align="left"><code>downloads/code</code></td>
</tr>
<tr>
<td align="left"><code>i18n_dir</code></td>
<td align="left">国际化（i18n）文件夹</td>
<td align="left"><code>:lang</code></td>
</tr>
<tr>
<td align="left"><code>skip_render</code></td>
<td align="left">跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob" target="_blank" rel="noopener">glob 表达式</a>来匹配路径。</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>提示</p>
<p>如果您刚刚开始接触Hexo，通常没有必要修改这一部分的值。</p>
</blockquote>
<h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>new_post_name</code></td>
<td align="left">新文章的文件名称</td>
<td align="left">:title.md</td>
</tr>
<tr>
<td align="left"><code>default_layout</code></td>
<td align="left">预设布局</td>
<td align="left">post</td>
</tr>
<tr>
<td align="left"><code>auto_spacing</code></td>
<td align="left">在中文和英文之间加入空格</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>titlecase</code></td>
<td align="left">把标题转换为 title case</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>external_link</code></td>
<td align="left">在新标签中打开链接</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>filename_case</code></td>
<td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left"><code>render_drafts</code></td>
<td align="left">显示草稿</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>post_asset_folder</code></td>
<td align="left">启动 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">Asset 文件夹</a></td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>relative_link</code></td>
<td align="left">把链接改为与根目录的相对位址</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left"><code>future</code></td>
<td align="left">显示未来的文章</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left"><code>highlight</code></td>
<td align="left">代码块的设置</td>
<td align="left"></td>
</tr>
</tbody></table>
<blockquote>
<p>相对地址</p>
<p>默认情况下，Hexo生成的超链接都是绝对地址。例如，如果您的网站域名为<code>example.com</code>,您有一篇文章名为<code>hello</code>，那么绝对链接可能像这样：<code>http://example.com/hello.html</code>，它是<strong>绝对</strong>于域名的。相对链接像这样：<code>/hello.html</code>，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p>
</blockquote>
<h4 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>default_category</code></td>
<td align="left">默认分类</td>
<td align="left"><code>uncategorized</code></td>
</tr>
<tr>
<td align="left"><code>category_map</code></td>
<td align="left">分类别名</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>tag_map</code></td>
<td align="left">标签别名</td>
<td align="left"></td>
</tr>
</tbody></table>
<h4 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h4><p>Hexo 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>date_format</code></td>
<td align="left">日期格式</td>
<td align="left"><code>YYYY-MM-DD</code></td>
</tr>
<tr>
<td align="left"><code>time_format</code></td>
<td align="left">时间格式</td>
<td align="left"><code>H:mm:ss</code></td>
</tr>
</tbody></table>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>per_page</code></td>
<td align="left">每页显示的文章量 (0 = 关闭分页功能)</td>
<td align="left"><code>10</code></td>
</tr>
<tr>
<td align="left"><code>pagination_dir</code></td>
<td align="left">分页目录</td>
<td align="left"><code>page</code></td>
</tr>
</tbody></table>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>theme</code></td>
<td align="left">当前主题名称。值为<code>false</code>时禁用主题</td>
</tr>
<tr>
<td align="left"><code>deploy</code></td>
<td align="left">部署部分的设置</td>
</tr>
</tbody></table>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="指令操作明细"><a href="#指令操作明细" class="headerlink" title="指令操作明细"></a>指令操作明细</h3><p>在上一步基本配置后，我们可以在本地启动我们的博客网站了。具体操作如下：</p>
<p>打开git bash，执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure>



<p>该命令会在blog/source/_post/目录中创建一个文件和一个同名的目录：</p>
<ul>
<li>文件：<code>我的第一篇文章.md</code></li>
<li>目录：<code>我的第一篇文章</code></li>
</ul>
<p>目录用于存放图片，这样将来在网页中才能通过markdown的语法调用图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &#39;我的第一篇文章&#39;INFO  Created: ~\Desktop\jigouyun_Git\个人项目\doc-share\source\_posts\我的第一篇文章.mdrgwei@DESKTOP-G9S0U3G MINGW64 ~&#x2F;Desktop&#x2F;jigouyun_Git&#x2F;个人项目&#x2F;doc-share&#x2F;source&#x2F;_posts$ ll 我的*-rw-r--r-- 1 rgwei 197121 69 11月 27 10:20 我的第一篇文章.md我的第一篇文章:total 0</span><br></pre></td></tr></table></figure>



<p>接下来就可以通过markdown的编辑器编辑你的文章。</p>
<h3 id="指令讲解"><a href="#指令讲解" class="headerlink" title="指令讲解"></a>指令讲解</h3><h4 id="init"><a href="#init" class="headerlink" title="init"></a>init</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>



<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>



<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>



<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>



<h4 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>



<p>发表草稿。</p>
<h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>



<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>



<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>



<h4 id="render"><a href="#render" class="headerlink" title="render"></a>render</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>



<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h4 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure>



<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration" target="_blank" rel="noopener">迁移内容</a>。</p>
<h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>



<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure>



<p>列出网站资料。</p>
<h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>



<p>显示 Hexo 版本。</p>
<h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><h5 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --safe</span><br></pre></td></tr></table></figure>



<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h5 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --debug</span><br></pre></td></tr></table></figure>



<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new" target="_blank" rel="noopener">提交调试信息到 GitHub</a>。</p>
<h5 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --silent</span><br></pre></td></tr></table></figure>



<p>隐藏终端信息。</p>
<h5 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --config custom.yml</span><br></pre></td></tr></table></figure>



<p>自定义配置文件的路径，执行后将不再使用 <code>_config.yml</code>。</p>
<h5 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>



<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h5 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd &#x2F;path&#x2F;to&#x2F;cwd</span><br></pre></td></tr></table></figure>



<p>自定义当前工作目录（Current working directory）的路径。</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>稍微与markdown不同的是，我们必须在文章的开头加一些标识，才能够做到给文章分类和打标签的功能。</p>
<p>首先新建一个文章<code>hexo new &quot;CPU飙高故障排查&quot;</code></p>
<p>然后我们修改<code>CPU飙高故障排查.md</code>的文章如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---title: CPU飙高故障排查date: 2018-01-17 14:11:01categories:- AIA友邦tags:- 云数据库 RDS MySQL 版- 数据库CPU故障---## 故障描述2018-01-16 21点左右 &#96;prod-mysql01&#96;数据实例的CPU100% ， 阿里的监控图也没有显示了，后台阿里建议做主从切换，切换后数据库慢慢的恢复了， 现在需要找出故障原因。## 排查过程从监控图中可以看到，CPU飙高的事件段为：&#96;2018-01-16 21:00:00 &#96;左右</span><br></pre></td></tr></table></figure>



<p>文章的头部叫做”Front-matter“以 <code>---</code> 分隔的区域</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---title: CPU飙高故障排查date: 2018-01-17 14:11:01categories:- AIA友邦tags:- 云数据库 RDS MySQL 版- 数据库CPU故障---</span><br></pre></td></tr></table></figure>



<ul>
<li>categories：建议只由一个</li>
<li>tags：可以由多个</li>
</ul>
<h2 id="生成html页面"><a href="#生成html页面" class="headerlink" title="生成html页面"></a>生成html页面</h2><p>使用 Hexo 生成静态文件快速而且简单。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate或者$ hexo g</span><br></pre></td></tr></table></figure>



<p>因为我们是本地部署，因此不用执行后续的动作。</p>
<h2 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h2><p>Hexo 3.0 把服务器独立成了个别模块，您必须先安装 <a href="https://github.com/hexojs/hexo-server" target="_blank" rel="noopener">hexo-server</a> 才能使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>



<p>安装完成后，输入以下命令以启动服务器，您的网站会在 <code>http://localhost:4000</code> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>



<p>如果您想要更改端口，或是在执行时遇到了 <code>EADDRINUSE</code> 错误，可以在执行时使用 <code>-p</code> 选项指定其他端口，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>



<h3 id="静态模式"><a href="#静态模式" class="headerlink" title="静态模式"></a>静态模式</h3><p>在静态模式下，服务器只处理 <code>public</code> 文件夹内的文件，而不会处理文件变动，在执行时，您应该先自行执行 <code>hexo generate</code>，此模式通常用于生产环境（production mode）下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -s</span><br></pre></td></tr></table></figure>



<h3 id="自定义-IP"><a href="#自定义-IP" class="headerlink" title="自定义 IP"></a>自定义 IP</h3><p>服务器默认运行在 <code>0.0.0.0</code>，您可以覆盖默认的 IP 设置，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo server -i 192.168.1.1</span><br></pre></td></tr></table></figure>



<p>指定这个参数后，您就只能通过该IP才能访问站点。例如，对于一台使用无线网络的笔记本电脑，除了指向本机的<code>127.0.0.1</code>外，通常还有一个<code>192.168.*.*</code>的局域网IP，如果像上面那样使用<code>-i</code>参数，就不能用<code>127.0.0.1</code>来访问站点了。对于有公网IP的主机，如果您指定一个局域网IP作为<code>-i</code>参数的值，那么就无法通过公网来访问站点。</p>
<h2 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h2><p><a href="http://pow.cx/" target="_blank" rel="noopener">Pow</a> 是一个 Mac 系统上的零配置 Rack 服务器，它也可以作为一个简单易用的静态文件服务器来使用。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ curl get.pow.cx | sh</span><br></pre></td></tr></table></figure>



<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在 <code>~/.pow</code> 文件夹建立链接（symlink）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ~&#x2F;.pow$ ln -s &#x2F;path&#x2F;to&#x2F;myapp</span><br></pre></td></tr></table></figure>



<p>您的网站将会在 <code>http://myapp.dev</code> 下运行，网址根据链接名称而定。</p>
<h2 id="部署在Github"><a href="#部署在Github" class="headerlink" title="部署在Github"></a>部署在Github</h2><p>如果需要部署在github上面，请参见<a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+Github一步步搭建属于自己的博客（基础）</a></p>
<h2 id="修改博客模板为Next"><a href="#修改博客模板为Next" class="headerlink" title="修改博客模板为Next"></a>修改博客模板为Next</h2><p>如果需要修改博客模板为Next，请参见<a href="https://www.jianshu.com/p/1f8107a8778c" target="_blank" rel="noopener">hexo搭建个人博客–NexT主题优化</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次datatime类型字段变身记</title>
    <url>/2020/05/22/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%B0%E4%B8%80%E6%AC%A1datatime%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%8F%98%E8%BA%AB%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h1><h2 id="案件回顾"><a href="#案件回顾" class="headerlink" title="案件回顾"></a>案件回顾</h2><ul>
<li>某著名保险企业邮件一条DTS链路故障，报错信息显示目标库的对应表不存在</li>
<li>链路是整库同步，支持源库创建表后，目标库会同步创建表</li>
<li>请我方协助排查原因并修复故障</li>
</ul>
<blockquote>
<p>先介绍一下数据表情况，因为涉及到内部真实的数据，所以表结构和日志都做了脱敏操作，但不会影响具体的分析。</p>
</blockquote>
<p>信息详情</p>
<table>
<thead>
<tr>
<th align="left">信息</th>
<th align="left">内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">故障时间点</td>
<td align="left">2020-05-20 10:33:50</td>
</tr>
<tr>
<td align="left">DTS链路名称</td>
<td align="left">Polardb 5.6-&gt;RDS for MySQL5.7</td>
</tr>
<tr>
<td align="left">DTS同步失败报错内容</td>
<td align="left">DTS-071001: the Table cds.plog Information Loaded failed in Target DB. cause by [com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException:Table ‘cds.plog’ doesn’t exist] About more information in [<a href="https://yq.aliyun.com/articles/505378]" target="_blank" rel="noopener">https://yq.aliyun.com/articles/505378]</a>.</td>
</tr>
<tr>
<td align="left">同步粒度</td>
<td align="left">整库同步</td>
</tr>
<tr>
<td align="left">源数据库名称</td>
<td align="left">PDB</td>
</tr>
<tr>
<td align="left">源数据库类型</td>
<td align="left">PolarDB for MySQL 5.6</td>
</tr>
<tr>
<td align="left">源库同步用户/权限</td>
<td align="left">i_read/只读</td>
</tr>
<tr>
<td align="left">目标数据库名称</td>
<td align="left">RDS</td>
</tr>
<tr>
<td align="left">目标数据库类型</td>
<td align="left">RDS for MySQL 5.7</td>
</tr>
<tr>
<td align="left">目标库同步用户/权限</td>
<td align="left">e_dev/读写</td>
</tr>
</tbody></table>
<h1 id="排障过程"><a href="#排障过程" class="headerlink" title="排障过程"></a>排障过程</h1><h2 id="阶段一：怀疑人为因素造成"><a href="#阶段一：怀疑人为因素造成" class="headerlink" title="阶段一：怀疑人为因素造成"></a>阶段一：怀疑人为因素造成</h2><ul>
<li>解析故障时间段源目标库的 binlog 来验证</li>
<li>下载目标数据库对应时间段的binlog → mysql-bin.000498，并通过mysqlbinlog -vv 的方式对日志进行解析</li>
</ul>
<p>目标库 binlog 解析结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COMMIT</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 8993767</span></span><br><span class="line"><span class="comment">#200520 10:30:11 server id 2278327273  end_log_pos 8993832 CRC32 0xeb1056ff     GTID    last_committed=2005     sequence_number=2006    rbr_only=no</span></span><br><span class="line"><span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'9669d21f-7e11-11ea-bdd0-6c92bf5c9bf2:6704774'</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 8993832</span></span><br><span class="line"><span class="comment">#200520 10:30:11 server id 2278327273  end_log_pos 8993973 CRC32 0xa980631b     Query   thread_id=1653742       exec_time=0     error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`cloudods`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1589941811</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.foreign_key_checks=<span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.sql_mode=<span class="number">0</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb4 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.character_set_client=<span class="number">45</span>,@@session.collation_connection=<span class="number">45</span>,@@session.collation_server=<span class="number">33</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`plog`</span> <span class="comment">/* generated by server */</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 8993973</span></span><br><span class="line"><span class="comment">#200520 10:30:20 server id 2278327273  end_log_pos 8994038 CRC32 0x9b7bb805     GTID    last_committed=2006     sequence_number=2007    rbr_only=yes</span></span><br><span class="line"><span class="comment">/*!50718 SET TRANSACTION ISOLATION LEVEL READ COMMITTED*/</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'9669d21f-7e11-11ea-bdd0-6c92bf5c9bf2:6704775'</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 8994038</span></span><br><span class="line"><span class="comment">#200520 10:30:20 server id 2278327273  end_log_pos 8994106 CRC32 0x84aeabab     Query   thread_id=1273498       exec_time=0     error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1589941820</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 8994106</span></span><br><span class="line"><span class="comment">#200520 10:30:20 server id 2278327273  end_log_pos 8994276 CRC32 0x5d226504     Table_map: `is`.`sys_userinfo` mapped to number 1362</span></span><br><span class="line"><span class="comment"># at 8994276</span></span><br><span class="line"><span class="comment">#200520 10:30:20 server id 2278327273  end_log_pos 8994893 CRC32 0x43a6caee     Delete_rows: table id 1362 flags: STMT_END_F</span></span><br><span class="line"> </span><br><span class="line">BINLOG '</span><br><span class="line">PJbEXhPpg8yHqgAAAOQ9iQAAAFIFAAAAAAEADGlzcF9tYWluZGJfcwAMc3lzX3VzZXJpbmZvACoI</span><br><span class="line">Dw8PDw8PDw8PDw8SDw8DAwMDDxISCPwSAw8PEhIPDw8SEg8PDw8PDw89YAADAAMA7gIwADAANgAY</span><br><span class="line">AFgCYABgAAADAIABAwAAAAIAlgBgAAAA/QJYAlgCAAAeAP0C/QL9Av0CPAADAP7/////AwRlIl0=</span><br><span class="line">PJbEXhnpg8yHaQIAAE1AiQAAAFIFAAAAAAMAKv///////8BYAACA/LEIAAAAAAAACTAwMDAxNjk3</span><br><span class="line">MQFBATEhAOacseWLpOWNjiAgICAgICAgICAgICAgICAgICAgICAgIAROVUxMBDA5ODYEAEZFMDEJ</span><br><span class="line">RzAwMDAwNDA5ATABAAAAAQAAAAEAAAABAAAAAUGZpG4AAJmknQSyAAAAAAAAAADKAHtBU0lUVTpD</span><br><span class="line">TSxFQUZDUjowMDAwMDM0MjEsQ0hBTk5FTDpBZ2VuY3l9LXsiQUdUQ09EIjoiMDAwMDE2OTcxICAg</span><br><span class="line">ICIsIk9GRkNPRCI6IkZFMDEiLCJBR1lDT0QiOiJHMDAwMDA0MDkiLCJyb3dfbnVtYmVyIjo5NSwi</span><br><span class="line">Q09OVFlQRSI6Ik0xIiwiaW5pUHdkIjoiMTExMTExMTEiLCJBR1ROQU1FIjoi5pyx5Yuk5Y2OICAg</span><br><span class="line">ICAgICAgICAgICAgICAgICAgICAgIn2ZpgcaagAAAAAGQWdlbmN5CDExMDMwNTM3mZ3lBKiZpmil</span><br><span class="line">lAIAQ00IADExMTExMTExGABSWU96dm9Vd3JiaEJBeWwxNnhxLzRRPT2ZpmimRpmmaKZGA0lTUEwA</span><br><span class="line">MDdFNDAwMDUwMDE0MDAwQTAwMTYwMDE2MEI4MEYyNDAwMDAwMDAxRDAwMDBBRkI0MDAwMDM0MUEw</span><br><span class="line">MDA2MDAwMDAwMDEwMDAwMDAwMCIAOTIwMDAwMDA0MzQ4NEY1NDMzNTIzODQzNTM1MTRDMzEzMRQA</span><br><span class="line">MDAwMEFGQjQwMDAwMzQxQTAwMDYUMjAyMDA1MjAxMDIyMjIxOTMwMDABSe7KpkM=</span><br><span class="line">'<span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">### DELETE FROM `isp_maindb_s`.`sys_userinfo`</span></span><br><span class="line"><span class="comment">### WHERE</span></span><br><span class="line"><span class="comment">###   @1=2225 /* LONGINT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line"><span class="comment">###   @2='000016971' /* VARSTRING(96) meta=96 nullable=1 is_null=0 */</span></span><br><span class="line"><span class="comment">###   @3='A' /* VARSTRING(3) meta=3 nullable=1 is_null=0 */</span></span><br><span class="line"><span class="comment">###   @4='1' /* VARSTRING(3) meta=3 nullable=1 is_null=0 */</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>发现SQL：DROP TABLE IF EXISTS <code>plog</code> /* generated by server */</p>
<p>执行时间：200520 10:30:11</p>
<p>由于该DROP动作，无论库中是否存在该表，binlog均会记录，因此想何时该DROP动作在建表之后</p>
</blockquote>
<p>从源库information_schema.tables获取表的创建时间</p>
<img src="/2020/05/22/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%B0%E4%B8%80%E6%AC%A1datatime%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%8F%98%E8%BA%AB%E8%AE%B0/1.png" class="" title="This is an 1 image">
<blockquote>
<p>与DROP的时间一致</p>
<p><strong>因后来证实，当 alter 表时，create_time 字段会被更新；增删改查表时，update_time字段会被更新；truncate表时，时间字段不被更新</strong></p>
<p>因此怀疑该时间不够准确，决定从PolarDB获取对应时间段的binlog日志，查看该时间是否是CREATE TABLE的时间</p>
</blockquote>
<p>由于<strong>PolarDB不支持直接下载binlog</strong>需要通过客户端连接的方式把binlog日志解析到本地</p>
<p>通过客户端连接获取binlog的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqlbinlog -vv -P 3306 -uxxxx -pxxxx -hxxxx.mysql.rds.aliyuncs.com --read-from-remote-server --start-datetime='2020-05-20 09:00:00' --stop-datetime='2020-05-20 11:00:00' --base64-output=DECODE-ROWS mysql-bin.000xxx &gt; xxxlog.sql</span><br></pre></td></tr></table></figure>

<blockquote>
<p>遇到报错的情况下，需检查mysqlbinlog版本是否正确</p>
</blockquote>
<p>源端数据库binlog内容</p>
<p>源库故障时间 binlog 解析结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># at 398730036</span></span><br><span class="line"><span class="comment">#200520 10:30:10 server id 9793953  end_log_pos 398730084 CRC32 0x42791024      GTID    last_committed=0        sequence_number=0</span></span><br><span class="line"><span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'e1ecc4a7-f9fa-11e9-ad35-506b4b478fa4:107546949'</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 398730084</span></span><br><span class="line"><span class="comment">#200520 10:30:10 server id 9793953  end_log_pos 398730225 CRC32 0x28099038      Query   thread_id=1749351       exec_time=0     error_code=0</span></span><br><span class="line"><span class="keyword">use</span> <span class="string">`cloudods`</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1589941810</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.character_set_client=<span class="number">33</span>,@@session.collation_connection=<span class="number">33</span>,@@session.collation_server=<span class="number">33</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`plog`</span> <span class="comment">/* generated by server */</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 398730225</span></span><br><span class="line"><span class="comment">#200520 10:30:11 server id 9793953  end_log_pos 398730273 CRC32 0x699cf5ca      GTID    last_committed=0        sequence_number=0</span></span><br><span class="line"><span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'e1ecc4a7-f9fa-11e9-ad35-506b4b478fa4:107546950'</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 398730273</span></span><br><span class="line"><span class="comment">#200520 10:30:11 server id 9793953  end_log_pos 398731371 CRC32 0xe7281576      Query   thread_id=1749353       exec_time=0     error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1589941811</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment">/*!\C utf8mb4 */</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">SET</span> @@session.character_set_client=<span class="number">45</span>,@@session.collation_connection=<span class="number">45</span>,@@session.collation_server=<span class="number">33</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`cds`</span>.<span class="string">`plog`</span> (^M</span><br><span class="line">  <span class="string">`co`</span> <span class="built_in">varchar</span>(<span class="number">4</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,^M</span><br><span class="line">  <span class="string">`polnum`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,^M</span><br><span class="line">  <span class="string">`code`</span> <span class="built_in">varchar</span>(<span class="number">5</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`msg`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`lstupdtime`</span> datetime(<span class="number">6</span>) <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxrestart1`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxrestart2`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxuow`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxuser`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxtimestamp`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxaction`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxcasdelind`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`dtl__capxrrn`</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  <span class="string">`inserttime`</span> <span class="built_in">timestamp</span>  ,^M</span><br><span class="line">  <span class="string">`updatetime`</span> <span class="built_in">timestamp</span>  ,^M</span><br><span class="line">  <span class="string">`srcsys`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,^M</span><br><span class="line">  primary <span class="keyword">key</span> (<span class="string">`co`</span>,<span class="string">`polnum`</span>,<span class="string">`lstupdtime`</span>)^M</span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8 <span class="keyword">collate</span>=utf8_bin</span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 398731371</span></span><br><span class="line"><span class="comment">#200520 10:30:19 server id 9793953  end_log_pos 398731419 CRC32 0x7bc1d5fb      GTID    last_committed=0        sequence_number=0</span></span><br><span class="line"><span class="keyword">SET</span> @@SESSION.GTID_NEXT= <span class="string">'e1ecc4a7-f9fa-11e9-ad35-506b4b478fa4:107546951'</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 398731419</span></span><br><span class="line"><span class="comment">#200520 10:30:19 server id 9793953  end_log_pos 398731487 CRC32 0xfbae67c6      Query   thread_id=452351        exec_time=0     error_code=0</span></span><br><span class="line"><span class="keyword">SET</span> <span class="built_in">TIMESTAMP</span>=<span class="number">1589941819</span><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="comment">/*!*/</span>;</span><br><span class="line"><span class="comment"># at 398731487</span></span><br><span class="line"><span class="comment">#200520 10:30:19 server id 9793953  end_log_pos 398731657 CRC32 0xfc6068eb      Table_map: `is`.`sys_userinfo` mapped to number 1405</span></span><br><span class="line"><span class="comment"># at 398731657</span></span><br><span class="line"><span class="comment">#200520 10:30:19 server id 9793953  end_log_pos 398732274 CRC32 0x95cb0304      Delete_rows: table id 1405 flags: STMT_END_F</span></span><br><span class="line"><span class="comment">### DELETE FROM `isp_maindb_s`.`sys_userinfo`</span></span><br><span class="line"><span class="comment">### WHERE</span></span><br><span class="line"><span class="comment">###   @1=2225 /* LONGINT meta=0 nullable=0 is_null=0 */</span></span><br><span class="line"><span class="comment">###   @2='000016971' /* VARSTRING(96) meta=96 nullable=1 is_null=0 */</span></span><br><span class="line"><span class="comment">###   @3='A' /* VARSTRING(3) meta=3 nullable=1 is_null=0 */</span></span><br><span class="line"><span class="comment">###   @4='1' /* VARSTRING(3) meta=3 nullable=1 is_null=0 */</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>获得如下发现：</p>
<ul>
<li>几乎相同的时间都有DROP TABLE的动作</li>
<li>区别是源端有CREATE TABLE的记录，而目标端没有CREATE TABLE的记录</li>
</ul>
</blockquote>
<h1 id="阶段二：怀疑DTS工具BUG"><a href="#阶段二：怀疑DTS工具BUG" class="headerlink" title="阶段二：怀疑DTS工具BUG"></a>阶段二：怀疑DTS工具BUG</h1><ul>
<li><p>由于阶段一获取的源库和目标库的 binlog 日志，推测是源库在建表的过程中，先进行了一个DROP TABLE IF EXISTS的动作，然后再CREATE TABLE</p>
</li>
<li><p>而目标库只有DROP TABLE IF EXISTS，而缺失CREATE TABLE的记录，因此怀疑是DTS少传输了CREATE TABLE的部分</p>
</li>
<li><p>向阿里方提工单协助解决此问题</p>
</li>
</ul>
<h1 id="阶段三：手动建表进行故障恢复"><a href="#阶段三：手动建表进行故障恢复" class="headerlink" title="阶段三：手动建表进行故障恢复"></a>阶段三：手动建表进行故障恢复</h1><ul>
<li><p>由于目标端是缺失了对应的表，造成的故障，因此决定通过手动在目标端创建表来解决问题</p>
</li>
<li><p>从源端SHOW CREATE TABLE获取建表语句</p>
</li>
</ul>
<p>源端 SHOW CREATE TABLE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt;show create table plog\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">       Table: plog</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`plog`</span> (</span><br><span class="line">  <span class="string">`co`</span> <span class="built_in">varchar</span>(<span class="number">4</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`polnum`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`code`</span> <span class="built_in">varchar</span>(<span class="number">5</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`msg`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`lstupdtime`</span> datetime(<span class="number">6</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00.000000'</span>,</span><br><span class="line">  <span class="string">`dtl__capxrestart1`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxrestart2`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxuow`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxuser`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxtimestamp`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxaction`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxcasdelind`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`dtl__capxrrn`</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`inserttime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`updatetime`</span> <span class="built_in">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0000-00-00 00:00:00'</span>,</span><br><span class="line">  <span class="string">`srcsys`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`co`</span>,<span class="string">`polnum`</span>,<span class="string">`lstupdtime`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_bin</span><br><span class="line">返回行数：[<span class="number">1</span>]，耗时：<span class="number">6</span> ms.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>将该建表语句复制到目标端手动创建，然后启动DTS链路</p>
<p><strong>再通过SELECT * FROM 表 来验证数据是否正常同步过来时，提示该表不存在</strong></p>
<p>刷新DTS链路信息，DTS链路报错，报错与之前一致</p>
</blockquote>
<p>多次重复上述操作，均可复现，现象反馈给阿里方，协助排查该问题</p>
<h1 id="阶段四：开启审计，查找“真凶”"><a href="#阶段四：开启审计，查找“真凶”" class="headerlink" title="阶段四：开启审计，查找“真凶”"></a>阶段四：开启审计，查找“真凶”</h1><ul>
<li>在阿里方的建议下，开启审计，查看是“谁”删除了这张表</li>
</ul>
<p>审计内容</p>
<img src="/2020/05/22/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%B0%E4%B8%80%E6%AC%A1datatime%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%8F%98%E8%BA%AB%E8%AE%B0/2.png" class="" title="This is an 2 image">

<blockquote>
<p>发现是eds_dev用户，是 DTS 同步用户，传输过来的动作是先进行 DROP 再进行创建，但创建失败</p>
<p>CREATE 之前先 DROP，就是手动创建被会失败的原因</p>
<p><strong>而 CREATE 之所以失败，根据审计的提示，失败代码：1171</strong></p>
</blockquote>
<p>查询 MySQL 的错误代码 1171</p>
<img src="/2020/05/22/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%B0%E4%B8%80%E6%AC%A1datatime%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%8F%98%E8%BA%AB%E8%AE%B0/3.png" class="" title="This is an 3 image">

<blockquote>
<p>当主键的字段属性为“允许空值”时会报出1171的错误代码 </p>
</blockquote>
<p>检查审计 CREATE TABLE 语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---目标库 CREATE TABLE 语句---</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`cds`</span>.<span class="string">`plog`</span></span><br><span class="line">( <span class="string">`co`</span> <span class="built_in">varchar</span>(<span class="number">4</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line"><span class="string">`polnum`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">''</span>,</span><br><span class="line"><span class="string">`code`</span> <span class="built_in">varchar</span>(<span class="number">5</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`msg`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`lstupdtime`</span> datetime(<span class="number">6</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxrestart1`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxrestart2`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxuow`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxuser`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxtimestamp`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxaction`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxcasdelind`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`dtl__capxrrn`</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">0</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`inserttime`</span> <span class="built_in">timestamp</span> ,</span><br><span class="line"><span class="string">`updatetime`</span> <span class="built_in">timestamp</span> ,</span><br><span class="line"><span class="string">`srcsys`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">collate</span> utf8_bin <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">primary <span class="keyword">key</span> (<span class="string">`co`</span>,<span class="string">`polnum`</span>,<span class="string">`lstupdtime`</span>)</span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8 <span class="keyword">collate</span>=utf8_bin</span><br></pre></td></tr></table></figure>

<p>发现以下问题：</p>
<ul>
<li>与之前在源库SHOW CREATE TABLE的SQL不一致</li>
<li>lstupdtime 字段属性有 default null，但后面又被包含在primary key中（引起 1171 报错）</li>
<li>与源库在 binlog 获取 CREATE TABLE 的SQL一致</li>
</ul>
<p>产生以下推测：</p>
<ul>
<li>SHOW CREATE TABLE的SQL是系统修正后的“正规”SQL</li>
<li>binlog拿到的SQL是人为输入的“原生”SQL</li>
<li>“原生”SQL在源库建表成功，在目标库执行失败，可能是版本差异引起的<br>验证版本差异：</li>
</ul>
<p>5.6 → 成功创建</p>
<img src="/2020/05/22/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%B0%E4%B8%80%E6%AC%A1datatime%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%8F%98%E8%BA%AB%E8%AE%B0/4.png" class="" title="This is an 4 image">

<p>5.7 → 报错 ERROR 1171</p>
<img src="/2020/05/22/%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93/%E8%AE%B0%E4%B8%80%E6%AC%A1datatime%E7%B1%BB%E5%9E%8B%E5%AD%97%E6%AE%B5%E5%8F%98%E8%BA%AB%E8%AE%B0/5.png" class="" title="This is an 5 image">


<p>结论</p>
<ul>
<li><p>建表语句不规范，导致DTS链路故障</p>
</li>
<li><p>在MySQL 5.6 中，当设计表时 datetime 数据类型的字段带有 default null，且设置为主键时，MySQL会自动将 default null 更正为 not null default ‘0000-00-00 00:00:00’，以满足 PRIMARY KEY 的需求</p>
</li>
<li><p>在MySQL 5.7 中，当设计表时 datetime 数据类型的字段带有 default null，且设置为主键时，MySQL遵照用户的需求（default null），与 PRIMARY KEY 冲突，因此报错 1171</p>
</li>
</ul>
<h1 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h1><h2 id="—MySQL-5-6—"><a href="#—MySQL-5-6—" class="headerlink" title="—MySQL 5.6—"></a>—MySQL 5.6—</h2><table>
<thead>
<tr>
<th align="left">SQL中字段属性（并设置为主键）</th>
<th align="left">结果</th>
<th align="left">SHOW CREATE TABLE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col_test datetime(6)</td>
<td align="left">建表成功</td>
<td align="left">col_test datetime(6) NOT NULL DEFAULT ‘0000-00-00 00:00:00.000000’</td>
</tr>
<tr>
<td align="left">col_test datetime(6) default null</td>
<td align="left">建表成功</td>
<td align="left">col_test datetime(6) NOT NULL DEFAULT ‘0000-00-00 00:00:00.000000’</td>
</tr>
<tr>
<td align="left">col_test datetime(6) not null</td>
<td align="left">建表成功</td>
<td align="left">col_test datetime(6) NOT NULL</td>
</tr>
</tbody></table>
<h2 id="—MySQL-5-7—"><a href="#—MySQL-5-7—" class="headerlink" title="—MySQL 5.7—"></a>—MySQL 5.7—</h2><table>
<thead>
<tr>
<th align="left">SQL中字段属性（并设置为主键）</th>
<th align="left">结果</th>
<th align="left">SHOW CREATE TABLE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">col_test datetime(6)</td>
<td align="left">建表成功</td>
<td align="left">col_test datetime(6) NOT NULL</td>
</tr>
<tr>
<td align="left">col_test datetime(6) default null</td>
<td align="left">建表失败</td>
<td align="left">ERROR 1171</td>
</tr>
<tr>
<td align="left">col_test datetime(6) not null</td>
<td align="left">建表成功</td>
<td align="left">col_test datetime(6) NOT NULL</td>
</tr>
</tbody></table>
<h2 id="知识延伸"><a href="#知识延伸" class="headerlink" title="知识延伸"></a>知识延伸</h2><p>explicit_defaults_for_timestamp 参数</p>
<ul>
<li>该参数只限制 timestamp 数据类型，对 datetime 无法起到限制作用</li>
<li>MySQL 5.6 需要在配置文件中修改该参数，重启服务后生效</li>
<li>MySQL 5.7 可直接修改该参数</li>
</ul>
<table>
<thead>
<tr>
<th align="left">explicit_defaults_for_timestamp</th>
<th align="left">SQL中字段属性</th>
<th align="left">SHOW CREATE TABLE</th>
</tr>
</thead>
<tbody><tr>
<td align="left">OFF / 0</td>
<td align="left">col01 timestamp col02 timestamp</td>
<td align="left">col01 timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP col01 timestamp NOT NULL DEFAULT ‘0000-00-00 00:00:00’</td>
</tr>
<tr>
<td align="left">ON / 1</td>
<td align="left">col01 timestamp col02 timestamp</td>
<td align="left">col01 timestamp NULL DEFAULT NULL col01 timestamp NULL DEFAULT NULL</td>
</tr>
</tbody></table>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><ul>
<li>由于同步链路“卡死”在当前这个建表的事务</li>
<li>因此需要将该库从同步链路中移除，然后将整库重新加入到同步链路中</li>
<li>阿里方虽然可以通过后台跳过该DDL，但有风险（可能跳过不止一个DDL）</li>
</ul>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ul>
<li><p>如何普及研发人员操作数据库的规范？</p>
</li>
<li><p>正确的互联网发布流程怎样才可以避免此类问题？</p>
</li>
</ul>
]]></content>
      <categories>
        <category>云数据库</category>
      </categories>
      <tags>
        <tag>Polardb for MySQL</tag>
        <tag>RDS for MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Git玩转三剑客-第1课-仓库初始化</title>
    <url>/2020/05/16/Git/Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC1%E8%AF%BE-%E4%BB%93%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">创建目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir git_01</span></span><br><span class="line"></span><br><span class="line">进入目录</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> git_01/</span></span><br><span class="line"></span><br><span class="line">初始化</span><br><span class="line"><span class="meta">$</span><span class="bash"> git init .</span></span><br><span class="line">Initialized empty Git repository in xxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .git/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">total 7</span><br><span class="line">-rw-r--r-- 1 Apple 197121 130 5月  15 10:33 config</span><br><span class="line">-rw-r--r-- 1 Apple 197121  73 5月  15 10:33 description</span><br><span class="line">-rw-r--r-- 1 Apple 197121  23 5月  15 10:33 HEAD</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 hooks/</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 info/</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 objects/</span><br><span class="line">drwxr-xr-x 1 Apple 197121   0 5月  15 10:33 refs/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat config</span></span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line"></span><br><span class="line">配置</span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name apple</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.mail huangjx@jiagouyun.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat config</span></span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line">		</span><br><span class="line">--global配置config文件内容没有变化</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --<span class="built_in">local</span> user.name apple</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --<span class="built_in">local</span> user.mail huangjx@jiagouyun.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat config</span></span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = false</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        symlinks = false</span><br><span class="line">        ignorecase = true</span><br><span class="line">[user]</span><br><span class="line">        name = apple</span><br><span class="line">        mail = huangjx@jiagouyun.com</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="上传文件到仓库"><a href="#上传文件到仓库" class="headerlink" title="上传文件到仓库"></a>上传文件到仓库</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">新建文件</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim xxCPU高了.md</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">-rw-r--r-- 1 Apple 197121 10 5月  15 10:38 xxCPU高了.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use "git add &lt;file&gt;..." to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        "xxCPU\351\253\230\344\272\206.md"</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use "git add" to track)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line">warning: LF will be replaced by CRLF in xxCPU高了.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line"></span><br><span class="line">Apple@DESKTOP-V8IAR5D MINGW64 /d/智能团队相关资料/08_学习内容/04_gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use "git rm --cached &lt;file&gt;..." to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   "xxCPU\351\253\230\344\272\206.md"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'新增了一个文件XX'</span></span></span><br><span class="line">[master (root-commit) e9a5c8c] 新增了一个文件XX</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 "xxCPU\351\253\230\344\272\206.md"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>

<blockquote>
<p>新增文件会先放到工作区放到git add将文件放到暂存区再放到git commit版本库</p>
</blockquote>
<h1 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57 (HEAD -&gt; master)</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:42:29 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增了一个文件XX</span><br></pre></td></tr></table></figure>

<h1 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57 (HEAD -&gt; master)</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:42:29 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增了一个文件XX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch a</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">        a</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line">[master e84f58a] 新增a</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span></span></span><br><span class="line">commit e84f58a3eff4b3b05023e005d966cdb8f835a258 (HEAD -&gt; master)</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:46:36 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增a</span><br><span class="line"></span><br><span class="line">commit e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57</span><br><span class="line">Author: apple &lt;13774437301@163.com&gt;</span><br><span class="line">Date:   Fri May 15 10:42:29 2020 +0800</span><br><span class="line"></span><br><span class="line">    新增了一个文件XX</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard e9a5c8cf5f144de7790e895e0b9fbf8bf45bbc57</span></span><br><span class="line">HEAD is now at e9a5c8c 新增了一个文件XX</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ll</span></span><br><span class="line">-rw-r--r-- 1 Apple 197121 10 5月  15 10:38 xxCPU高了.md</span><br></pre></td></tr></table></figure>

<h1 id="将git仓库备份到本地"><a href="#将git仓库备份到本地" class="headerlink" title="将git仓库备份到本地"></a>将git仓库备份到本地</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir backup_dir</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> backup_dir</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">/d/gitlab仓库1/backup_dir</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> --bare file:///d/gitlab仓库1/git_01 backup_git_01</span></span><br><span class="line">Cloning into bare repository 'backup_git_01'...</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), done.</span><br><span class="line"></span><br><span class="line">/d/gitlab仓库1/backup_dir</span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ../git_01/</span></span><br><span class="line"></span><br><span class="line">/d/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add backup_git_01 file:///gitlab仓库1/git_01/</span></span><br><span class="line"></span><br><span class="line">/d/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push --<span class="built_in">set</span>-upstream backup_git_01 master</span></span><br><span class="line">Everything up-to-date</span><br><span class="line">Branch master set up to track remote branch master from backup_git_01.</span><br></pre></td></tr></table></figure>

<h1 id="如何多地管理仓库"><a href="#如何多地管理仓库" class="headerlink" title="如何多地管理仓库"></a>如何多地管理仓库</h1><p><a href="https://help.github.com/en/github/getting-started-with-github" target="_blank" rel="noopener">github帮助</a></p>
<ul>
<li>github创建仓库<img src="/2020/05/16/Git/Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC1%E8%AF%BE-%E4%BB%93%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/1.jpg" class="" title="This is an 1 image"></li>
<li>本地仓库上传到github仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create a new repository on the command line</span><br><span class="line">echo "# git_01" &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m "first commit"</span><br><span class="line">git remote add origin git@github.com:HuangJingxue/git_01.git</span><br><span class="line">git push -u origin master</span><br><span class="line">                </span><br><span class="line">…or push an existing repository from the command line</span><br><span class="line">git remote add origin git@github.com:HuangJingxue/git_01.git</span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:HuangJingxue/git_01.git</span></span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 248 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:HuangJingxue/git_01.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本地仓库成功推送到github仓库</p>
</blockquote>
<img src="/2020/05/16/Git/Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC1%E8%AF%BE-%E4%BB%93%E5%BA%93%E5%88%9D%E5%A7%8B%E5%8C%96/2.jpg" class="" title="This is an 2 image">

<p>远程拉取github仓库更新内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim studygit.md</span></span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git add -A .</span></span><br><span class="line">warning: LF will be replaced by CRLF in studygit.md.</span><br><span class="line">The file will have its original line endings in your working directory.</span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">'add studygit'</span></span></span><br><span class="line">[master b8623c7] add studygit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 studygit.md</span><br><span class="line"></span><br><span class="line">/gitlab仓库1/git_01 (master)</span><br><span class="line"><span class="meta">$</span><span class="bash"> git push</span></span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 287 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To github.com:HuangJingxue/git_01.git</span><br><span class="line">   e9a5c8c..b8623c7  master -&gt; master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由BooBooWei操作</span><br><span class="line">cd gittest</span><br><span class="line">git clone https://github.com/HuangJingxue/git_01.git</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git玩转三剑客-第2课-分支管理</title>
    <url>/2020/05/15/Git/Git%E7%8E%A9%E8%BD%AC%E4%B8%89%E5%89%91%E5%AE%A2-%E7%AC%AC2%E8%AF%BE-%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> ssh://git@gitlab.jiagouyun.com:40022/zy-docs/pd-forethought-helps.git</span></span><br><span class="line">Cloning into 'pd-forethought-helps'...</span><br><span class="line">remote: Counting objects: 10236, done.</span><br><span class="line">remote: Compressing objects: 100% (77/77), done.</span><br><span class="line">remote: Total 10236 (delta 26), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (10236/10236), 67.68 MiB | 949.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (5016/5016), done.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* master</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看所有分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --all</span></span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/dashboard/MySQL锁监控</span><br><span class="line">  remotes/origin/dashboard/自建MariaDB监控</span><br><span class="line"></span><br><span class="line">创建分支</span><br><span class="line">git branch dashborad/自建MariaDB2监控</span><br><span class="line"></span><br><span class="line">切换分支</span><br><span class="line">git checkout dashborad/自建MariaDB2监控</span><br><span class="line"><span class="meta">#</span><span class="bash"> 当前分支所有提交完成，允许切换</span></span><br><span class="line"></span><br><span class="line">上传本地到分支仓库</span><br><span class="line">git push --set-upstream origin dashborad/自建MariaDB2监控</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">提交merge request</span><br><span class="line">初学者选择web页面上处理</span><br><span class="line"><span class="meta">#</span><span class="bash">命令方式待完善</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除分支</span><br><span class="line">git branch -d 自建MariaDB2监控</span><br><span class="line"><span class="meta">#</span><span class="bash"> web页面上也点击清除</span></span><br></pre></td></tr></table></figure>

<h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><ul>
<li>Pycharm管理git仓库</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>开源工具MyFlash</title>
    <url>/2020/05/12/MySQL/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7MyFlash/</url>
    <content><![CDATA[<h2 id="MyFlash初体验"><a href="#MyFlash初体验" class="headerlink" title="MyFlash初体验"></a>MyFlash初体验</h2><h2 id="验证binlog2sql-是否支持blob转换"><a href="#验证binlog2sql-是否支持blob转换" class="headerlink" title="验证binlog2sql 是否支持blob转换"></a>验证binlog2sql 是否支持blob转换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;--w_blob.py  写入blob   import sys import pymysql import os  path &#x3D; &quot;.&#x2F;&quot;  fp &#x3D; open(&quot;&#x2F;alidata&#x2F;PG01.jpg&quot;, &#39;rb&#39;) img &#x3D; fp.read() fp.close()  database &#x3D; pymysql.connect(host&#x3D;&quot;localhost&quot;, user&#x3D;&quot;root&quot;, passwd&#x3D;&quot;root&quot;, db&#x3D;&quot;qinxi&quot;) cursor &#x3D; database.cursor() sql &#x3D; &quot;INSERT INTO tb_test (nameBlob) VALUES  (%s);&quot; args &#x3D; (img) cursor.execute(sql, args) database.commit() cursor.close() database.close()  print(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;) print(&quot;Done! &quot;)   --r_blob.py 读取blob  import pymysql as mdb import sys  conn &#x3D; mdb.connect(host&#x3D;&#39;localhost&#39;,user&#x3D;&#39;root&#39;,passwd&#x3D;&#39;root&#39;,db&#x3D;&#39;qinxi&#39;) cursor &#x3D; conn.cursor() cursor.execute(&quot;SELECT nameBlob FROM tb_test LIMIT 1&quot;) fout &#x3D; open(&#39;PG333.jpg&#39;,&#39;wb&#39;) fout.write(cursor.fetchone()[0]) fout.close() cursor.close() conn.close()    python binlog2sql.py -uroot -h10.200.6.53 -proot -B --start-file&#x3D;mybinlog.000033 &gt; 33.sql&#96;</span><br></pre></td></tr></table></figure>



<h1 id="MyFlash测试"><a href="#MyFlash测试" class="headerlink" title="MyFlash测试"></a>MyFlash测试</h1><p><a href="https://github.com/Meituan-Dianping/MyFlash" target="_blank" rel="noopener">https://github.com/Meituan-Dianping/MyFlash</a></p>
<p>安装</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;yum install libgnomeui-devel  gcc -w -g &#96;pkg-config --cflags  glib-2.0&#96; source&#x2F;binlogParseGlib.c   -o binary&#x2F;flashback &#x2F;usr&#x2F;lib64&#x2F;libglib-2.0.a -lrt yum install install glib2*&#96;</span><br></pre></td></tr></table></figure>

<p>测试环境准备</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Meituan-Dianping&#x2F;MyFlash&#x2F;blob&#x2F;master&#x2F;doc&#x2F;TestCase.md</span><br><span class="line">CREATE TABLE &#96;tb_test&#96; (   &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT,   &#96;nameBlob&#96; longblob,   PRIMARY KEY (&#96;id&#96;) ) ENGINE&#x3D;InnoDB；</span><br></pre></td></tr></table></figure>



<p>回滚命令生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;.&#x2F;MyFlash&#x2F;binary&#x2F;flashback --binlogFileNames&#x3D;&#x2F;alidata&#x2F;mysql&#x2F;mybinlog.000022 --outBinlogFileNameBase&#x3D;22delete.flashback&#96;</span><br></pre></td></tr></table></figure>



<p>扩展</p>
<p>阿里云RDS实例，用户没有Super权限，导入带有set @@信息，会提示ERROR 1227 (42000) at line 18: Access denied; you need (at least one of) the SUPERprivilege(s) for this operation报错。</p>
<p>本地5.7版本，测试去除set @@GTID_NEXT,当GTID模式开启状态，导入实例会提示报错:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR 1782 (HY000) at line 19: @@SESSION.GTID_NEXT cannot be set to ANONYMOUS when @@GLOBAL.GTID_MODE &#x3D; ON.</span><br></pre></td></tr></table></figure>

<p>只有将 GTID模式关闭，才可以正常导入。</p>
<p><a href="https://bugs.mysql.com/bug.php?id=85480" target="_blank" rel="noopener">https://bugs.mysql.com/bug.php?id=85480</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;mysqlbinlog -v -v --skip-gtids 22delete.flashback | sed &#39;s@\&#x2F;\*.*\*\&#x2F;@@&#39; |mysql -uroot -proot&#96;</span><br></pre></td></tr></table></figure>

<p>初步结论：云上RDS 目前无法使用该工具，由于没有super权限。</p>
]]></content>
      <categories>
        <category>开源工具</category>
      </categories>
      <tags>
        <tag>MyFlash</tag>
      </tags>
  </entry>
  <entry>
    <title>幻读是什么，幻读有什么问题？</title>
    <url>/2020/04/21/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/%E5%B9%BB%E8%AF%BB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E5%B9%BB%E8%AF%BB%E6%9C%89%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98%EF%BC%9F/</url>
    <content><![CDATA[<p><strong>初始化语句</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `t` (</span><br><span class="line">    -&gt;   `id` int(11) NOT NULL,</span><br><span class="line">    -&gt;   `c` int(11) DEFAULT NULL,</span><br><span class="line">    -&gt;   `d` int(11) DEFAULT NULL,</span><br><span class="line">    -&gt;   PRIMARY KEY (`id`),</span><br><span class="line">    -&gt;   KEY `c` (`c`)</span><br><span class="line">    -&gt; ) ENGINE=InnoDB;</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; insert into t values(0,0,0),(5,5,5),</span><br><span class="line">    -&gt; (10,10,10),(15,15,15),(20,20,20),(25,25,25);</span><br><span class="line">Query OK, 6 rows affected (0.04 sec)</span><br><span class="line">Records: 6  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>

<p><strong>隔离级别</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select @@tx_isolation;</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> @@global.tx_isolation;</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| @@global.tx_isolation |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">| REPEATABLE-READ       |</span><br><span class="line">+<span class="comment">-----------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h1 id="幻读是什么？"><a href="#幻读是什么？" class="headerlink" title="幻读是什么？"></a>幻读是什么？</h1><table>
<thead>
<tr>
<th></th>
<th>sessionA</th>
<th>sessionB</th>
<th>seesionC</th>
</tr>
</thead>
<tbody><tr>
<td>T1</td>
<td>begin;</td>
<td></td>
<td></td>
</tr>
<tr>
<td>select * from t where d=5 for update;/*Q1/ result:(5,5,5)</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T2</td>
<td></td>
<td>update t set d=5 where id=0;</td>
<td></td>
</tr>
<tr>
<td>T3</td>
<td>select * from t where d=5 for update;/*Q2/ result:(0,0,5),(5,5,5)</td>
<td></td>
<td>insert into t values(1,1,5);</td>
</tr>
<tr>
<td>T4</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>T5</td>
<td>select * from t where d=5 for update;/*Q3/ result:(0,0,5),(1,1,5),(5,5,5)</td>
<td></td>
<td></td>
</tr>
<tr>
<td>T6</td>
<td>commit;</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.Q1 只返回 id&#x3D;5 这一行；</span><br><span class="line">2.在 T2 时刻，session B 把 id&#x3D;0 这一行的 d 值改成了 5，因此 T3 时刻 Q2 查出来的是 id&#x3D;0 和 id&#x3D;5 这两行；</span><br><span class="line">3.在 T4 时刻，session C 又插入一行（1,1,5），因此 T5 时刻 Q3 查出来的是 id&#x3D;0、id&#x3D;1 和 id&#x3D;5 的这三行。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其中，Q3 读到 id=1 这一行的现象，被称为“幻读”。也就是说，幻读指的是一个事务在前后两次查询同一个范围的时候，后一次查询看到了前一次查询没有看到的行。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.在可重复读隔离级别下，普通的查询是快照读，是不会看到别的事务插入的数据的。因此，幻读在“当前读”下才会出现。</span><br><span class="line">2.上面 session B 的修改结果，被 session A 之后的 select 语句用“当前读”看到，不能称为幻读。幻读仅专指“新插入的行”。</span><br></pre></td></tr></table></figure>

<h2 id="幻读有什么问题？"><a href="#幻读有什么问题？" class="headerlink" title="幻读有什么问题？"></a>幻读有什么问题？</h2><ul>
<li>首先是语义上的。</li>
<li>其次，是数据一致性的问题。</li>
<li>也就是说，即使把所有的记录都加上锁，还是阻止不了新插入的记录</li>
</ul>
<h2 id="如何解决幻读？"><a href="#如何解决幻读？" class="headerlink" title="如何解决幻读？"></a>如何解决幻读？</h2><blockquote>
<p>产生幻读的原因是，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。间隙锁和 next-key lock 的引入，帮我们解决了幻读的问题，但同时也带来了一些“困扰”。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</p>
</blockquote>
<ul>
<li>间隙锁是在可重复读隔离级别下才会生效的</li>
</ul>
]]></content>
      <categories>
        <category>MySQL实战45讲</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>开源工具cannal</title>
    <url>/2020/04/15/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7cannal/</url>
    <content><![CDATA[<blockquote>
<p>云数据库Polardb如何获取事务提交时间戳</p>
</blockquote>
<h2 id="polardb-需开启binlog"><a href="#polardb-需开启binlog" class="headerlink" title="polardb 需开启binlog"></a>polardb 需开启binlog</h2><ul>
<li>修改当前值<strong>loose_polar_log_bin</strong></li>
</ul>
<p><strong>说明</strong></p>
<ul>
<li><p>数据库引擎为MySQL 5.6的PolarDB集群，当前值修改为ON_WITH_GTID；</p>
</li>
<li><p>数据库引擎为MySQL 8.0的PolarDB集群，当前值修改为ON。</p>
</li>
</ul>
<h2 id="canal拉取binlog"><a href="#canal拉取binlog" class="headerlink" title="canal拉取binlog"></a>canal拉取binlog</h2><p>简介：（阿里巴巴 MySQL binlog 增量订阅&amp;消费组件）</p>
<p><em>参考：<a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">https://github.com/alibaba/canal</a></em></p>
<a id="more"></a>


<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul>
<li><p>下载 canal, 访问 <a href="https://github.com/alibaba/canal/releases" target="_blank" rel="noopener">release 页面</a> , 选择需要的包下载, 如以 1.1.4 版本为例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;canal&#x2F;releases&#x2F;download&#x2F;canal-1.1.4&#x2F;canal.deployer-1.1.4.tar.gz</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="canal-python"><a href="#canal-python" class="headerlink" title="canal-python"></a>canal-python</h1><h2 id="一-canal-python-简介"><a href="#一-canal-python-简介" class="headerlink" title="一.canal-python 简介"></a>一.canal-python 简介</h2><p>canal-python 是阿里巴巴开源项目 <a href="https://github.com/alibaba/canal" target="_blank" rel="noopener">Canal</a>是阿里巴巴mysql数据库binlog的增量订阅&amp;消费组件 的 python 客户端。为 python 开发者提供一个更友好的使用 Canal 的方式。Canal 是mysql数据库binlog的增量订阅&amp;消费组件。</p>
<p>基于日志增量订阅&amp;消费支持的业务：</p>
<ol>
<li>数据库镜像</li>
<li>数据库实时备份</li>
<li>多级索引 (卖家和买家各自分库索引)</li>
<li>search build</li>
<li>业务cache刷新</li>
<li>价格变化等重要业务消息</li>
</ol>
<p>关于 Canal 的更多信息请访问 <a href="https://github.com/alibaba/canal/wiki" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki</a></p>
<h2 id="二-应用场景"><a href="#二-应用场景" class="headerlink" title="二.应用场景"></a>二.应用场景</h2><p>canal-python 作为Canal的客户端，其应用场景就是Canal的应用场景。关于应用场景在Canal介绍一节已有概述。举一些实际的使用例子：</p>
<p>1.代替使用轮询数据库方式来监控数据库变更，有效改善轮询耗费数据库资源。</p>
<p>2.根据数据库的变更实时更新搜索引擎，比如电商场景下商品信息发生变更，实时同步到商品搜索引擎 Elasticsearch、solr等</p>
<p>3.根据数据库的变更实时更新缓存，比如电商场景下商品价格、库存发生变更实时同步到redis</p>
<p>4.数据库异地备份、数据同步</p>
<p>5.根据数据库变更触发某种业务，比如电商场景下，创建订单超过xx时间未支付被自动取消，我们获取到这条订单数据的状态变更即可向用户推送消息。</p>
<p>6.将数据库变更整理成自己的数据格式发送到kafka等消息队列，供消息队列的消费者进行消费。</p>
<h2 id="三-工作原理"><a href="#三-工作原理" class="headerlink" title="三.工作原理"></a>三.工作原理</h2><p>canal-python 是 Canal 的 python 客户端，它与 Canal 是采用的Socket来进行通信的，传输协议是TCP，交互协议采用的是 Google Protocol Buffer 3.0。</p>
<h2 id="四-工作流程"><a href="#四-工作流程" class="headerlink" title="四.工作流程"></a>四.工作流程</h2><p>1.Canal连接到mysql数据库，模拟slave</p>
<p>2.canal-python 与 Canal 建立连接</p>
<p>2.数据库发生变更写入到binlog</p>
<p>5.Canal向数据库发送dump请求，获取binlog并解析</p>
<p>4.canal-python 向 Canal 请求数据库变更</p>
<p>4.Canal 发送解析后的数据给canal-python</p>
<p>5.canal-python收到数据，消费成功，发送回执。（可选）</p>
<p>6.Canal记录消费位置。</p>
<h2 id="五-快速启动"><a href="#五-快速启动" class="headerlink" title="五.快速启动"></a>五.快速启动</h2><h3 id="安装Canal"><a href="#安装Canal" class="headerlink" title="安装Canal"></a>安装Canal</h3><p>Canal 的安装以及配置使用请查看 <a href="https://github.com/alibaba/canal/wiki/QuickStart" target="_blank" rel="noopener">https://github.com/alibaba/canal/wiki/QuickStart</a></p>
<p>安装java请查看 <a href="https://www.cnblogs.com/lumama520/p/11058927.html" target="_blank" rel="noopener">https://www.cnblogs.com/lumama520/p/11058927.html</a></p>
<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><p>python &gt;= 3</p>
<h3 id="构建canal-python客户端"><a href="#构建canal-python客户端" class="headerlink" title="构建canal python客户端"></a>构建canal python客户端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install canal-python</span><br><span class="line">pip install protobuf</span><br></pre></td></tr></table></figure>

<h3 id="建立与Canal的连接"><a href="#建立与Canal的连接" class="headerlink" title="建立与Canal的连接"></a>建立与Canal的连接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim canalpython.py</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">from canal.client import Client</span><br><span class="line">from canal.protocol import EntryProtocol_pb2</span><br><span class="line">from canal.protocol import CanalProtocol_pb2</span><br><span class="line"></span><br><span class="line">client &#x3D; Client()</span><br><span class="line">client.connect(host&#x3D;&#39;127.0.0.1&#39;, port&#x3D;11111)</span><br><span class="line">client.check_valid(username&#x3D;b&#39;&#39;, password&#x3D;b&#39;&#39;)</span><br><span class="line">client.subscribe(client_id&#x3D;b&#39;1001&#39;, destination&#x3D;b&#39;example&#39;, filter&#x3D;b&#39;.*\\..*&#39;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    message &#x3D; client.get(100)</span><br><span class="line">    entries &#x3D; message[&#39;entries&#39;]</span><br><span class="line">    for entry in entries:</span><br><span class="line">        entry_type &#x3D; entry.entryType</span><br><span class="line">        if entry_type in [EntryProtocol_pb2.EntryType.TRANSACTIONBEGIN, EntryProtocol_pb2.EntryType.TRANSACTIONEND]:</span><br><span class="line">            continue</span><br><span class="line">        row_change &#x3D; EntryProtocol_pb2.RowChange()</span><br><span class="line">        row_change.MergeFromString(entry.storeValue)</span><br><span class="line">        event_type &#x3D; row_change.eventType</span><br><span class="line">        header &#x3D; entry.header</span><br><span class="line">        database &#x3D; header.schemaName</span><br><span class="line">        table &#x3D; header.tableName</span><br><span class="line">        event_type &#x3D; header.eventType</span><br><span class="line">        for row in row_change.rowDatas:</span><br><span class="line">            format_data &#x3D; dict()</span><br><span class="line">            if event_type &#x3D;&#x3D; EntryProtocol_pb2.EventType.DELETE:</span><br><span class="line">                for column in row.beforeColumns:</span><br><span class="line">                    format_data &#x3D; &#123;</span><br><span class="line">                        column.name: column.value</span><br><span class="line">                    &#125;</span><br><span class="line">            elif event_type &#x3D;&#x3D; EntryProtocol_pb2.EventType.INSERT:</span><br><span class="line">                for column in row.afterColumns:</span><br><span class="line">                    format_data &#x3D; &#123;</span><br><span class="line">                        column.name: column.value</span><br><span class="line">                    &#125;</span><br><span class="line">            else:</span><br><span class="line">                format_data[&#39;before&#39;] &#x3D; format_data[&#39;after&#39;] &#x3D; dict()</span><br><span class="line">                for column in row.beforeColumns:</span><br><span class="line">                    format_data[&#39;before&#39;][column.name] &#x3D; column.value</span><br><span class="line">                for column in row.afterColumns:</span><br><span class="line">                    format_data[&#39;after&#39;][column.name] &#x3D; column.value</span><br><span class="line">            data &#x3D; dict(</span><br><span class="line">                db&#x3D;database,</span><br><span class="line">                table&#x3D;table,</span><br><span class="line">                event_type&#x3D;event_type,</span><br><span class="line">                data&#x3D;format_data,</span><br><span class="line">            )</span><br><span class="line">            print(data)</span><br><span class="line">    time.sleep(1)</span><br><span class="line"></span><br><span class="line">client.disconnect()</span><br></pre></td></tr></table></figure>

<h2 id="事务时间戳获取"><a href="#事务时间戳获取" class="headerlink" title="事务时间戳获取"></a>事务时间戳获取</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@Oracle01 ~]# mysql -uxxx -pxxx -hlocalhost</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use qinxidb</span></span><br><span class="line">Database changed</span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> insert into tb (userId) values (9161);</span></span><br><span class="line">Query OK, 1 row affected (0.10 sec)</span><br><span class="line"></span><br><span class="line">[root@Oracle01 canal]# python3 canalpython.py </span><br><span class="line">connected to 127.0.0.1:11111</span><br><span class="line">Auth succed</span><br><span class="line">Subscribe succed</span><br><span class="line">header &#123;</span><br><span class="line">  version: 1</span><br><span class="line">  logfileName: "mybinlog.000011"</span><br><span class="line">  logfileOffset: 38812146</span><br><span class="line">  serverId: 4</span><br><span class="line">  serverenCode: "UTF-8"</span><br><span class="line">  executeTime: 1586929590000</span><br><span class="line">  sourceType: MYSQL</span><br><span class="line">  eventLength: 75</span><br><span class="line">&#125;</span><br><span class="line">entryType: TRANSACTIONBEGIN</span><br><span class="line">storeValue: " \204\254\001"</span><br><span class="line"></span><br><span class="line">header &#123;</span><br><span class="line">  version: 1</span><br><span class="line">  logfileName: "mybinlog.000011"</span><br><span class="line">  logfileOffset: 38812269</span><br><span class="line">  serverId: 4</span><br><span class="line">  serverenCode: "UTF-8"</span><br><span class="line">  executeTime: 1586929590000</span><br><span class="line">  sourceType: MYSQL</span><br><span class="line">  schemaName: "qinxidb"</span><br><span class="line">  tableName: "tb"</span><br><span class="line">  eventLength: 40</span><br><span class="line">  eventType: INSERT</span><br><span class="line">  props &#123;</span><br><span class="line">    key: "rowsCount"</span><br><span class="line">    value: "1"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">entryType: ROWDATA</span><br><span class="line">storeValue: "\010\177\020\001P\000b#\022!\010\000\020\004\032\006userId \000(\0010\000B\0049161R\007int(11)"</span><br><span class="line"></span><br><span class="line">&#123;'db': 'qinxidb', 'table': 'tb', 'event_type': 1, 'data': &#123;'userId': '9161'&#125;&#125;</span><br><span class="line">header &#123;</span><br><span class="line">  version: 1</span><br><span class="line">  logfileName: "mybinlog.000011"</span><br><span class="line">  logfileOffset: 38812309</span><br><span class="line">  serverId: 4</span><br><span class="line">  serverenCode: "UTF-8"</span><br><span class="line">  executeTime: 1586929590000</span><br><span class="line">  sourceType: MYSQL</span><br><span class="line">  eventLength: 31</span><br><span class="line">&#125;</span><br><span class="line">entryType: TRANSACTIONEND</span><br><span class="line">storeValue: "\022\00551434"</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>开源工具</category>
      </categories>
      <tags>
        <tag>Polardb for MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么你改了我看不见?</title>
    <url>/2020/04/15/MySQL%E5%AE%9E%E6%88%9845%E8%AE%B2/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E6%88%91%E7%9C%8B%E4%B8%8D%E8%A7%81/</url>
    <content><![CDATA[<p><strong>事务的基本要素(ACID)</strong></p>
<ul>
<li>原子性（Atomicity）；事务开始后所有操作，要么全部做完，要么全部不做，不能停滞在中间环节。</li>
<li>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏。</li>
<li>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</li>
<li>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li>
</ul>
<p><strong>事务的并发问题</strong></p>
<ul>
<li>脏读：事务B修改数据但未提交，事务A读数据，然后B回滚，则A读到的是脏数据。</li>
<li>不可重复读：事务A第一次读取数据，事务B修改数据提交，事务A第二次读数据，两次数据不一致。</li>
<li>幻读：事务A update表的全部行，事务B插入一行，事务A就会发现表中还有未修改的行。（一般加间隙锁）</li>
</ul>
<p><strong>MySQL事务隔离级别</strong></p>
<table>
<thead>
<tr>
<th>事务隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>会</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>读已提交</td>
<td>不会</td>
<td>会</td>
<td>会</td>
</tr>
<tr>
<td>可重复读</td>
<td>不会</td>
<td>不会</td>
<td>会</td>
</tr>
<tr>
<td>串行话</td>
<td>不会</td>
<td>不会</td>
<td>不会</td>
</tr>
</tbody></table>
<p><strong>案例</strong></p>
<table>
<thead>
<tr>
<th>事务A</th>
<th>事务B</th>
</tr>
</thead>
<tbody><tr>
<td>启动事务；查询得到值</td>
<td>启动事务</td>
</tr>
<tr>
<td></td>
<td>查询得到值1</td>
</tr>
<tr>
<td></td>
<td>将1改成2</td>
</tr>
<tr>
<td>查询得到值V1</td>
<td></td>
</tr>
<tr>
<td></td>
<td>提交事务B</td>
</tr>
<tr>
<td>查询得到值V2</td>
<td></td>
</tr>
<tr>
<td>提交事务A</td>
<td></td>
</tr>
<tr>
<td>查询得到值V3</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><p>若隔离级别是“读未提交”， 则 V1 的值就是 2。这时候事务 B 虽然还没有提交，但是结果已经被 A 看到了。因此，V2、V3 也都是 2。</p>
</li>
<li><p>若隔离级别是“读提交”，则V1是1，V2的值是2。事务B的更新在提交后才能被A看到。所以，V3的值也是2。</p>
</li>
<li><p>若隔离级别是“可重复读”，则 V1、V2 是 1，V3 是 2。之所以 V2 还是 1，遵循的就是这个要求：事务在执行期间看到的数据前后必须是一致的。</p>
</li>
<li><p>若隔离级别是“串行化”，则在事务 B 执行“将 1 改成 2”的时候，会被锁住。直到事务 A 提交后，事务 B 才可以继续执行。所以从 A 的角度看， V1、V2 值是 1，V3 的值是 2。</p>
</li>
</ul>
<p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。</p>
<ul>
<li>在“可重复读”隔离级别下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li>
<li>在“读提交”隔离级别下，这个视图是在每个SQL语句开始执行的时候创建的。</li>
<li>在“读未提交”隔离级别下直接返回记录下的最新之，没有视图概念。</li>
<li>而“串性化”隔离级别下直接用加锁的方式来避免并行访问。</li>
</ul>
<p>为保证数据库隔离级别一致，你一定要记得将MYSQL的隔离级别设置为“读提交”。</p>
]]></content>
      <categories>
        <category>MySQL实战45讲</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql误删数据谁来背锅</title>
    <url>/2020/04/10/MySQL/mysql%E8%AF%AF%E5%88%A0%E6%95%B0%E6%8D%AE%E8%B0%81%E6%9D%A5%E8%83%8C%E9%94%85/</url>
    <content><![CDATA[<blockquote>
<p>我们不止要说误删数据的事后处理办法，更重要是要做到事前预防。</p>
</blockquote>
<p><em>误删数据分类</em></p>
<ul>
<li>使用 delete 语句误删数据行；</li>
<li>使用 drop table 或者 truncate table 语句误删数据表；</li>
<li>使用 drop database 语句误删数据库；</li>
<li>使用 rm 命令误删整个 MySQL 实例。<a id="more"></a>

</li>
</ul>
<p><em>需要完善自动恢复脚本</em></p>
<blockquote>
<p>一种加速的方法是，在用备份恢复出临时实例之后，将这个临时实例设置成线上备库的从库</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#1.恢复全量备份</span></span><br><span class="line">a.指定全量备份路径</span><br><span class="line">b.写入全量备份名称</span><br><span class="line">c.恢复全量备份到指定临时实例</span><br><span class="line"></span><br><span class="line">在 start slave 之前，先通过执行﻿﻿change replication filter replicate_do_table = (tbl_name) 命令，就可以让临时库只同步误操作的表；</span><br><span class="line">这样做也可以用上并行复制技术，来加速整个数据恢复过程。</span><br><span class="line"><span class="comment">#2.自动恢复binlog</span></span><br><span class="line">a.指定binlog备份路径</span><br><span class="line">b.指定需要恢复的binlog名称（1个或者多个）</span><br><span class="line">c.恢复binlog到指定临时实例</span><br></pre></td></tr></table></figure>

<p><em>预防误删库 / 表的方法</em></p>
<ul>
<li><p>第一条建议是，账号分离。这样做的目的是，避免写错命令。</p>
<blockquote>
<p>比如：我们只给业务开发同学 DML 权限，而不给 truncate/drop 权限。<br>而如果业务开发人员有 DDL 需求的话，也可以通过开发管理系统得到支持。<br>即使是 DBA 团队成员，日常也都规定只使用只读账号，必要的时候才使用有更新权限的账号。</p>
</blockquote>
</li>
<li><p>第二条建议是，制定操作规范。</p>
<blockquote>
<p>这样做的目的，是避免写错要删除的表名。<br>比如：在删除数据表之前，必须先对表做改名操作。然后，观察一段时间，确保对业务无影响以后再删除这张表。<br>改表名的时候，要求给表名加固定的后缀（比如加 _to_be_deleted)，然后删除表的动作必须通过管理系统执行。并且，管理系删除表的时候，只能删除固定后缀的表。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MonogDB非关系型数据库</title>
    <url>/2020/04/04/MongoDB/MonogDB%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="1-MonogDB简介"><a href="#1-MonogDB简介" class="headerlink" title="1.MonogDB简介"></a>1.MonogDB简介</h1><p>MongoDB 是一款强大，灵活，且易于扩展的通用性数据库，<strong>面向文档的数据库</strong>。</p>
<ul>
<li>二级索引</li>
<li>范围查询</li>
<li>排序</li>
<li>聚合</li>
<li>地理空间索引</li>
</ul>
<a id="more"></a>

<p>丰富的功能：</p>
<ul>
<li>索引（indexing）</li>
</ul>
<p>MongoDB支持通用二级索引，允许多种快速查询，且提供唯一索引、复合索引、地理空间索引，以及全文索引。</p>
<ul>
<li>聚合（aggregation）</li>
</ul>
<p>MongoDB支持“聚合管道”。用户能通过简单的片段创建复杂的聚合，并通过数据库自动优化。</p>
<ul>
<li>特殊的集合类型</li>
</ul>
<p>MongoDB支持存在时间有限的集合，适用于那些将在某个时刻过期的数据，如会话。固定大小的集合，用于保存近期数据，如日志。</p>
<ul>
<li>文件存储</li>
</ul>
<p>MongoDB支持一种非常医用的协议，用于存储大文件和文件元数据。</p>
<p>基本概念：</p>
<ul>
<li>文档是MongoDB中数据的基本单元，非常类似于关系型数据库管理系统中的行，但更具有表现力。</li>
<li>集合是一个拥有动态模式的表。</li>
<li>MongoDB的一个实例可以拥有多个相互独立的数据库，每一个数据库都拥有自己的集合。</li>
<li>每一个文档都有一个特殊的键“_id”,这个键在文档所属的集合中是唯一的。</li>
<li>MongoDB自带了一个简单但功能强大的JavaScript shell，可用于管理MongoDB的实例或数据操作。</li>
</ul>
<h1 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2.基础知识"></a>2.基础知识</h1><p>集合命名：</p>
<ul>
<li>集合名不能使空字符串（””）</li>
<li>集合名不能包含\0字符（空字符），这个字符表示集合名的结束。</li>
<li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li>
<li>用户创建的集合不能在集合名中包含保留字符’$’。</li>
</ul>
<p>子集合：</p>
<p>组合集合的一种惯例是使用“.”分隔不同命名空间的子集合。</p>
<ul>
<li>GridFS使用自己和来存储文件的元数据，这样就可以与文件内容块很好地隔离开来。</li>
<li>大多数驱动程序都提供了一些语法糖，用于访问指定集合的子集合。</li>
</ul>
<p>数据库：</p>
<ul>
<li>多个文档组成集合，多个集合可以组成数据库。</li>
<li>一个MongoDB实例可以承载多个数据库，每个数据库拥有0个或者多个集合。</li>
<li>每个数据库斗殴独立的权限，即便是在磁盘上，不同的数据库也放置在不同的文件中。</li>
</ul>
<p>数据库命名：</p>
<ul>
<li>不能空字符串（””）</li>
<li>基本只能使用ASCII中的字母和数字。</li>
<li>数据库名区分大小写（不区分大小写的文件系统也是如此，建议全部小写）。</li>
<li>数据库名最多为64字节。</li>
</ul>
<h1 id="3-启动关闭MongoDB"><a href="#3-启动关闭MongoDB" class="headerlink" title="3.启动关闭MongoDB"></a>3.启动关闭MongoDB</h1><ul>
<li>mongod默认数据目录/data/db（Windows系统中为C:\data\db）。</li>
<li>启动前，创建数据目录（mkdir -p /data/db）,确保对改目录有写权限。</li>
<li>默认MonoDB监听27017端口。</li>
</ul>
<h1 id="4-MonogDB客户端"><a href="#4-MonogDB客户端" class="headerlink" title="4.MonogDB客户端"></a>4.MonogDB客户端</h1><ul>
<li>启动时，mongodb shell会练到MongoDB服务器的test数据库，并将数据库连接赋值给全局变量db。</li>
<li>这个变量是通过shell访问MongoDB的主要入口点。</li>
</ul>
<h1 id="5-shell中的基本操作"><a href="#5-shell中的基本操作" class="headerlink" title="5.shell中的基本操作"></a>5.shell中的基本操作</h1><p>1、创建</p>
<ul>
<li>insert函数可将一个文档添加到集合中。</li>
<li>创建一个名为post的局部变量，用来表示我们的文档。</li>
<li>它会有几个键：”title”、”content”、“date”。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; post &#x3D; &#123;&quot;title&quot;:&quot;this is test,&quot;&#125;</span><br><span class="line">&#123; &quot;title&quot; : &quot;this is test,&quot; &#125;</span><br><span class="line">&gt; post &#x3D; &#123;&quot;title&quot;:&quot;this is test&quot;,</span><br><span class="line">... &quot;content&quot; :&quot;here&#39;s my blog test&quot;,</span><br><span class="line">... &quot;data&quot;:new Date()&#125;</span><br><span class="line">&#123;</span><br><span class="line">	&quot;title&quot; : &quot;this is test&quot;,</span><br><span class="line">	&quot;content&quot; : &quot;here&#39;s my blog test&quot;,</span><br><span class="line">	&quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; show dbs</span><br><span class="line">local  0.000GB</span><br><span class="line">&gt; use hjxdb</span><br><span class="line">switched to db hjxdb</span><br><span class="line">&gt; db.blog.insert(post);</span><br><span class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br><span class="line">&gt; db.blog.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59dedf7ecb7cf32013d3da35&quot;), &quot;title&quot; : &quot;this is test&quot;, &quot;content&quot; : &quot;here&#39;s my blog test&quot;, &quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;) &#125;</span><br></pre></td></tr></table></figure>

<p>2、读取</p>
<p>find和findOne方法可以用于查询集合里的文档。若只想查看一个文档，可用findOne：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.blog.findOne()</span><br><span class="line">&#123;</span><br><span class="line">	&quot;_id&quot; : ObjectId(&quot;59dedf7ecb7cf32013d3da35&quot;),</span><br><span class="line">	&quot;title&quot; : &quot;this is test&quot;,</span><br><span class="line">	&quot;content&quot; : &quot;here&#39;s my blog test&quot;,</span><br><span class="line">	&quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、更新</p>
<ul>
<li>update至少两个参数</li>
<li>一个是限定条件,匹配待更新的文档</li>
<li>一个是新的文档</li>
<li>之前的文章增加平冷功能，新增一个键，用来保存评论数组</li>
</ul>
<p>增加”comments”键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; post.comments &#x3D; []</span><br><span class="line">[ ]</span><br><span class="line">&gt; db.blog.update(&#123;title:&quot;this is test&quot;&#125;,post)</span><br><span class="line">WriteResult(&#123; &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 &#125;)</span><br><span class="line">&gt; db.blog.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;59dedf7ecb7cf32013d3da35&quot;), &quot;title&quot; : &quot;this is test&quot;, &quot;content&quot; : &quot;here&#39;s my blog test&quot;, &quot;data&quot; : ISODate(&quot;2017-10-12T03:20:09.121Z&quot;), &quot;comments&quot; : [ ] &#125;</span><br></pre></td></tr></table></figure>

<p>4、删除</p>
<ul>
<li>remove方法可将文档从数据库中永久删除。</li>
<li>没有任何参数，将删除集合内的所有文档全部删除。</li>
<li>接受一个限定条件的文档作为参数。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.blog.remove(&#123;title:&quot;this is test&quot;&#125;)</span><br><span class="line">WriteResult(&#123; &quot;nRemoved&quot; : 1 &#125;)</span><br><span class="line">&gt; db.blog.find()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>豆瓣电影排行榜</title>
    <url>/2020/04/04/Python/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
    <content><![CDATA[<h1 id="1-如何处理数据"><a href="#1-如何处理数据" class="headerlink" title="1.如何处理数据"></a>1.如何处理数据</h1><p>BeautifulSoup</p>
<ul>
<li>解析数据</li>
<li>提出数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="2-案例"><a href="#2-案例" class="headerlink" title="2.案例"></a>2.案例</h1><h2 id="2-1获取豆瓣图书TOP250当中"><a href="#2-1获取豆瓣图书TOP250当中" class="headerlink" title="2.1获取豆瓣图书TOP250当中"></a>2.1获取豆瓣图书TOP250当中</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 引入 BeautifulSoup</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">res = requests.get(<span class="string">'https://book.douban.com/top250'</span>, headers=headers)</span><br><span class="line"><span class="comment"># 第一个参数为网页源代码，第二个参数为解析器</span></span><br><span class="line">soup = BeautifulSoup(res.text, <span class="string">'html.parser'</span>)</span><br><span class="line"><span class="comment"># print(soup)</span></span><br><span class="line"><span class="comment"># items = soup.find_all('div', class_='pl2')</span></span><br><span class="line">items = soup.select(<span class="string">'div.pl2 a'</span>)</span><br><span class="line"><span class="comment"># print(items)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">  <span class="comment"># tag = i.find('a')</span></span><br><span class="line">  <span class="comment"># name = ''.join(tag.text.split())</span></span><br><span class="line">  <span class="comment"># name = tag['title']</span></span><br><span class="line">  <span class="comment"># link = tag['href']</span></span><br><span class="line">  name = i[<span class="string">'title'</span>]</span><br><span class="line">  link = i[<span class="string">'href'</span>]</span><br><span class="line">  print(name, link)</span><br></pre></td></tr></table></figure>

<h2 id="2-2获取豆瓣电影的数据-电影名和链接"><a href="#2-2获取豆瓣电影的数据-电影名和链接" class="headerlink" title="2.2获取豆瓣电影的数据(电影名和链接)"></a>2.2获取豆瓣电影的数据(电影名和链接)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">'https://movie.douban.com/top250'</span>, headers=headers)</span><br><span class="line">soup = BeautifulSoup(res.text,<span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line">items = soup.select(<span class="string">'div.hd a'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">  link = i[<span class="string">'href'</span>]</span><br><span class="line">  tag = i.find(class_=<span class="string">'title'</span>)</span><br><span class="line">  name = tag.text</span><br><span class="line">  print(name,link)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫初体验</title>
    <url>/2020/04/04/Python/python%E7%88%AC%E8%99%AB%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="requests模块"><a href="#requests模块" class="headerlink" title="requests模块"></a>requests模块</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">res = requests.get(<span class="string">'https://wpblog.x0y1.com'</span>)</span><br><span class="line"><span class="comment">#print(res)</span></span><br><span class="line">print(res.text)</span><br><span class="line"><span class="keyword">if</span> res.status_code == <span class="number">200</span>:</span><br><span class="line">  print(<span class="string">'请求成功'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'请求失败'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取孔乙己数据</span></span><br><span class="line">res = requests.get(<span class="string">'https://apiv3.shanbay.com/codetime/articles/mnvdu'</span>)</span><br><span class="line"><span class="comment"># 以写入的方式打开一个名为孔乙己的 txt 文档</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'孔乙己.txt'</span>, <span class="string">'w'</span> ,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">  <span class="comment"># 将数据的字符串形式写入文件中</span></span><br><span class="line">  file.write(res.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片数据</span></span><br><span class="line">res = requests.get(<span class="string">'https://assets.baydn.com/baydn/public/codetime/xiaobei/info.jpg'</span>)</span><br><span class="line"><span class="comment"># 以二进制写入的方式打开一个名为 info.jpg 的文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'info.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> file:</span><br><span class="line"><span class="comment"># 将数据的二进制形式写入文件中</span></span><br><span class="line">  file.write(res.content)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>变量 <strong>res</strong>它的类型是 <strong>Response</strong> 对象</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>res.status_code</td>
<td>响应的 HTTP 状态码</td>
</tr>
<tr>
<td>res.text</td>
<td>响应内容的字符串形式</td>
</tr>
<tr>
<td>res.content</td>
<td>响应内容的二进制形式</td>
</tr>
<tr>
<td>res.encoding</td>
<td>响应内容的编码</td>
</tr>
</tbody></table>
<h2 id="爬虫初体验"><a href="#爬虫初体验" class="headerlink" title="爬虫初体验"></a>爬虫初体验</h2><blockquote>
<p>目标：自动循环小王子的所有章节，将故事存放到一个目录当中，每个章节一份文件。title做为文件名</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">'http://www.eywedu.net/xiaowangzi/14.htm'</span>)</span><br><span class="line">res.encoding=<span class="string">'gb2312'</span></span><br><span class="line">text = res.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open (<span class="string">'小王子.txt'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">  file.write(text)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>InfluxDB时序数据库</title>
    <url>/2020/02/25/InfluxDB/InfluxDB%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h1 id="Influx-DB的学习"><a href="#Influx-DB的学习" class="headerlink" title="Influx DB的学习"></a>Influx DB的学习</h1><h2 id="Influxdb-下载"><a href="#Influxdb-下载" class="headerlink" title="Influxdb 下载"></a>Influxdb 下载</h2><p>学习参考博客</p>
<p>安装部署：</p>
<p><a href="https://www.cnblogs.com/imyalost/p/9689209.html" target="_blank" rel="noopener">https://www.cnblogs.com/imyalost/p/9689209.html</a></p>
<p>配置文件说明：</p>
<p><a href="https://www.cnblogs.com/smail-bao/p/8080894.html" target="_blank" rel="noopener">https://www.cnblogs.com/smail-bao/p/8080894.html</a></p>
<p>基本概念和操作：</p>
<p><a href="https://www.cnblogs.com/wzbk/p/10569683.html" target="_blank" rel="noopener">https://www.cnblogs.com/wzbk/p/10569683.html</a></p>
<p><a href="http://www.361way.com/influxdb-user/5291.html" target="_blank" rel="noopener">http://www.361way.com/influxdb-user/5291.html</a></p>
<p>备份与恢复：</p>
<p><a href="https://blog.csdn.net/weixin_44649870/article/details/96457486" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44649870/article/details/96457486</a></p>
<p>官网下载：</p>
<p><a href="https://portal.influxdata.com/downloads/" target="_blank" rel="noopener">https://portal.influxdata.com/downloads/</a></p>
<p>由于直接点击下载链接会被墙，导致下载按钮点击完无反应</p>
<p>可以通过右键查看网页源代码，检索release，并找到对应版本&amp;平台的下载链接</p>
<p><img src="C:%5CUsers%5Cadmin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200224143032364.png" alt="image-20200224143032364"></p>
<p><a href="https://dl.influxdata.com/influxdb/releases/influxdb-1.7.10.x86_64.rpm" target="_blank" rel="noopener">https://dl.influxdata.com/influxdb/releases/influxdb-1.7.10.x86_64.rpm</a></p>
<h2 id="Infuxdb-安装"><a href="#Infuxdb-安装" class="headerlink" title="Infuxdb 安装"></a>Infuxdb 安装</h2><p>[root@influx tmp]# yum install influxdb-1.7.10.x86_64.rpm</p>
<p>直接通过yum安装，在测试安装时，本人采用的是minimal的Linux环境，发现不需要其他依赖包</p>
<p>文件结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 路径：&#x2F;usr&#x2F;bin</span><br><span class="line">influxd            # influxdb服务器</span><br><span class="line">influx             # influxdb命令行客户端</span><br><span class="line">influx_inspect     # 查看工具</span><br><span class="line">influx_stress      # 压力测试工具</span><br><span class="line">influx_tsm         # 数据库转换工具（将数据库从b1或bz1格式转换为tsm1格式）</span><br><span class="line"></span><br><span class="line"># 路径：&#x2F;var&#x2F;lib&#x2F;influxdb&#x2F;</span><br><span class="line">data               # 存放最终存储的数据，文件以.tsm结尾</span><br><span class="line">meta               # 存放数据库元数据</span><br><span class="line">wal                # 存放预写日志文件</span><br></pre></td></tr></table></figure>



<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>[root@influx influxdb]# service influxdb start</p>
<h2 id="初步了解"><a href="#初步了解" class="headerlink" title="初步了解"></a>初步了解</h2><p>1、数据格式</p>
<p>在 InfluxDB 中，我们可以粗略的将要存入的一条数据看作<strong>一个虚拟的 key 和其对应的 value(field value)</strong>。格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpu_usage,host&#x3D;server01,region&#x3D;us-west value&#x3D;0.64 1434055562000000000</span><br></pre></td></tr></table></figure>



<p>虚拟的 key 包括以下几个部分： database, retention policy, measurement, tag sets, field name, timestamp。</p>
<ul>
<li>database: 数据库名，在 InfluxDB 中可以创建多个数据库，不同数据库中的数据文件是隔离存放的，存放在磁盘上的不同目录。</li>
<li>retention policy: 存储策略，用于设置数据保留的时间，每个数据库刚开始会自动创建一个默认的存储策略 autogen，数据保留时间为永久，之后用户可以自己设置，例如保留最近2小时的数据。插入和查询数据时如果不指定存储策略，则使用默认存储策略，且默认存储策略可以修改。InfluxDB 会定期清除过期的数据。</li>
<li>measurement: 测量指标名，例如 cpu_usage 表示 cpu 的使用率。</li>
<li>tag sets: tags 在 InfluxDB 中会按照字典序排序，不管是 tagk 还是 tagv，只要不一致就分别属于两个 key，例如 host=server01,region=us-west 和 host=server02,region=us-west 就是两个不同的 tag set。</li>
<li>tag–标签，在InfluxDB中，tag是一个非常重要的部分，表名+tag一起作为数据库的索引，是“key-value”的形式。</li>
<li>field name: 例如上面数据中的 value 就是 fieldName，InfluxDB 中支持一条数据中插入多个 fieldName，这其实是一个语法上的优化，在实际的底层存储中，是当作多条数据来存储。</li>
<li>timestamp: 每一条数据都需要指定一个时间戳，在 TSM 存储引擎中会特殊对待，以为了优化后续的查询操作。</li>
</ul>
<p>2、与传统数据库中的名词做比较</p>
<table>
<thead>
<tr>
<th>influxDB中的名词</th>
<th>传统数据库中的概念</th>
</tr>
</thead>
<tbody><tr>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>measurement</td>
<td>数据库中的表</td>
</tr>
<tr>
<td>points</td>
<td>表里面的一行数据</td>
</tr>
</tbody></table>
<p>3、Point</p>
<p>Point由时间戳（time）、数据（field）、标签（tags）组成。</p>
<p>Point相当于传统数据库里的一行数据，如下表所示：</p>
<table>
<thead>
<tr>
<th>Point属性</th>
<th>传统数据库中的概念</th>
</tr>
</thead>
<tbody><tr>
<td>time</td>
<td>每个数据记录时间，是数据库中的主索引(会自动生成)</td>
</tr>
<tr>
<td>fields</td>
<td>各种记录值（没有索引的属性）</td>
</tr>
<tr>
<td>tags</td>
<td>各种有索引的属性</td>
</tr>
</tbody></table>
<p>4、Series</p>
<p>​    Series 相当于是 InfluxDB 中一些数据的集合，在同一个 database 中，retention policy、measurement、tag sets 完全相同的数据同属于一个 series，同一个 series 的数据在物理上会按照时间顺序排列存储在一起。</p>
<p>5、Shard</p>
<p>​    Shard 在 InfluxDB 中是一个比较重要的概念，它和 retention policy 相关联。每一个存储策略下会存在许多 shard，每一个 shard 存储一个指定时间段内的数据，并且不重复，例如 7点-8点 的数据落入 shard0 中，8点-9点的数据则落入 shard1 中。每一个 shard 都对应一个底层的 tsm 存储引擎，有独立的 cache、wal、tsm file。</p>
<p>6、组件</p>
<p>TSM 存储引擎主要由几个部分组成： cache、wal、tsm file、compactor。</p>
<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524092614591-2097512916.png" alt="img"></p>
<p>1）Cache：cache 相当于是 LSM Tree 中的 memtabl。插入数据时，实际上是同时往 cache 与 wal 中写入数据，可以认为 cache 是 wal 文件中的数据在内存中的缓存。当 InfluxDB 启动时，会遍历所有的 wal 文件，重新构造 cache，这样即使系统出现故障，也不会导致数据的丢失。</p>
<p>cache 中的数据并不是无限增长的，有一个 maxSize 参数用于控制当 cache 中的数据占用多少内存后就会将数据写入 tsm 文件。如果不配置的话，默认上限为 25MB，每当 cache 中的数据达到阀值后，会将当前的 cache 进行一次快照，之后清空当前 cache 中的内容，再创建一个新的 wal 文件用于写入，剩下的 wal 文件最后会被删除，快照中的数据会经过排序写入一个新的 tsm 文件中。</p>
<p>2）WAL：wal 文件的内容与内存中的 cache 相同，其作用就是为了持久化数据，当系统崩溃后可以通过 wal 文件恢复还没有写入到 tsm 文件中的数据。</p>
<p>3）TSM File：单个 tsm file 大小最大为 2GB，用于存放数据。</p>
<p>4）Compactor：compactor 组件在后台持续运行，每隔 1 秒会检查一次是否有需要压缩合并的数据。</p>
<p>主要进行两种操作，一种是 cache 中的数据大小达到阀值后，进行快照，之后转存到一个新的 tsm 文件中。</p>
<p>另外一种就是合并当前的 tsm 文件，将多个小的 tsm 文件合并成一个，使每一个文件尽量达到单个文件的最大大小，减少文件的数量，并且一些数据的删除操作也是在这个时候完成。</p>
<p>7、目录与文件结构</p>
<p>InfluxDB 的数据存储主要有三个目录。默认情况下是 meta, wal 以及 data 三个目录。</p>
<p>meta 用于存储数据库的一些元数据，meta 目录下有一个 <code>meta.db</code> 文件。</p>
<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524093235825-1659794905.png" alt="img"></p>
<p>wal 目录存放预写日志文件，以 <code>.wal</code> 结尾。</p>
<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524093306075-667589526.png" alt="img"></p>
<p>data 目录存放实际存储的数据文件，以 <code>.tsm</code> 结尾。</p>
<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524093334310-39898491.png" alt="img"></p>
<p>上面几张图中，_internal为数据库名，monitor为存储策略名称，再下一层目录中的以数字命名的目录是 shard 的 ID 值。</p>
<p>存储策略下有两个 shard，ID 分别为 1 和 2，shard 存储了某一个时间段范围内的数据。再下一级的目录则为具体的文件，分别是 <code>.wal</code> 和 <code>.tsm</code> 结尾的文件。</p>
<h2 id="InfluxDB基本操作"><a href="#InfluxDB基本操作" class="headerlink" title="InfluxDB基本操作"></a>InfluxDB基本操作</h2><p>InfluxDB提供多种操作方式：</p>
<p>1）客户端命令行方式</p>
<p>2）HTTP API接口</p>
<p>3）各语言API库</p>
<p>4）基于WEB管理页面操作</p>
<h2 id="客户端命令行方式操作"><a href="#客户端命令行方式操作" class="headerlink" title="客户端命令行方式操作"></a>客户端命令行方式操作</h2><p>进入命令行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">influx -precision rfc3339</span><br></pre></td></tr></table></figure>



<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524094159044-437051621.png" alt="img"></p>
<p>1、InfluxDB数据库操作</p>
<ul>
<li>显示数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure>

<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524094353341-524545793.png" alt="img"></p>
<ul>
<li>新建数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database shhnwangjian</span><br></pre></td></tr></table></figure>



<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524094458435-2086705134.png" alt="img"></p>
<ul>
<li>删除数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database shhnwangjian</span><br></pre></td></tr></table></figure>



<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524094543872-2074134150.png" alt="img"></p>
<ul>
<li>使用指定数据库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use shhnwangjian</span><br></pre></td></tr></table></figure>



<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524094640560-11200090.png" alt="img"></p>
<p>2、InfluxDB数据表操作</p>
<p>在InfluxDB当中，并没有表（table）这个概念，取而代之的是MEASUREMENTS，MEASUREMENTS的功能与传统数据库中的表一致，因此我们也可以将MEASUREMENTS称为InfluxDB中的表。</p>
<ul>
<li>显示所有表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW MEASUREMENTS</span><br></pre></td></tr></table></figure>



<ul>
<li>新建表</li>
</ul>
<p>InfluxDB中没有显式的新建表的语句，只能通过insert数据的方式来建立新表。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert disk_free,hostname&#x3D;server01 value&#x3D;442221834240i</span><br></pre></td></tr></table></figure>



<p>其中 disk_free 就是表名，hostname是索引（tag），value=xx是记录值（field），记录值可以有多个，系统自带追加时间戳</p>
<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524100913700-845650904.png" alt="img"></p>
<p>或者添加数据时，自己写入时间戳</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert disk_free,hostname&#x3D;server01 value&#x3D;442221834240i 1435362189575692182</span><br></pre></td></tr></table></figure>



<p><img src="https://images2015.cnblogs.com/blog/830561/201705/830561-20170524101014904-2003353778.png" alt="img"></p>
<ul>
<li>删除表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop measurement disk_free</span><br></pre></td></tr></table></figure>



<p>3、数据保存策略（Retention Policies）</p>
<p>influxDB是没有提供直接删除数据记录的方法，但是提供数据保存策略，主要用于指定数据保留时间，超过指定时间，就删除这部分数据。</p>
<ul>
<li>查看当前数据库Retention Policies</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show retention policies on &quot;db_name&quot;</span><br></pre></td></tr></table></figure>



<p><img src="https://images2017.cnblogs.com/blog/830561/201708/830561-20170807085757987-166994246.png" alt="img"></p>
<ul>
<li>创建新的Retention Policies</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create retention policy &quot;rp_name&quot; on &quot;db_name&quot; duration 3w replication 1 default</span><br></pre></td></tr></table></figure>



<p>rp_name：策略名；</p>
<p>db_name：具体的数据库名；</p>
<p>3w：保存3周，3周之前的数据将被删除，influxdb具有各种事件参数，比如：h（小时），d（天），w（星期）；</p>
<p>replication 1：副本个数，一般为1就可以了；</p>
<p>default：设置为默认策略</p>
<ul>
<li>修改Retention Policies</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter retention policy &quot;rp_name&quot; on &quot;db_name&quot; duration 30d default</span><br></pre></td></tr></table></figure>



<ul>
<li>删除Retention Policies</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop retention policy &quot;rp_name&quot; on &quot;db_name&quot;</span><br></pre></td></tr></table></figure>





<p>4、连续查询（Continuous Queries）</p>
<p>InfluxDB的连续查询是在数据库中自动定时启动的一组语句，语句中必须包含 <code>SELECT</code>关键词和<code>GROUP BY time()</code>关键词。</p>
<p>InfluxDB会将查询结果放在指定的数据表中。</p>
<p><strong>目的：</strong>使用连续查询是最优的降低采样率的方式，连续查询和存储策略搭配使用将会大大降低InfluxDB的系统占用量。而且使用连续查询后，数据会存放到指定的数据表中，这样就为以后统计不同精度的数据提供了方便。</p>
<ul>
<li>新建连续查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br><span class="line">[RESAMPLE [EVERY &lt;interval&gt;] [FOR &lt;interval&gt;]]</span><br><span class="line">BEGIN SELECT &lt;function&gt;(&lt;stuff&gt;)[,&lt;function&gt;(&lt;stuff&gt;)] INTO &lt;different_measurement&gt; </span><br><span class="line">FROM &lt;current_measurement&gt; [WHERE &lt;stuff&gt;] GROUP BY time(&lt;interval&gt;)[,&lt;stuff&gt;]</span><br><span class="line">END</span><br></pre></td></tr></table></figure>



<p> 样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY wj_30m ON shhnwangjian BEGIN SELECT mean(connected_clients), MEDIAN(connected_clients), MAX(connected_clients), MIN(connected_clients) INTO redis_clients_30m FROM redis_clients GROUP BY ip,port,time(30m) END</span><br></pre></td></tr></table></figure>



<p>在shhnwangjian库中新建了一个名为 wj_30m 的连续查询，每三十分钟取一个connected_clients字段的平均值、中位值、最大值、最小值 redis_clients_30m 表中。使用的数据保留策略都是 default。</p>
<p>不同database样例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE CONTINUOUS QUERY wj_30m ON shhnwangjian_30 BEGIN SELECT mean(connected_clients), MEDIAN(connected_clients), MAX(connected_clients), MIN(connected_clients) INTO shhnwangjian_30.autogen.redis_clients_30m FROM shhnwangjian.autogen.redis_clients GROUP BY ip,port,time(30m) END</span><br></pre></td></tr></table></figure>





<ul>
<li>显示所有已存在的连续查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SHOW CONTINUOUS QUERIES</span><br></pre></td></tr></table></figure>



<p><img src="https://images2017.cnblogs.com/blog/830561/201708/830561-20170807103904377-207403322.png" alt="img"></p>
<ul>
<li>删除Continuous Queries</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP CONTINUOUS QUERY &lt;cq_name&gt; ON &lt;database_name&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>用户管理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 显示用户</span><br><span class="line">SHOW USERS</span><br><span class="line"># 创建用户</span><br><span class="line">CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39;</span><br><span class="line"># 创建管理员权限的用户</span><br><span class="line">CREATE USER &quot;username&quot; WITH PASSWORD &#39;password&#39; WITH ALL PRIVILEGES</span><br><span class="line"># 删除用户</span><br><span class="line">DROP USER &quot;username&quot;</span><br></pre></td></tr></table></figure>



<h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><p>备份元数据</p>
<p>influxd backup 元数据存储位置<br>influxd backup -host localhost:8088 元数据存储位置   # 远程备份</p>
<p>备份数据库</p>
<p>influxd backup -database database_name  数据存储位置<br>influxd backup -database database_name -host localhost:8088 数据存储位置   # 远程备份</p>
<p>恢复元数据</p>
<p>influxd restore -metadir /var/lib/influxdb/meta/ 元数据存储位置</p>
<p>恢复数据库</p>
<p>influxd restore -database database_name -datadir /var/lib/influxdb/data 数据存储位置</p>
<p>修改权限</p>
<p>chown -R influxdb:influxdb /var/lib/influxdb</p>
<p>重启influxdb</p>
<p>service influxdb stop<br>service influxdb start</p>
]]></content>
      <categories>
        <category>时序数据库</category>
      </categories>
      <tags>
        <tag>InfluxDB</tag>
      </tags>
  </entry>
</search>
